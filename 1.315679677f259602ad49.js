(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{HiJM:function(e,n,t){"use strict";t.d(n,"a",function(){return s});var a=0,i=0,o=0,l=0,r=0,s=function(){function e(){this.idTab="source-display-tab-"+a++,this.idTabContent="source-display-tab-content-"+i++,this.idTabHtml="tab-html-"+o++,this.idTypescript="tab-typescript-"+l++,this.idTabCss="tab-css-"+r++}return e.prototype.ngOnInit=function(){this.html&&(this.html=this.html.replace(/\/{\/{/g,"{{"),this.html=this.html.replace(/\/}\/}/g,"}}")),this.typescript&&(this.typescript=this.typescript.replace(/\/{\/{/g,"{{"),this.typescript=this.typescript.replace(/\/}\/}/g,"}}")),this.css&&(this.css=this.css.replace(/\/{\/{/g,"{{"),this.css=this.css.replace(/\/}\/}/g,"}}"))},e}()},OQP5:function(e,n,t){"use strict";t.d(n,"c",function(){return h}),t.d(n,"b",function(){return u}),t.d(n,"a",function(){return c}),t.d(n,"d",function(){return p}),t.d(n,"e",function(){return d});var a=t("CcnG"),i=t("26FU"),o=t("0/uQ"),l=t("VnD/"),r=t("t9fZ"),s=t("67Y/"),d=new a.o("OPTIONS"),u=function(){function e(e){this.options={theme:"github",path:"assets/lib/hljs",auto:!0},this._isReady$=new i.a(!1),this.options=Object.assign({},this.options,e),"undefined"!=typeof hljs?(hljs.configure(this.options.config),this._isReady$.next(!0)):(this._loadScript(),this._loadTheme())}return Object.defineProperty(e.prototype,"isReady",{get:function(){return this._isReady$.pipe(Object(l.a)(function(e){return e}),Object(r.a)(1))},enumerable:!0,configurable:!0}),e.prototype.highlight=function(e,n,t,a){if("undefined"!=typeof hljs)return hljs.highlight(e,n,t,a)},e.prototype.highlightAuto=function(e,n){if("undefined"!=typeof hljs)return hljs.highlightAuto(e,n)},e.prototype.fixMarkup=function(e){if("undefined"!=typeof hljs)return hljs.fixMarkup(e)},e.prototype.highlightBlock=function(e){"undefined"!=typeof hljs&&hljs.highlightBlock(e)},e.prototype.configure=function(e){"undefined"!=typeof hljs&&hljs.configure(this.options.config)},e.prototype.initHighlighting=function(){"undefined"!=typeof hljs&&hljs.initHighlighting()},e.prototype.initHighlightingOnLoad=function(){"undefined"!=typeof hljs&&hljs.initHighlightingOnLoad()},e.prototype.registerLanguage=function(e,n){"undefined"!=typeof hljs&&hljs.registerLanguage(e,n)},e.prototype.listLanguages=function(){if("undefined"!=typeof hljs)return hljs.listLanguages()},e.prototype.getLanguage=function(e){if("undefined"!=typeof hljs)return hljs.getLanguage(e)},e.prototype._loadScript=function(){var e=this,n=document.createElement("script");n.async=!0,n.type="text/javascript",n.onload=function(){hljs.configure(e.options.config),e._isReady$.next(!0)},n.src=this.options.path+"/highlight.pack.js",document.head.appendChild(n)},e.prototype._loadTheme=function(){var e=document.createElement("link");e.rel="stylesheet",e.type="text/css",e.href=this.options.path+"/styles/"+this.options.theme+".css",document.head.appendChild(e)},e}(),c=function(){function e(e,n,t){this.renderer=n,this.hljs=t,this.highlighted=new a.m,this.el=e.nativeElement}return Object.defineProperty(e.prototype,"setCode",{set:function(e){var n=this;this.code=e,this.hljs.isReady.subscribe(function(){return n.highlightElement(n.el,e)})},enumerable:!0,configurable:!0}),e.prototype.ngOnInit=function(){var e=this;!this.code&&this.hljs.options.auto&&this.hljs.isReady.subscribe(function(){e.highlightTextContent(),e.domObs=new MutationObserver(function(){return e.highlightTextContent()}),e.domObs.observe(e.el,{childList:!0,subtree:!0})})},e.prototype.highlightTextContent=function(){this.highlight?this.highlightChildren(this.el,"all"===this.highlight?"pre code":this.highlight):"code"===this.el.tagName.toLowerCase()?this.highlightElement(this.el,this.el.innerText.trim()):console.warn("[HighlightDirective]: Use 'highlight' on <code> element only")},e.prototype.highlightElement=function(e,n){var t=this.hljs.highlightAuto(n,this.language);t.value!==e.innerHTML&&(this.renderer.addClass(e,"hljs"),this.renderer.setProperty(e,"innerHTML",t.value),this.highlighted.emit(t))},e.prototype.highlightChildren=function(e,n){var t=this,a=e.querySelectorAll(n);Object(o.a)(a).pipe(Object(l.a)(function(e){return 1===e.childNodes.length&&"#text"===e.childNodes[0].nodeName}),Object(s.a)(function(e){return t.highlightElement(e,e.innerText.trim())}),Object(r.a)(1)).subscribe()},e.prototype.ngOnDestroy=function(){!this.code&&this.hljs.options.auto&&this.domObs.disconnect()},e}();function p(e){return new u(e)}var h=function(){function e(){}return e.forRoot=function(n){return{ngModule:e,providers:[{provide:d,useValue:n},{provide:u,useFactory:p,deps:[d]}]}},e}()},PCNd:function(e,n,t){"use strict";t.d(n,"a",function(){return a});var a=function(){}},dxD6:function(e){e.exports={b:[{name:"BadgeDirective",id:"directive-BadgeDirective-c3214969219962e0b0e00e1851100d38",file:"projects/design-angular-kit/src/lib/badge/badge.directive.ts",type:"directive",description:"<p>Una badge con design bootstrap italia.</p>\n",sourceCode:"import { Directive, ElementRef, Input, HostBinding } from '@angular/core';\nimport { ThemeColor, THEME_COLORS } from '../models/ThemeColor';\nimport { Util } from '../util/util';\n\n/**\n * Una badge con design bootstrap italia.\n */\n@Directive({\n  selector: '[it-badge]', // tslint:disable-line\n  exportAs: 'itBadge'\n})\nexport class BadgeDirective {\n\n  /**\n   * (Opzionale) indica il colore del badge. Pu\xf2 essere `primary`, `secondary`, `danger`, `warning`, `info`, `success`, `light` o `dark`.\n   * Se non viene fornito o il valore \xe8 diverso da quelli previsti il suo valore di default \xe8 `light`.\n   */\n  @Input()\n  get badgeColor(): any {\n    return this._badgeColor;\n  }\n  set badgeColor(value: any) {\n    if (ThemeColor.is(value)) {\n      this._badgeColor = value;\n    } else {\n      this._badgeColor = THEME_COLORS.LIGHT;\n    }\n  }\n  private _badgeColor = THEME_COLORS.LIGHT;\n\n  /**\n   * La direttiva che abilita l'elemento come badge. Mostra il testo come contenuto del badge.\n   * Se valutato ad `undefined`, `null` o stringa vuota il badge non viene mostrato.\n   */\n  @Input('it-badge')\n  @HostBinding('innerText')\n  get badgeText(): string { return this._badgeText; }\n  set badgeText(value: string) {\n    if (value) {\n      this._badgeText = value;\n    } else {\n      this._badgeText = '';\n    }\n  }\n  private _badgeText = '';\n\n  private _isPill = false;\n  /**\n   * Indica se il badge \xe8 arrotondato o meno.\n   */\n  @Input()\n  get isPill(): boolean { return this._isPill; }\n  set isPill(value: boolean) {\n    this._isPill = Util.coerceBooleanProperty(value);\n  }\n\n  private getBadgeColorClassName(): string {\n    return `badge-${this._badgeColor}`;\n  }\n\n  @HostBinding('class')\n  get hostClasses(): string {\n    return [\n      'badge',\n      this.getBadgeColorClassName(),\n      this.isPill ? 'badge-pill' : '',\n    ].join(' ');\n  }\n\n  constructor(private el: ElementRef) { }\n\n}\n",selector:"[it-badge]",providers:[],inputsClass:[{name:"badgeColor",description:"<p>(Opzionale) indica il colore del badge. Pu\xf2 essere <code>primary</code>, <code>secondary</code>, <code>danger</code>, <code>warning</code>, <code>info</code>, <code>success</code>, <code>light</code> o <code>dark</code>.\nSe non viene fornito o il valore \xe8 diverso da quelli previsti il suo valore di default \xe8 <code>light</code>.</p>\n",line:19,type:"any"},{name:"isPill",description:"<p>Indica se il badge \xe8 arrotondato o meno.</p>\n",line:52,type:"boolean"},{name:"it-badge",description:"<p>La direttiva che abilita l&#39;elemento come badge. Mostra il testo come contenuto del badge.\nSe valutato ad <code>undefined</code>, <code>null</code> o stringa vuota il badge non viene mostrato.</p>\n",line:37,type:"string"}],outputsClass:[],hostBindings:[{name:"class",line:62,type:"string"}],hostListeners:[],propertiesClass:[{name:"_badgeColor",defaultValue:"THEME_COLORS.LIGHT",type:"",optional:!1,description:"",line:29,modifierKind:[112]},{name:"_badgeText",defaultValue:"''",type:"string",optional:!1,description:"",line:45,modifierKind:[112]},{name:"_isPill",defaultValue:"false",type:"",optional:!1,description:"",line:47,modifierKind:[112]}],methodsClass:[{name:"getBadgeColorClassName",args:[],optional:!1,returnType:"string",typeParameters:[],line:57,modifierKind:[112]}],constructorObj:{name:"constructor",description:"",args:[{name:"el",type:"ElementRef"}],line:68,jsdoctags:[{name:"el",type:"ElementRef",tagName:{text:"param"}}]},accessors:{badgeColor:{name:"badgeColor",setSignature:{name:"badgeColor",type:"void",args:[{name:"value",type:"any"}],returnType:"void",line:22,jsdoctags:[{name:"value",type:"any",tagName:{text:"param"}}]}},badgeText:{name:"badgeText",setSignature:{name:"badgeText",type:"void",args:[{name:"value",type:"string"}],returnType:"void",line:38,jsdoctags:[{name:"value",type:"string",tagName:{text:"param"}}]}},isPill:{name:"isPill",setSignature:{name:"isPill",type:"void",args:[{name:"value",type:"boolean"}],returnType:"void",line:53,jsdoctags:[{name:"value",type:"boolean",tagName:{text:"param"}}]}}}},{name:"RadioGroupDirective",id:"directive-RadioGroupDirective-f64fd0c7b01c8d4779c6a1f6316e64e0",file:"projects/design-angular-kit/src/lib/radio/radio.component.ts",type:"directive",description:"",sourceCode:"import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  forwardRef,\n  ChangeDetectionStrategy,\n  AfterContentInit,\n  Directive,\n  ContentChildren,\n  QueryList,\n  OnInit,\n  OnDestroy,\n  Optional,\n  HostBinding\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { UniqueSelectionDispatcher } from './unique-selection-dispatcher';\n\nlet identifier = 0;\n\nfunction _coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n\nexport class RadioChange {\n  constructor(\n    public source: RadioButtonComponent,\n    public value: any\n  ) { }\n}\n\n@Directive({\n  selector: 'it-radio-group', // tslint:disable-line\n  exportAs: 'itRadioGroup',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioGroupDirective),\n    multi: true\n  }]\n})\nexport class RadioGroupDirective implements AfterContentInit, ControlValueAccessor {\n\n  @HostBinding('attr.role') role = 'radiogroup';\n\n  /**\n   * Il valore selezionato per il gruppo. Dovrebbe essere uguale al valore del radio button selezionato se\n   * *esiste* un radio button con un valore corrispondente. Se *non esiste* un radio button corrispondente\n   * questo valore persiste ed \xe8 applicato nel caso in cui un nuovo radio button viene aggiunto con il valore\n   * corrispondente.\n   */\n  private _value: any = null;\n\n  /** L'attributo HTML name da applicare ai radio button in questo gruppo */\n  private _name = `it-radio-group-${identifier++}`;\n\n  /** Il radio button attualmente selezionato. */\n  private _selected: RadioButtonComponent | null = null;\n\n  /** se `value` \xe8 stato settato al suo valore iniziale. */\n  private _isInitialized = false;\n\n  /** Se il radio group \xe8 disabilitato. */\n  private _disabled = false;\n\n\n\n  /**\n   * Evento emesso quando il valore del gruppo cambia.\n   * Gli eventi di change sono emessi soltanto quando il valore cambia a causa dell'interazione dell'utente\n   * con il radio button (stesso comportamento di `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<RadioChange> = new EventEmitter<RadioChange>();\n\n  /** radio buttons figli. */\n  @ContentChildren(forwardRef(() => RadioButtonComponent), { descendants: true }) _radios: QueryList<RadioButtonComponent>; // tslint:disable-line\n\n  /** Il metodo da chiamare per aggiornare ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => { };\n\n  onTouched: () => any = () => { };\n\n  /** Nome del gruppo di radio button. Tutti i radio button all'interno del gruppo avranno questo nome. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Valore del radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Il radio button selezionato. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: RadioButtonComponent | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Se il gruppo \xe8 disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = _coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef\n  ) { }\n\n  /**\n   * Inizializza le propriet\xe0 quando il contenuto dei figli\xe8 disponibile.\n   * Questo permette di propagare gli attributi rilevanti ai radio buttons associati.\n   */\n  ngAfterContentInit(): void {\n    this._isInitialized = true;\n  }\n\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Aggiorna il radio button `selected` a seconda del suo _value. */\n  private _updateSelectedRadioFromValue(): void {\n    this._selected = null;\n    this._radios.forEach(radio => {\n      radio.checked = this.value === radio.value;\n      if (radio.checked) {\n        this._selected = radio;\n      }\n    });\n  }\n\n  /** Invia l'evento change con la selezione corrente e il valore del gruppo. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new RadioChange(this._selected, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  writeValue(value: any): void {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  registerOnChange(fn: (value: any) => void): void {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n}\n\n/**\n * Un radio button con design bootstrap italia. Supporta tutte le funzionalit\xe0 di una radio HTML5,\n * ed espone una API simile. Una `<it-radio-button>` pu\xf2 essere checked, unchecked, o disabled.\n */\n@Component({\n  selector: 'it-radio-button',\n  templateUrl: './radio.component.html',\n  styleUrls: ['./radio.component.scss'],\n  exportAs: 'itRadioButton',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RadioButtonComponent implements OnInit, OnDestroy {\n\n  id = `radio-${identifier++}`;\n\n  /** Attributo 'name' usato per raggruppare i radio button per un'unica selezione. */\n  @Input() name: string;\n\n  /** L'etichetta delradio button. */\n  @Input()\n  label: string;\n\n  /** se il radio button \xe8 checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = _coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Il valore di questo radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Se il radio button \xe8 disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = !!value;\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /**\n   * Evento emesso quando il valore `checked` del radio button cambia.\n   */\n  @Output() readonly change: EventEmitter<RadioChange> = new EventEmitter<RadioChange>();\n\n  /** Il radio group padre. Pu\xf2 essere presente o meno. */\n  radioGroup: RadioGroupDirective;\n\n  /** Se il radio button \xe8 checked. */\n  private _checked = false;\n\n  /** Se il radio button \xe8 disabled. */\n  private _disabled: boolean;\n\n  /** il valore assegnato al radio button. */\n  private _value: any = null;\n\n  private _removeUniqueSelectionListener: () => void = () => { };\n\n  constructor(\n    @Optional() radioGroup: RadioGroupDirective,\n    private _changeDetector: ChangeDetectorRef,\n    private _radioDispatcher: UniqueSelectionDispatcher\n  ) {\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /**\n   * Segna il radio button come da controllare per la change detection.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit(): void {\n    if (this.radioGroup) {\n      // Se il radio button \xe8 all'interno di un gruppo, determina se deve essere selezionato\n      this.checked = this.radioGroup.value === this._value;\n      // Copia il `name` del radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngOnDestroy() {\n    this._removeUniqueSelectionListener();\n  }\n\n  private _emitChangeEvent(): void {\n    this.change.emit(new RadioChange(this, this._value));\n  }\n\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n}\n",selector:"it-radio-group",providers:[{name:"{\n    : , : (() => ), : true\n}"}],inputsClass:[{name:"disabled",description:"<p>Se il gruppo \xe8 disabled </p>\n",line:121,type:"boolean"},{name:"name",description:"<p>Nome del gruppo di radio button. Tutti i radio button all&#39;interno del gruppo avranno questo nome. </p>\n",line:86,type:"string"},{name:"selected",description:"<p>Il radio button selezionato. </p>\n",line:112},{name:"value",description:"<p>Valore del radio button. </p>\n",line:94,type:"any"}],outputsClass:[{name:"change",defaultValue:"new EventEmitter<RadioChange>()",description:"<p>Evento emesso quando il valore del gruppo cambia.\nGli eventi di change sono emessi soltanto quando il valore cambia a causa dell&#39;interazione dell&#39;utente\ncon il radio button (stesso comportamento di <code>&lt;input type-&quot;radio&quot;&gt;</code>).</p>\n",line:74,type:"EventEmitter<RadioChange>"}],hostBindings:[{name:"attr.role",defaultValue:"'radiogroup'",line:45}],hostListeners:[],propertiesClass:[{name:"_controlValueAccessorChangeFn",defaultValue:"() => { }",type:"function",optional:!1,description:"<p>Il metodo da chiamare per aggiornare ngModel </p>\n",line:80},{name:"_disabled",defaultValue:"false",type:"",optional:!1,description:"<p>Se il radio group \xe8 disabilitato. </p>\n",line:65,modifierKind:[112]},{name:"_isInitialized",defaultValue:"false",type:"",optional:!1,description:"<p>se <code>value</code> \xe8 stato settato al suo valore iniziale. </p>\n",line:62,modifierKind:[112]},{name:"_name",defaultValue:"`it-radio-group-${identifier++}`",type:"",optional:!1,description:"<p>L&#39;attributo HTML name da applicare ai radio button in questo gruppo </p>\n",line:56,modifierKind:[112]},{name:"_radios",type:"QueryList<RadioButtonComponent>",optional:!1,description:"<p>radio buttons figli. </p>\n",line:77,decorators:[{name:"ContentChildren"}]},{name:"_selected",defaultValue:"null",type:"RadioButtonComponent | null",optional:!1,description:"<p>Il radio button attualmente selezionato. </p>\n",line:59,modifierKind:[112]},{name:"_value",defaultValue:"null",type:"any",optional:!1,description:"<p>Il valore selezionato per il gruppo. Dovrebbe essere uguale al valore del radio button selezionato se\n<em>esiste</em> un radio button con un valore corrispondente. Se <em>non esiste</em> un radio button corrispondente\nquesto valore persiste ed \xe8 applicato nel caso in cui un nuovo radio button viene aggiunto con il valore\ncorrispondente.</p>\n",line:53,modifierKind:[112]},{name:"onTouched",defaultValue:"() => { }",type:"function",optional:!1,description:"",line:82}],methodsClass:[{name:"_checkSelectedRadioButton",args:[],optional:!1,returnType:"void",typeParameters:[],line:104},{name:"_emitChangeEvent",args:[],optional:!1,returnType:"void",typeParameters:[],line:165,description:"<p>Invia l&#39;evento change con la selezione corrente e il valore del gruppo. </p>\n"},{name:"_markRadiosForCheck",args:[],optional:!1,returnType:"void",typeParameters:[],line:171},{name:"_touch",args:[],optional:!1,returnType:"void",typeParameters:[],line:139},{name:"_updateRadioButtonNames",args:[],optional:!1,returnType:"void",typeParameters:[],line:145,modifierKind:[112]},{name:"_updateSelectedRadioFromValue",args:[],optional:!1,returnType:"void",typeParameters:[],line:154,description:"<p>Aggiorna il radio button <code>selected</code> a seconda del suo _value. </p>\n",modifierKind:[112]},{name:"ngAfterContentInit",args:[],optional:!1,returnType:"void",typeParameters:[],line:135,description:"<p>Inizializza le propriet\xe0 quando il contenuto dei figli\xe8 disponibile.\nQuesto permette di propagare gli attributi rilevanti ai radio buttons associati.</p>\n"},{name:"registerOnChange",args:[{name:"fn",type:"function",function:[{name:"value",type:"any"}]}],optional:!1,returnType:"void",typeParameters:[],line:182,jsdoctags:[{name:"fn",type:"function",function:[{name:"value",type:"any"}],tagName:{text:"param"}}]},{name:"registerOnTouched",args:[{name:"fn",type:"any"}],optional:!1,returnType:"void",typeParameters:[],line:186,jsdoctags:[{name:"fn",type:"any",tagName:{text:"param"}}]},{name:"writeValue",args:[{name:"value",type:"any"}],optional:!1,returnType:"void",typeParameters:[],line:177,jsdoctags:[{name:"value",type:"any",tagName:{text:"param"}}]}],implements:["AfterContentInit","ControlValueAccessor"],constructorObj:{name:"constructor",description:"",args:[{name:"_changeDetector",type:"ChangeDetectorRef"}],line:125,jsdoctags:[{name:"_changeDetector",type:"ChangeDetectorRef",tagName:{text:"param"}}]},accessors:{name:{name:"name",setSignature:{name:"name",type:"void",args:[{name:"value",type:"string"}],returnType:"void",line:87,jsdoctags:[{name:"value",type:"string",tagName:{text:"param"}}]}},value:{name:"value",setSignature:{name:"value",type:"void",args:[{name:"newValue",type:"any"}],returnType:"void",line:95,jsdoctags:[{name:"newValue",type:"any",tagName:{text:"param"}}]}},selected:{name:"selected",setSignature:{name:"selected",type:"void",args:[{name:"selected",type:""}],returnType:"void",line:113,jsdoctags:[{name:"selected",type:"",tagName:{text:"param"}}]}},disabled:{name:"disabled",setSignature:{name:"disabled",type:"void",args:[{name:"value",type:""}],returnType:"void",line:122,jsdoctags:[{name:"value",type:"",tagName:{text:"param"}}]}}}}],a:[{name:"ButtonComponent",id:"component-ButtonComponent-3099c24c7b4788edf94c96720a59209f",file:"projects/design-angular-kit/src/lib/button/button.component.ts",encapsulation:[],entryComponents:[],inputs:[],outputs:[],providers:[],selector:"it-button",styleUrls:["button.component.css"],styles:[],templateUrl:["./button.component.html"],viewProviders:[],inputsClass:[{name:"block",description:"<p>Indica se il pulsante occupa tutta l&#39;ampiezza a sua disposizione.</p>\n",line:42,type:"boolean"},{name:"color",description:"<p>Stabilisce il colore del pulsante a seconda delle classi di bootstrap.\nPu\xf2 avere valori:</p>\n<ul>\n<li> primary\n<li> secondary\n<li> danger\n<li> warning\n<li> info\n<li> success\n<li> light\n<li> dark\n</ul>",line:61,type:"any"},{name:"disabled",description:"<p>Se presente, il pulsante avr\xe0 un effetto di trasparenza e non reagir\xe0 al click</p>\n",line:24,type:"boolean"},{name:"outline",description:"<p>Stabilisce se lo stile del pulsante avr\xe0 un contorno.\nAccetta una espressione booleana o pu\xf2 essere usato come attributo senza valore.\nDeve funzionare solo in congiunzione con un colore definito, altrimenti l&#39;attributo viene ignorato.</p>\n",line:34,type:"boolean"},{name:"size",description:"<p>Indica la grandezza del pulsante. Pu\xf2 assumere i valori:</p>\n<ul>\n<li> lg\n<li> sm\n<li> xs\n</ul>",line:82,type:"any"}],outputsClass:[],propertiesClass:[{name:"_block",defaultValue:"false",type:"",optional:!1,description:"",line:44,modifierKind:[112]},{name:"_color",type:"",optional:!1,description:"",line:71,modifierKind:[112]},{name:"_disabled",defaultValue:"false",type:"",optional:!1,description:"",line:26,modifierKind:[112]},{name:"_outline",defaultValue:"false",type:"",optional:!1,description:"",line:36,modifierKind:[112]},{name:"_size",type:"",optional:!1,description:"",line:92,modifierKind:[112]},{name:"id",defaultValue:"`button-${identifier++}`",type:"",optional:!1,description:"",line:18}],methodsClass:[],hostBindings:[],hostListeners:[],description:"<p>Un bottone con design bootstrap italia. Supporta tutte le funzionalit\xe0 di un bottone HTML5.</p>\n",type:"component",sourceCode:"import { Component, Input } from '@angular/core';\nimport { ThemeColor } from '../models/ThemeColor';\nimport { ButtonSize } from '../models/ButtonSize';\nimport { Util } from '../util/util';\n\nlet identifier = 0;\n\n/**\n * Un bottone con design bootstrap italia. Supporta tutte le funzionalit\xe0 di un bottone HTML5.\n */\n@Component({\n  selector: 'it-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.css']\n})\nexport class ButtonComponent {\n\n  id = `button-${identifier++}`;\n\n  /**\n   * Se presente, il pulsante avr\xe0 un effetto di trasparenza e non reagir\xe0 al click\n   */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) { this._disabled = Util.coerceBooleanProperty(value); }\n  private _disabled = false;\n\n  /**\n   * Stabilisce se lo stile del pulsante avr\xe0 un contorno.\n   * Accetta una espressione booleana o pu\xf2 essere usato come attributo senza valore.\n   * Deve funzionare solo in congiunzione con un colore definito, altrimenti l'attributo viene ignorato.\n   */\n  @Input()\n  get outline(): boolean { return this._outline; }\n  set outline(value: boolean) { this._outline = Util.coerceBooleanProperty(value); }\n  private _outline = false;\n\n  /**\n   * Indica se il pulsante occupa tutta l'ampiezza a sua disposizione.\n   */\n  @Input()\n  get block(): boolean { return this._block; }\n  set block(value: boolean) { this._block = Util.coerceBooleanProperty(value); }\n  private _block = false;\n\n  /**\n   * Stabilisce il colore del pulsante a seconda delle classi di bootstrap.\n   * Pu\xf2 avere valori:\n   * <ul>\n   * <li> primary\n   * <li> secondary\n   * <li> danger\n   * <li> warning\n   * <li> info\n   * <li> success\n   * <li> light\n   * <li> dark\n   * </ul>\n   */\n  @Input()\n  get color(): any {\n    return this._color;\n  }\n  set color(value: any) {\n    if (ThemeColor.is(value)) {\n      this._color = value;\n    } else {\n      this._color = undefined;\n    }\n  }\n  private _color;\n\n  /**\n   * Indica la grandezza del pulsante. Pu\xf2 assumere i valori:\n   * <ul>\n   * <li> lg\n   * <li> sm\n   * <li> xs\n   * </ul>\n   */\n  @Input()\n  get size(): any {\n    return this._size;\n  }\n  set size(value: any) {\n    if (ButtonSize.is(value)) {\n      this._size = value;\n    } else {\n      this._size = undefined;\n    }\n  }\n  private _size;\n\n  get buttonClass() {\n    let cssClass = 'btn';\n\n    if (this.color) {\n      if (this.outline) {\n        cssClass += ` btn-outline-${this.color}`;\n      } else {\n        cssClass += ` btn-${this.color}`;\n      }\n    }\n\n    if (this.size) {\n      cssClass += ` btn-${this.size}`;\n    }\n\n    if (this.block) {\n      cssClass += ' btn-block';\n    }\n\n    if (this.disabled) {\n      cssClass += ' disabled';\n    }\n\n    return cssClass;\n  }\n\n}\n",accessors:{disabled:{name:"disabled",setSignature:{name:"disabled",type:"void",args:[{name:"value",type:"boolean"}],returnType:"void",line:25,jsdoctags:[{name:"value",type:"boolean",tagName:{text:"param"}}]}},outline:{name:"outline",setSignature:{name:"outline",type:"void",args:[{name:"value",type:"boolean"}],returnType:"void",line:35,jsdoctags:[{name:"value",type:"boolean",tagName:{text:"param"}}]}},block:{name:"block",setSignature:{name:"block",type:"void",args:[{name:"value",type:"boolean"}],returnType:"void",line:43,jsdoctags:[{name:"value",type:"boolean",tagName:{text:"param"}}]}},color:{name:"color",setSignature:{name:"color",type:"void",args:[{name:"value",type:"any"}],returnType:"void",line:64,jsdoctags:[{name:"value",type:"any",tagName:{text:"param"}}]}},size:{name:"size",setSignature:{name:"size",type:"void",args:[{name:"value",type:"any"}],returnType:"void",line:85,jsdoctags:[{name:"value",type:"any",tagName:{text:"param"}}]}},buttonClass:{name:"buttonClass",getSignature:{name:"buttonClass",type:"",returnType:"",line:94}}},templateData:'<button type="button" [id]="id" [class]="buttonClass" [disabled]="disabled" [attr.aria-disabled]="disabled">\n  <ng-content></ng-content>\n</button>\n'},{name:"CheckboxComponent",id:"component-CheckboxComponent-061d883b3f4d581a0a4d05a1d1a8bf78",file:"projects/design-angular-kit/src/lib/checkbox/checkbox.component.ts",changeDetection:"ChangeDetectionStrategy.OnPush",encapsulation:[],entryComponents:[],inputs:[],outputs:[],providers:[{name:"{ : , : (() => ), : true }"}],selector:"it-checkbox",styleUrls:["checkbox.component.css"],styles:[],templateUrl:["./checkbox.component.html"],viewProviders:[],inputsClass:[{name:"checked",description:"<p>Se la checkbox \xe8 selezionata.</p>\n",line:27,type:"boolean"},{name:"disabled",description:"<p>Se la checkbox \xe8 disabilitata.</p>\n",line:46,type:"boolean"},{name:"label",description:"<p>L&#39;etichetta della checkbox.</p>\n",line:40,type:"string"}],outputsClass:[{name:"change",defaultValue:"new EventEmitter<CheckboxChange>()",description:"<p>Evento emesso quando il valore <code>checked</code> della checkbox cambia.</p>\n",line:58,type:"EventEmitter<CheckboxChange>"}],propertiesClass:[{name:"_checked",defaultValue:"false",type:"",optional:!1,description:"",line:34,modifierKind:[112]},{name:"_controlValueAccessorChangeFn",defaultValue:"() => { }",type:"function",optional:!1,description:"",line:65,modifierKind:[112]},{name:"_disabled",defaultValue:"false",type:"",optional:!1,description:"",line:53,modifierKind:[112]},{name:"_onTouched",defaultValue:"() => {}",type:"function",optional:!1,description:"",line:63,modifierKind:[112]},{name:"inputId",defaultValue:"`checkbox-${identifier++}`",type:"",optional:!1,description:"",line:61}],methodsClass:[{name:"_emitChangeEvent",args:[],optional:!1,returnType:"void",typeParameters:[],line:95,modifierKind:[112]},{name:"_toggle",args:[],optional:!1,returnType:"void",typeParameters:[],line:91,modifierKind:[112]},{name:"handleChange",args:[{name:"event",type:"Event"}],optional:!1,returnType:"void",typeParameters:[],line:83,jsdoctags:[{name:"event",type:"Event",tagName:{text:"param"}}]},{name:"registerOnChange",args:[{name:"fn",type:"function",function:[{name:"value",type:"any"}]}],optional:!1,returnType:"void",typeParameters:[],line:75,jsdoctags:[{name:"fn",type:"function",function:[{name:"value",type:"any"}],tagName:{text:"param"}}]},{name:"registerOnTouched",args:[{name:"fn",type:"any"}],optional:!1,returnType:"void",typeParameters:[],line:79,jsdoctags:[{name:"fn",type:"any",tagName:{text:"param"}}]},{name:"writeValue",args:[{name:"value",type:"any"}],optional:!1,returnType:"void",typeParameters:[],line:71,jsdoctags:[{name:"value",type:"any",tagName:{text:"param"}}]}],hostBindings:[],hostListeners:[],description:"<p>Una checkbox con design bootstrap italia. Supporta tutte le funzionalit\xe0 di una checkbox HTML5,\ned espone una API simile. Una <code>&lt;it-checkbox&gt;</code> pu\xf2 essere checked, unchecked, o disabled.</p>\n",type:"component",sourceCode:"import { Component, Input, Output, EventEmitter, ChangeDetectorRef, forwardRef, ChangeDetectionStrategy } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nlet identifier = 0;\n\nexport class CheckboxChange {\n  source: CheckboxComponent;\n  checked: boolean;\n}\n\n/**\n * Una checkbox con design bootstrap italia. Supporta tutte le funzionalit\xe0 di una checkbox HTML5,\n * ed espone una API simile. Una `<it-checkbox>` pu\xf2 essere checked, unchecked, o disabled.\n */\n@Component({\n  selector: 'it-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.css'],\n  providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => CheckboxComponent), multi: true }],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CheckboxComponent implements ControlValueAccessor {\n  /**\n   * Se la checkbox \xe8 selezionata.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value !== this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked = false;\n\n  /**\n   * L'etichetta della checkbox.\n   */\n  @Input()\n  label: string;\n\n  /**\n   * Se la checkbox \xe8 disabilitata.\n   */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    if (value !== this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled = false;\n\n  /**\n   * Evento emesso quando il valore `checked` della checkbox cambia.\n   */\n  @Output() readonly change: EventEmitter<CheckboxChange> =\n    new EventEmitter<CheckboxChange>();\n\n    inputId = `checkbox-${identifier++}`;\n\n  private _onTouched: () => any = () => {};\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => { };\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef\n  ) { }\n\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  handleChange(event: Event) {\n    event.stopPropagation();\n    if (!this.disabled) {\n      this._toggle();\n      this._emitChangeEvent();\n    }\n  }\n\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  private _emitChangeEvent() {\n    const event = new CheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n}\n",constructorObj:{name:"constructor",description:"",args:[{name:"_changeDetectorRef",type:"ChangeDetectorRef"}],line:65,jsdoctags:[{name:"_changeDetectorRef",type:"ChangeDetectorRef",tagName:{text:"param"}}]},implements:["ControlValueAccessor"],accessors:{checked:{name:"checked",setSignature:{name:"checked",type:"void",args:[{name:"value",type:"boolean"}],returnType:"void",line:28,jsdoctags:[{name:"value",type:"boolean",tagName:{text:"param"}}]}},disabled:{name:"disabled",setSignature:{name:"disabled",type:"void",args:[{name:"value",type:"boolean"}],returnType:"void",line:47,jsdoctags:[{name:"value",type:"boolean",tagName:{text:"param"}}]}}},templateData:"<div class=form-check>\n  <input type=checkbox\n    [id]=inputId\n    [checked]=checked\n    [disabled]=disabled\n    (change)=handleChange($event)>\n  <label\n    [attr.for]=inputId>{{label}}</label>\n</div>\n"},{name:"ProgressBarComponent",id:"component-ProgressBarComponent-4b50cab345688be6ce20081228e12c40",file:"projects/design-angular-kit/src/lib/progress-bar/progress-bar.component.ts",changeDetection:"ChangeDetectionStrategy.OnPush",encapsulation:[],entryComponents:[],inputs:[],outputs:[],providers:[],selector:"it-progress-bar",styleUrls:["progress-bar.component.css"],styles:[],templateUrl:["./progress-bar.component.html"],viewProviders:[],inputsClass:[{name:"color",description:"<p>Il colore della barra di avanzamento.</p>\n",line:77,type:"any"},{name:"height",description:"<p>L&#39;altezza della barra di avanzamento.</p>\n",line:37,type:"number"},{name:"label",description:"<p>L&#39;etichetta della barra di avanzamento.</p>\n",line:69,type:"string"},{name:"max",description:"<p>Il valore massimo della barra di avanzamento.</p>\n",line:53,type:"number"},{name:"min",description:"<p>Il valore minimo della barra di avanzamento.</p>\n",line:45,type:"number"},{name:"value",description:"<p>L&#39;attuale valore della barra di avanzamento.</p>\n",line:61,type:"number"}],outputsClass:[],propertiesClass:[{name:"_color",defaultValue:"THEME_COLORS.PRIMARY",type:"",optional:!1,description:"",line:87,modifierKind:[112]},{name:"_height",defaultValue:"ProgressBarComponent.PROGRESS_BAR_DEFAULT_HEIGHT",type:"",optional:!1,description:"",line:39,modifierKind:[112]},{name:"_label",defaultValue:"ProgressBarComponent.PROGRESS_BAR_DEFAULT_LABEL",type:"",optional:!1,description:"",line:71,modifierKind:[112]},{name:"_max",defaultValue:"ProgressBarComponent.PROGRESS_BAR_DEFAULT_MAX",type:"",optional:!1,description:"",line:55,modifierKind:[112]},{name:"_min",defaultValue:"ProgressBarComponent.PROGRESS_BAR_DEFAULT_MIN",type:"",optional:!1,description:"",line:47,modifierKind:[112]},{name:"_value",defaultValue:"ProgressBarComponent.PROGRESS_BAR_DEFAULT_VALUE",type:"",optional:!1,description:"",line:63,modifierKind:[112]},{name:"PROGRESS_BAR_DEFAULT_HEIGHT",defaultValue:"20",type:"number",optional:!1,description:"",line:28,modifierKind:[115,132]},{name:"PROGRESS_BAR_DEFAULT_LABEL",defaultValue:"''",type:"string",optional:!1,description:"",line:29,modifierKind:[115,132]},{name:"PROGRESS_BAR_DEFAULT_MAX",defaultValue:"100",type:"number",optional:!1,description:"",line:26,modifierKind:[115,132]},{name:"PROGRESS_BAR_DEFAULT_MIN",defaultValue:"0",type:"number",optional:!1,description:"",line:25,modifierKind:[115,132]},{name:"PROGRESS_BAR_DEFAULT_VALUE",defaultValue:"0",type:"number",optional:!1,description:"",line:27,modifierKind:[115,132]},{name:"progressbarId",defaultValue:"`it-progress-bar-${progressbarId++}`",type:"",optional:!1,description:"",line:31}],methodsClass:[{name:"pgClass",args:[],optional:!1,returnType:"{ 'progress-bar': boolean; }",typeParameters:[],line:97},{name:"pgStyle",args:[],optional:!1,returnType:"{ 'width': string; }",typeParameters:[],line:93},{name:"valuePercentage",args:[],optional:!1,returnType:"number",typeParameters:[],line:89}],hostBindings:[],hostListeners:[],description:"<p>Una barra di avanzamento con design bootstrap italia.</p>\n",type:"component",sourceCode:"import {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ThemeColor, THEME_COLORS } from '../models/ThemeColor';\n\nlet progressbarId = 0;\n\n/**\n * Una barra di avanzamento con design bootstrap italia.\n */\n@Component({\n  selector: 'it-progress-bar',\n  templateUrl: './progress-bar.component.html',\n  styleUrls: ['./progress-bar.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ProgressBarComponent {\n\n  public static readonly PROGRESS_BAR_DEFAULT_MIN = 0;\n  public static readonly PROGRESS_BAR_DEFAULT_MAX = 100;\n  public static readonly PROGRESS_BAR_DEFAULT_VALUE = 0;\n  public static readonly PROGRESS_BAR_DEFAULT_HEIGHT = 20;\n  public static readonly PROGRESS_BAR_DEFAULT_LABEL = '';\n\n  progressbarId = `it-progress-bar-${progressbarId++}`;\n\n  /**\n   * L'altezza della barra di avanzamento.\n   */\n  @Input()\n  get height(): number { return this._height; }\n  set height(v: number) { this._height = v; }\n  private _height = ProgressBarComponent.PROGRESS_BAR_DEFAULT_HEIGHT;\n\n  /**\n   * Il valore minimo della barra di avanzamento.\n   */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) { this._min = Math.round(v); }\n  private _min = ProgressBarComponent.PROGRESS_BAR_DEFAULT_MIN;\n\n  /**\n   * Il valore massimo della barra di avanzamento.\n   */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) { this._max = Math.round(v); }\n  private _max = ProgressBarComponent.PROGRESS_BAR_DEFAULT_MAX;\n\n  /**\n   * L'attuale valore della barra di avanzamento.\n   */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = Math.min(Math.max(v, this._min), this._max); }\n  private _value = ProgressBarComponent.PROGRESS_BAR_DEFAULT_VALUE;\n\n  /**\n   * L'etichetta della barra di avanzamento.\n   */\n  @Input()\n  get label(): string { return this._label; }\n  set label(v: string) { this._label = v; }\n  private _label = ProgressBarComponent.PROGRESS_BAR_DEFAULT_LABEL;\n\n  /**\n   * Il colore della barra di avanzamento.\n   */\n  @Input()\n  get color(): any {\n    return this._color;\n  }\n  set color(value: any) {\n    if (ThemeColor.is(value)) {\n      this._color = value;\n    } else {\n      this._color = THEME_COLORS.PRIMARY;\n    }\n  }\n  private _color = THEME_COLORS.PRIMARY;\n\n  valuePercentage(): number {\n    return ((this.value - this.min) * 100) / (this.max - this.min);\n  }\n\n  pgStyle() {\n    return { 'width' : this.valuePercentage() + '%' };\n  }\n\n  pgClass() {\n    const progressbarClass = { 'progress-bar' : true };\n    if (this.color) {\n      progressbarClass[`bg-${this.color}`] = true;\n    }\n    return progressbarClass;\n  }\n\n  constructor() { }\n\n}\n",constructorObj:{name:"constructor",description:"",args:[],line:103},accessors:{height:{name:"height",setSignature:{name:"height",type:"void",args:[{name:"v",type:"number"}],returnType:"void",line:38,jsdoctags:[{name:"v",type:"number",tagName:{text:"param"}}]}},min:{name:"min",setSignature:{name:"min",type:"void",args:[{name:"v",type:"number"}],returnType:"void",line:46,jsdoctags:[{name:"v",type:"number",tagName:{text:"param"}}]}},max:{name:"max",setSignature:{name:"max",type:"void",args:[{name:"v",type:"number"}],returnType:"void",line:54,jsdoctags:[{name:"v",type:"number",tagName:{text:"param"}}]}},value:{name:"value",setSignature:{name:"value",type:"void",args:[{name:"v",type:"number"}],returnType:"void",line:62,jsdoctags:[{name:"v",type:"number",tagName:{text:"param"}}]}},label:{name:"label",setSignature:{name:"label",type:"void",args:[{name:"v",type:"string"}],returnType:"void",line:70,jsdoctags:[{name:"v",type:"string",tagName:{text:"param"}}]}},color:{name:"color",setSignature:{name:"color",type:"void",args:[{name:"value",type:"any"}],returnType:"void",line:80,jsdoctags:[{name:"value",type:"any",tagName:{text:"param"}}]}}},templateData:'<div class="progress" [ngStyle]="{\'height\': height + \'px\'}">\n  <div role="progressbar" [id]="progressbarId" [ngClass]="pgClass()" [ngStyle]="pgStyle()"\n    [attr.aria-valuenow]="value" [attr.aria-valuemin]="min" [attr.aria-valuemax]="max" >\n    {{label}}\n  </div>\n</div>'},{name:"RadioButtonComponent",id:"component-RadioButtonComponent-f64fd0c7b01c8d4779c6a1f6316e64e0",file:"projects/design-angular-kit/src/lib/radio/radio.component.ts",changeDetection:"ChangeDetectionStrategy.OnPush",encapsulation:[],entryComponents:[],exportAs:"itRadioButton",inputs:[],outputs:[],providers:[],selector:"it-radio-button",styleUrls:["radio.component.scss"],styles:[],templateUrl:["./radio.component.html"],viewProviders:[],inputsClass:[{name:"checked",description:"<p>se il radio button \xe8 checked. </p>\n",line:215,type:"boolean"},{name:"disabled",description:"<p>Se il radio button \xe8 disabled. </p>\n",line:253,type:"boolean"},{name:"label",description:"<p>L&#39;etichetta delradio button. </p>\n",line:211,type:"string"},{name:"name",description:"<p>Attributo &#39;name&#39; usato per raggruppare i radio button per un&#39;unica selezione. </p>\n",line:207,type:"string"},{name:"value",description:"<p>Il valore di questo radio button. </p>\n",line:236,type:"any"}],outputsClass:[{name:"change",defaultValue:"new EventEmitter<RadioChange>()",description:"<p>Evento emesso quando il valore <code>checked</code> del radio button cambia.</p>\n",line:267,type:"EventEmitter<RadioChange>"}],propertiesClass:[{name:"_checked",defaultValue:"false",type:"",optional:!1,description:"<p>Se il radio button \xe8 checked. </p>\n",line:273,modifierKind:[112]},{name:"_disabled",type:"boolean",optional:!1,description:"<p>Se il radio button \xe8 disabled. </p>\n",line:276,modifierKind:[112]},{name:"_removeUniqueSelectionListener",defaultValue:"() => { }",type:"function",optional:!1,description:"",line:281,modifierKind:[112]},{name:"_value",defaultValue:"null",type:"any",optional:!1,description:"<p>il valore assegnato al radio button. </p>\n",line:279,modifierKind:[112]},{name:"id",defaultValue:"`radio-${identifier++}`",type:"",optional:!1,description:"",line:204},{name:"radioGroup",type:"RadioGroupDirective",optional:!1,description:"<p>Il radio group padre. Pu\xf2 essere presente o meno. </p>\n",line:270}],methodsClass:[{name:"_emitChangeEvent",args:[],optional:!1,returnType:"void",typeParameters:[],line:318,modifierKind:[112]},{name:"_markForCheck",args:[],optional:!1,returnType:"void",typeParameters:[],line:301,description:"<p>Segna il radio button come da controllare per la change detection.</p>\n"},{name:"_onInputChange",args:[{name:"event",type:"Event"}],optional:!1,returnType:"void",typeParameters:[],line:322,jsdoctags:[{name:"event",type:"Event",tagName:{text:"param"}}]},{name:"ngOnDestroy",args:[],optional:!1,returnType:"void",typeParameters:[],line:314},{name:"ngOnInit",args:[],optional:!1,returnType:"void",typeParameters:[],line:305}],hostBindings:[],hostListeners:[],description:"<p>Un radio button con design bootstrap italia. Supporta tutte le funzionalit\xe0 di una radio HTML5,\ned espone una API simile. Una <code>&lt;it-radio-button&gt;</code> pu\xf2 essere checked, unchecked, o disabled.</p>\n",type:"component",sourceCode:"import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  forwardRef,\n  ChangeDetectionStrategy,\n  AfterContentInit,\n  Directive,\n  ContentChildren,\n  QueryList,\n  OnInit,\n  OnDestroy,\n  Optional,\n  HostBinding\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { UniqueSelectionDispatcher } from './unique-selection-dispatcher';\n\nlet identifier = 0;\n\nfunction _coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n\nexport class RadioChange {\n  constructor(\n    public source: RadioButtonComponent,\n    public value: any\n  ) { }\n}\n\n@Directive({\n  selector: 'it-radio-group', // tslint:disable-line\n  exportAs: 'itRadioGroup',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioGroupDirective),\n    multi: true\n  }]\n})\nexport class RadioGroupDirective implements AfterContentInit, ControlValueAccessor {\n\n  @HostBinding('attr.role') role = 'radiogroup';\n\n  /**\n   * Il valore selezionato per il gruppo. Dovrebbe essere uguale al valore del radio button selezionato se\n   * *esiste* un radio button con un valore corrispondente. Se *non esiste* un radio button corrispondente\n   * questo valore persiste ed \xe8 applicato nel caso in cui un nuovo radio button viene aggiunto con il valore\n   * corrispondente.\n   */\n  private _value: any = null;\n\n  /** L'attributo HTML name da applicare ai radio button in questo gruppo */\n  private _name = `it-radio-group-${identifier++}`;\n\n  /** Il radio button attualmente selezionato. */\n  private _selected: RadioButtonComponent | null = null;\n\n  /** se `value` \xe8 stato settato al suo valore iniziale. */\n  private _isInitialized = false;\n\n  /** Se il radio group \xe8 disabilitato. */\n  private _disabled = false;\n\n\n\n  /**\n   * Evento emesso quando il valore del gruppo cambia.\n   * Gli eventi di change sono emessi soltanto quando il valore cambia a causa dell'interazione dell'utente\n   * con il radio button (stesso comportamento di `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<RadioChange> = new EventEmitter<RadioChange>();\n\n  /** radio buttons figli. */\n  @ContentChildren(forwardRef(() => RadioButtonComponent), { descendants: true }) _radios: QueryList<RadioButtonComponent>; // tslint:disable-line\n\n  /** Il metodo da chiamare per aggiornare ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => { };\n\n  onTouched: () => any = () => { };\n\n  /** Nome del gruppo di radio button. Tutti i radio button all'interno del gruppo avranno questo nome. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Valore del radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Il radio button selezionato. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: RadioButtonComponent | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Se il gruppo \xe8 disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = _coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef\n  ) { }\n\n  /**\n   * Inizializza le propriet\xe0 quando il contenuto dei figli\xe8 disponibile.\n   * Questo permette di propagare gli attributi rilevanti ai radio buttons associati.\n   */\n  ngAfterContentInit(): void {\n    this._isInitialized = true;\n  }\n\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Aggiorna il radio button `selected` a seconda del suo _value. */\n  private _updateSelectedRadioFromValue(): void {\n    this._selected = null;\n    this._radios.forEach(radio => {\n      radio.checked = this.value === radio.value;\n      if (radio.checked) {\n        this._selected = radio;\n      }\n    });\n  }\n\n  /** Invia l'evento change con la selezione corrente e il valore del gruppo. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new RadioChange(this._selected, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  writeValue(value: any): void {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  registerOnChange(fn: (value: any) => void): void {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n}\n\n/**\n * Un radio button con design bootstrap italia. Supporta tutte le funzionalit\xe0 di una radio HTML5,\n * ed espone una API simile. Una `<it-radio-button>` pu\xf2 essere checked, unchecked, o disabled.\n */\n@Component({\n  selector: 'it-radio-button',\n  templateUrl: './radio.component.html',\n  styleUrls: ['./radio.component.scss'],\n  exportAs: 'itRadioButton',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RadioButtonComponent implements OnInit, OnDestroy {\n\n  id = `radio-${identifier++}`;\n\n  /** Attributo 'name' usato per raggruppare i radio button per un'unica selezione. */\n  @Input() name: string;\n\n  /** L'etichetta delradio button. */\n  @Input()\n  label: string;\n\n  /** se il radio button \xe8 checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = _coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Il valore di questo radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Se il radio button \xe8 disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = !!value;\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /**\n   * Evento emesso quando il valore `checked` del radio button cambia.\n   */\n  @Output() readonly change: EventEmitter<RadioChange> = new EventEmitter<RadioChange>();\n\n  /** Il radio group padre. Pu\xf2 essere presente o meno. */\n  radioGroup: RadioGroupDirective;\n\n  /** Se il radio button \xe8 checked. */\n  private _checked = false;\n\n  /** Se il radio button \xe8 disabled. */\n  private _disabled: boolean;\n\n  /** il valore assegnato al radio button. */\n  private _value: any = null;\n\n  private _removeUniqueSelectionListener: () => void = () => { };\n\n  constructor(\n    @Optional() radioGroup: RadioGroupDirective,\n    private _changeDetector: ChangeDetectorRef,\n    private _radioDispatcher: UniqueSelectionDispatcher\n  ) {\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /**\n   * Segna il radio button come da controllare per la change detection.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit(): void {\n    if (this.radioGroup) {\n      // Se il radio button \xe8 all'interno di un gruppo, determina se deve essere selezionato\n      this.checked = this.radioGroup.value === this._value;\n      // Copia il `name` del radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngOnDestroy() {\n    this._removeUniqueSelectionListener();\n  }\n\n  private _emitChangeEvent(): void {\n    this.change.emit(new RadioChange(this, this._value));\n  }\n\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n}\n",constructorObj:{name:"constructor",description:"",args:[{name:"radioGroup",type:"RadioGroupDirective"},{name:"_changeDetector",type:"ChangeDetectorRef"},{name:"_radioDispatcher",type:"UniqueSelectionDispatcher"}],line:281,jsdoctags:[{name:"radioGroup",type:"RadioGroupDirective",tagName:{text:"param"}},{name:"_changeDetector",type:"ChangeDetectorRef",tagName:{text:"param"}},{name:"_radioDispatcher",type:"UniqueSelectionDispatcher",tagName:{text:"param"}}]},implements:["OnInit","OnDestroy"],accessors:{checked:{name:"checked",setSignature:{name:"checked",type:"void",args:[{name:"value",type:"boolean"}],returnType:"void",line:216,jsdoctags:[{name:"value",type:"boolean",tagName:{text:"param"}}]}},value:{name:"value",setSignature:{name:"value",type:"void",args:[{name:"value",type:"any"}],returnType:"void",line:237,jsdoctags:[{name:"value",type:"any",tagName:{text:"param"}}]}},disabled:{name:"disabled",setSignature:{name:"disabled",type:"void",args:[{name:"value",type:"boolean"}],returnType:"void",line:256,jsdoctags:[{name:"value",type:"boolean",tagName:{text:"param"}}]}}},templateData:'<div class="form-check">\n  <input type="radio"\n    [id]="id"\n    [checked]="checked"\n    [disabled]="disabled"\n    [attr.name]="name"\n    (change)="_onInputChange($event)">\n  <label\n    [attr.for]="id">{{label}}</label>\n</div>\n'},{name:"ToggleComponent",id:"component-ToggleComponent-96bbfccd611f40d2afe13f6321b42ce3",file:"projects/design-angular-kit/src/lib/toggle/toggle.component.ts",changeDetection:"ChangeDetectionStrategy.OnPush",encapsulation:[],entryComponents:[],inputs:[],outputs:[],providers:[{name:"{ : , : (() => ), : true }"}],selector:"it-toggle",styleUrls:["toggle.component.css"],styles:[],templateUrl:["./toggle.component.html"],viewProviders:[],inputsClass:[{name:"checked",description:"<p>Se la toggle \xe8 selezionata.</p>\n",line:27,type:"boolean"},{name:"disabled",description:"<p>Se la toggle \xe8 disabilitata.</p>\n",line:46,type:"boolean"},{name:"label",description:"<p>L&#39;etichetta della toggle.</p>\n",line:40,type:"string"}],outputsClass:[{name:"change",defaultValue:"new EventEmitter<ToggleChange>()",description:"<p>Evento emesso quando il valore <code>checked</code> della toggle cambia.</p>\n",line:58,type:"EventEmitter<ToggleChange>"}],propertiesClass:[{name:"_checked",defaultValue:"false",type:"",optional:!1,description:"",line:34,modifierKind:[112]},{name:"_controlValueAccessorChangeFn",defaultValue:"() => { }",type:"function",optional:!1,description:"",line:65,modifierKind:[112]},{name:"_disabled",defaultValue:"false",type:"",optional:!1,description:"",line:53,modifierKind:[112]},{name:"_onTouched",defaultValue:"() => {}",type:"function",optional:!1,description:"",line:63,modifierKind:[112]},{name:"inputId",defaultValue:"`toggle-${identifier++}`",type:"",optional:!1,description:"",line:61}],methodsClass:[{name:"_emitChangeEvent",args:[],optional:!1,returnType:"void",typeParameters:[],line:95,modifierKind:[112]},{name:"_toggle",args:[],optional:!1,returnType:"void",typeParameters:[],line:91,modifierKind:[112]},{name:"handleChange",args:[{name:"event",type:"Event"}],optional:!1,returnType:"void",typeParameters:[],line:83,jsdoctags:[{name:"event",type:"Event",tagName:{text:"param"}}]},{name:"registerOnChange",args:[{name:"fn",type:"function",function:[{name:"value",type:"any"}]}],optional:!1,returnType:"void",typeParameters:[],line:75,jsdoctags:[{name:"fn",type:"function",function:[{name:"value",type:"any"}],tagName:{text:"param"}}]},{name:"registerOnTouched",args:[{name:"fn",type:"any"}],optional:!1,returnType:"void",typeParameters:[],line:79,jsdoctags:[{name:"fn",type:"any",tagName:{text:"param"}}]},{name:"writeValue",args:[{name:"value",type:"any"}],optional:!1,returnType:"void",typeParameters:[],line:71,jsdoctags:[{name:"value",type:"any",tagName:{text:"param"}}]}],hostBindings:[],hostListeners:[],description:"<p>Una toggle con design bootstrap italia. Supporta tutte le funzionalit\xe0 di una checkbox HTML5,\ned espone una API simile. Una <code>&lt;it-toggle&gt;</code> pu\xf2 essere checked, unchecked, o disabled.</p>\n",type:"component",sourceCode:"import { Component, Input, Output, EventEmitter, ChangeDetectorRef, forwardRef, ChangeDetectionStrategy } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nlet identifier = 0;\n\nexport class ToggleChange {\n  source: ToggleComponent;\n  checked: boolean;\n}\n\n/**\n * Una toggle con design bootstrap italia. Supporta tutte le funzionalit\xe0 di una checkbox HTML5,\n * ed espone una API simile. Una `<it-toggle>` pu\xf2 essere checked, unchecked, o disabled.\n */\n@Component({\n  selector: 'it-toggle',\n  templateUrl: './toggle.component.html',\n  styleUrls: ['./toggle.component.css'],\n  providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ToggleComponent), multi: true }],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ToggleComponent implements ControlValueAccessor {\n  /**\n   * Se la toggle \xe8 selezionata.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value !== this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked = false;\n\n  /**\n   * L'etichetta della toggle.\n   */\n  @Input()\n  label: string;\n\n  /**\n   * Se la toggle \xe8 disabilitata.\n   */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    if (value !== this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled = false;\n\n  /**\n   * Evento emesso quando il valore `checked` della toggle cambia.\n   */\n  @Output() readonly change: EventEmitter<ToggleChange> =\n    new EventEmitter<ToggleChange>();\n\n    inputId = `toggle-${identifier++}`;\n\n  private _onTouched: () => any = () => {};\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => { };\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef\n  ) { }\n\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  handleChange(event: Event) {\n    event.stopPropagation();\n    if (!this.disabled) {\n      this._toggle();\n      this._emitChangeEvent();\n    }\n  }\n\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  private _emitChangeEvent() {\n    const event = new ToggleChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n}\n",constructorObj:{name:"constructor",description:"",args:[{name:"_changeDetectorRef",type:"ChangeDetectorRef"}],line:65,jsdoctags:[{name:"_changeDetectorRef",type:"ChangeDetectorRef",tagName:{text:"param"}}]},implements:["ControlValueAccessor"],accessors:{checked:{name:"checked",setSignature:{name:"checked",type:"void",args:[{name:"value",type:"boolean"}],returnType:"void",line:28,jsdoctags:[{name:"value",type:"boolean",tagName:{text:"param"}}]}},disabled:{name:"disabled",setSignature:{name:"disabled",type:"void",args:[{name:"value",type:"boolean"}],returnType:"void",line:47,jsdoctags:[{name:"value",type:"boolean",tagName:{text:"param"}}]}}},templateData:'<div class="form-check">\n  <div class="toggles">\n    <label [attr.for]=inputId>\n      {{label}}\n      <input type=checkbox\n        [id]=inputId\n        [checked]=checked\n        [disabled]=disabled\n        (change)=handleChange($event)>\n      <span class="lever"></span>\n    </label>\n  </div>\n</div>'}]}},xh2N:function(e,n,t){"use strict";var a=t("CcnG"),i=t("OQP5"),o=t("Ip0R");t("HiJM"),t.d(n,"a",function(){return l}),t.d(n,"b",function(){return h});var l=a.La({encapsulation:0,styles:[[""]],data:{}});function r(e){return a.eb(0,[(e()(),a.Na(0,0,null,null,2,"li",[["class","nav-item"]],null,null,null,null,null)),(e()(),a.Na(1,0,null,null,1,"a",[["aria-selected","true"],["class","nav-link active"],["data-toggle","tab"],["role","tab"]],[[8,"href",4],[1,"aria-controls",0]],null,null,null,null)),(e()(),a.db(-1,null,["HTML"]))],null,function(e,n){var t=n.component;e(n,1,0,a.Pa(1,"#",t.idTabHtml,""),t.idTabHtml)})}function s(e){return a.eb(0,[(e()(),a.Na(0,0,null,null,2,"li",[["class","nav-item"]],null,null,null,null,null)),(e()(),a.Na(1,0,null,null,1,"a",[["aria-selected","false"],["class","nav-link"],["data-toggle","tab"],["role","tab"]],[[8,"href",4],[1,"aria-controls",0]],null,null,null,null)),(e()(),a.db(-1,null,["TS"]))],null,function(e,n){var t=n.component;e(n,1,0,a.Pa(1,"#",t.idTypescript,""),t.idTypescript)})}function d(e){return a.eb(0,[(e()(),a.Na(0,0,null,null,2,"li",[["class","nav-item"]],null,null,null,null,null)),(e()(),a.Na(1,0,null,null,1,"a",[["aria-selected","false"],["class","nav-link"],["data-toggle","tab"],["role","tab"]],[[8,"href",4],[1,"aria-controls",0]],null,null,null,null)),(e()(),a.db(-1,null,["CSS"]))],null,function(e,n){var t=n.component;e(n,1,0,a.Pa(1,"#",t.idTabCss,""),t.idTabCss)})}function u(e){return a.eb(0,[(e()(),a.Na(0,0,null,null,4,"div",[["aria-labelledby","html-tab"],["class","tab-pane p-3 fade show active"],["role","tabpanel"]],[[8,"id",0]],null,null,null,null)),(e()(),a.Na(1,0,null,null,3,"pre",[],null,null,null,null,null)),(e()(),a.Na(2,0,null,null,2,"code",[["highlight",""]],[[8,"textContent",0]],null,null,null,null)),a.Ma(3,212992,null,0,i.a,[a.k,a.B,i.b],{highlight:[0,"highlight"],language:[1,"language"]},null),a.Ya(4,1)],function(e,n){e(n,3,0,"",e(n,4,0,"html"))},function(e,n){var t=n.component;e(n,0,0,t.idTabHtml),e(n,2,0,t.html)})}function c(e){return a.eb(0,[(e()(),a.Na(0,0,null,null,4,"div",[["aria-labelledby","typescript-tab"],["class","tab-pane p-3 fade"],["role","tabpanel"]],[[8,"id",0]],null,null,null,null)),(e()(),a.Na(1,0,null,null,3,"pre",[],null,null,null,null,null)),(e()(),a.Na(2,0,null,null,2,"code",[["highlight",""]],[[8,"textContent",0]],null,null,null,null)),a.Ma(3,212992,null,0,i.a,[a.k,a.B,i.b],{highlight:[0,"highlight"],language:[1,"language"]},null),a.Ya(4,1)],function(e,n){e(n,3,0,"",e(n,4,0,"typescript"))},function(e,n){var t=n.component;e(n,0,0,t.idTypescript),e(n,2,0,t.typescript)})}function p(e){return a.eb(0,[(e()(),a.Na(0,0,null,null,4,"div",[["aria-labelledby","css-tab"],["class","tab-pane p-3 fade"],["role","tabpanel"]],[[8,"id",0]],null,null,null,null)),(e()(),a.Na(1,0,null,null,3,"pre",[],null,null,null,null,null)),(e()(),a.Na(2,0,null,null,2,"code",[["highlight",""]],[[8,"textContent",0]],null,null,null,null)),a.Ma(3,212992,null,0,i.a,[a.k,a.B,i.b],{highlight:[0,"highlight"],language:[1,"language"]},null),a.Ya(4,1)],function(e,n){e(n,3,0,"",e(n,4,0,"scss"))},function(e,n){var t=n.component;e(n,0,0,t.idTabCss),e(n,2,0,t.css)})}function h(e){return a.eb(0,[(e()(),a.Na(0,0,null,null,6,"ul",[["class","nav nav-tabs"],["role","tablist"]],[[8,"id",0]],null,null,null,null)),(e()(),a.Ea(16777216,null,null,1,null,r)),a.Ma(2,16384,null,0,o.j,[a.M,a.J],{ngIf:[0,"ngIf"]},null),(e()(),a.Ea(16777216,null,null,1,null,s)),a.Ma(4,16384,null,0,o.j,[a.M,a.J],{ngIf:[0,"ngIf"]},null),(e()(),a.Ea(16777216,null,null,1,null,d)),a.Ma(6,16384,null,0,o.j,[a.M,a.J],{ngIf:[0,"ngIf"]},null),(e()(),a.Na(7,0,null,null,6,"div",[["class","tab-content"]],[[8,"id",0]],null,null,null,null)),(e()(),a.Ea(16777216,null,null,1,null,u)),a.Ma(9,16384,null,0,o.j,[a.M,a.J],{ngIf:[0,"ngIf"]},null),(e()(),a.Ea(16777216,null,null,1,null,c)),a.Ma(11,16384,null,0,o.j,[a.M,a.J],{ngIf:[0,"ngIf"]},null),(e()(),a.Ea(16777216,null,null,1,null,p)),a.Ma(13,16384,null,0,o.j,[a.M,a.J],{ngIf:[0,"ngIf"]},null)],function(e,n){var t=n.component;e(n,2,0,t.html),e(n,4,0,t.typescript),e(n,6,0,t.css),e(n,9,0,t.html),e(n,11,0,t.typescript),e(n,13,0,t.css)},function(e,n){var t=n.component;e(n,0,0,t.idTab),e(n,7,0,t.idTabContent)})}}}]);
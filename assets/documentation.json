{
    "pipes": [
        {
            "name": "MarkMatchingTextPipe",
            "id": "pipe-MarkMatchingTextPipe-afbb70d0b7f93456c99e1e85ceeb85bb8665b2429229db0c1eb40774066887b41f3c08da90397b23e752c063a1ef971dac1a405d95c4272e247ea9474f9067c7",
            "file": "projects/design-angular-kit/src/lib/form-input/mark-matching-text.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "allString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "searchString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "allString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "searchString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "markMatchingText",
            "sourceCode": "import { Pipe, PipeTransform } from \"@angular/core\";\nimport { DomSanitizer } from \"@angular/platform-browser\";\n\n@Pipe({\n    name: 'markMatchingText'\n}) \nexport class MarkMatchingTextPipe implements PipeTransform {\n    constructor(private domSanitizer: DomSanitizer) {}\n\n    transform(allString: string, searchString: string): any {\n        if (!searchString) { \n            return allString; \n        } else if(!allString) {\n            return \"\";\n        }\n        // Check if search string is a substring of pivot string (no case-sensitive)\n        const idxOfMatchString = allString.toLowerCase().indexOf(searchString.toLowerCase());\n        if(idxOfMatchString !== -1) {\n            // retrieve the exactly substring\n            const matchingString = allString.substring(idxOfMatchString, idxOfMatchString + searchString.length);\n            // Replace original string marking as <strong> (bold) the matchinng substring\n            const regEx = new RegExp('(' + matchingString + ')', 'gi')\n            const res = allString.replace(regEx, '<mark>$1</mark>');\n            return this.domSanitizer.bypassSecurityTrustHtml(res);\n        } \n\n        return allString;\n        \n    }\n\n    \n}"
        }
    ],
    "interfaces": [
        {
            "name": "AutoCompleteItem",
            "id": "interface-AutoCompleteItem-345511f33d2b07621a8d756c4d4db99314b334b0858223f836bc2d0c01315f2b3562a61bf970411188879a57606b55cf51c04f6c8d7ff0b472dde522e0cfdd8d",
            "file": "projects/design-angular-kit/src/lib/form-input/form-input.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Component, Input, ChangeDetectionStrategy, forwardRef,\n  AfterContentInit, Output, EventEmitter, ChangeDetectorRef, ViewChild, ElementRef, ContentChildren, QueryList, AfterContentChecked, OnInit, HostListener\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { merge } from 'rxjs';\nimport { InputType, INPUT_TYPES } from '../models/InputType';\nimport { Util } from '../util/util';\nimport { FormInputPasswordUtils } from './form-input-password.utils';\nimport { ItPrefixDirective } from './it-prefix.directive';\nimport { ItSuffixDirective } from './it-suffix.directive';\nimport { ItTextPrefixDirective } from './it-text-prefix.directive';\nimport { ItTextSuffixDirective } from './it-text-suffix.directive';\n\nlet identifier = 0;\n\nexport class FormInputChange {\n  constructor(\n    public source: FormInputComponent,\n    public value: any\n  ) { }\n}\n\nexport interface PasswordStrengthMeterConfig {\n  /** Testo per il punteggio di forza della password minimo */\n  shortPass: string,\n  /** Testo per punteggio di forza della password basso\t */\n  badPass: string,\n  /** Testo per punteggio di forza della password buono\t */\n  goodPass: string,\n  /** Testo per il punteggio di forza della password massimo\t */\n  strongPass: string,\n  /** Testo di aiuto */\n  enterPass: string,\n  /** Testo per avvertire che il CAPS LOCK è inserito\t */\n  alertCaps: string,\n  /** Lunghezza minima per il calcolo della forza della password (soglia password molto debole)\t */\n  showText: boolean,\n  /** Attiva/disattiva la visibilità dei messaggi di errore\t */\n  minimumLength: number,\n}\n\n\n/**\n * Elemento disponibile per l'autocompletamento del it-form-input\n */\nexport interface AutoCompleteItem {\n  /** Valore voce di autocompletamento */\n  value: string;\n  /** Opzionale. Path in cui ricercare l'immagine dell'avatar da posizionare a sinistra della voce di autocompletamento */\n  avatarSrcPath?: string;\n  /** Opzionale. Testo in alternativa dell'avatar per accessibilità */\n  avatarAltText?: string;\n  /** Opzionale. Icona posizionata a sinistra della voce di autocompletamento */\n  icon?: string;\n  /** Opzionale. Label posizionata a destra della voce di autocompletamento */\n  label?: string;\n  /** Opzionale. Link relativo all'elemento */\n  link?: string\n}\n\n/**\n * Elementi e stili per la creazione di input accessibili e responsivi.\n */\n@Component({\n  selector: 'it-input',\n  templateUrl: './form-input.component.html',\n  styleUrls: ['./form-input.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => FormInputComponent),\n    multi: true\n  }]\n})\nexport class FormInputComponent implements OnInit, AfterContentInit, ControlValueAccessor {\n\n  private _formInputPasswordUtils: FormInputPasswordUtils;\n\n  @ContentChildren(ItPrefixDirective, {descendants: true}) _prefixChildren: QueryList<ItPrefixDirective>;\n  @ContentChildren(ItTextPrefixDirective, {descendants: true}) _textPrefixChildren: QueryList<ItTextPrefixDirective>;\n\n  @ContentChildren(ItSuffixDirective, {descendants: true}) _suffixChildren: QueryList<ItSuffixDirective>;\n  @ContentChildren(ItTextSuffixDirective, {descendants: true}) _textSuffixChildren: QueryList<ItTextSuffixDirective>;\n\n  INPUT_TYPES = INPUT_TYPES;\n\n  @ViewChild('inputElement', { static: false })\n  private _inputElement: ElementRef;\n\n  /**\n   * Opzionale. Indica se mostrare gli input readonly nella forma stilizzata come testo normale\n   */\n  @Input()\n  get readonlyPlainText(): boolean { return this._readonlyPlainText; }\n  set readonlyPlainText(value: boolean) { this._readonlyPlainText = Util.coerceBooleanProperty(value); }\n  private _readonlyPlainText: boolean = false;\n\n\n  /**\n   * Opzionale. Indica se abilitare il controllo sulla sicurezza della password\n   */\n  @Input()\n  get enablePasswordStrengthMeter(): boolean { return this._enablePasswordStrengthMeter; }\n  set enablePasswordStrengthMeter(value: boolean) { this._enablePasswordStrengthMeter = Util.coerceBooleanProperty(value); }\n  private _enablePasswordStrengthMeter: boolean = false;\n\n  /**\n   * Punteggio di sicurezza calcolato in base alla password immessa se enablePasswordStrengthMeter ha valore true\n   */\n  passwordScore: number = 0;\n\n  /**\n   * Dimensione dell'input di autocomplete. Di default ha dimensione standard.\n   */\n  @Input() autocompleteWrapperSize: 'big' | 'default' = 'default';\n\n  private _passwordStrengthMeterConfig: PasswordStrengthMeterConfig = FormInputPasswordUtils.DEFAULT_CONFIG;\n\n  @Input() set passwordStrengthMeterConfig(newConfig: PasswordStrengthMeterConfig) {\n    this._passwordStrengthMeterConfig = {...this._passwordStrengthMeterConfig, ...newConfig};\n  }\n\n  get passwordStrengthMeterConfig(): PasswordStrengthMeterConfig {\n    return this._passwordStrengthMeterConfig;\n  }\n\n  /**\n   * Indica l'id dell'elemento HTML\n   */\n  @Input()\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    this._id = value;\n  }\n  private _id = `form-input-${identifier++}`;\n\n  /**\n   * Indica l'attributo name del componente HTML\n   */\n  @Input()\n  get name(): string {\n    return this._name;\n  }\n  set name(value: string) {\n    this._name = value;\n  }\n  private _name: string;\n\n  /**\n   * Indica il tipo di campo. Puo' assumere i valori text, email, password e number\n   */\n  @Input()\n  get type(): string {\n    return this._type;\n  }\n  set type(value: string) {\n    if (InputType.is(value)) {\n      if (value === INPUT_TYPES.NUMBER) {\n        if (isNaN(Number(this.value))) {\n          this.value = '';\n          this.onChange();\n        }\n      }\n      this._type = value;\n    } else {\n      this._type = INPUT_TYPES.TEXT;\n    }\n\n    this._isPasswordMode = this._type === INPUT_TYPES.PASSWORD;\n    this._isPasswordVisible = false;\n    this.showAutocompletion = false;\n  }\n  private _type = INPUT_TYPES.TEXT;\n\n  /**\n   * Indica il valore della label da visualizzare\n   */\n  @Input()\n  get label(): string { return this._label; }\n  set label(value: string) { this._label = value; }\n  private _label: string;\n\n  /**\n   * Indica se la label dell'input deve essere visualizzata dall'utente o solamente visibile per lo screen reader\n   */\n  @Input()\n  get labelVisuallyHidden(): boolean { return this._labelVisuallyHidden; }\n  set labelVisuallyHidden(value: boolean) { this._labelVisuallyHidden = value; }\n  private _labelVisuallyHidden: boolean = false;\n\n\n  /**\n   * Indica il valore che avrà l'attributo HTML \"min\" per l'input di tipo number\n   */\n  @Input()\n  get min(): number { return this._min; }\n  set min(value: number) { this._min = Util.coerceNumberProperty(value); }\n  private _min: number;\n   \n  /**\n   * Indica il valore che avrà l'attributo HTML \"max\" per l'input di tipo number\n   */\n  @Input()\n  get max(): number { return this._max; }\n  set max(value: number) { this._max = Util.coerceNumberProperty(value); }\n  private _max: number;\n\n  /**\n   * Indica il valore che avrà l'attributo HTML \"step\" per l'input di tipo number\n   */\n  @Input()\n  get step(): number { return this._step; }\n  set step(value: number) { this._step = Util.coerceNumberProperty(value); }\n  private _step: number = 1;\n\n\n  /**\n   * Indica il testo di aiuto sotto la input\n   */\n  @Input()\n  get note(): string { return this._note; }\n  set note(value: string) { this._note = value; }\n  private _note: string;\n\n  /**\n   * Indica il testo presente nel campo vuoto. Nel caso sia già presente la label, il placeholder non verrà mostrato\n   */\n  @Input()\n  get placeholder(): string {\n    return this._placeholder || '';\n  }\n  set placeholder(value: string) { this._placeholder = value; }\n  private _placeholder: string;\n\n  /**\n   * Indica l'icona da visualizzare a sinistra del campo di input\n   */\n  @Input()\n  get icon(): string { return this._icon; }\n  set icon(value: string) { this._icon = value; }\n  private _icon: string;\n\n  /**\n   * Opzionale.\n   * Indica se il campo in questione è disabilitato.\n   * Accetta una espressione booleana o può essere usato come attributo senza valore\n   */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) { this._disabled = Util.coerceBooleanProperty(value); }\n  private _disabled = false;\n\n   /**\n   * Opzionale.\n   * Nel caso di input numerico, indica se il campo è una valuta.\n   * Accetta una espressione booleana o può essere usato come attributo senza valore\n   */\n  @Input()\n  get currency(): boolean { return this._currency; }\n  set currency(value: boolean) { this._currency = Util.coerceBooleanProperty(value); }\n  private _currency = false;\n\n   /**\n   * Opzionale.\n   * Nel caso di input numerico, indica se il campo è una percentuale.\n   * Accetta una espressione booleana o può essere usato come attributo senza valore\n   */\n  @Input()\n  get percentage(): boolean { return this._percentage; }\n  set percentage(value: boolean) { this._percentage = Util.coerceBooleanProperty(value); }\n  private _percentage = false;\n\n  /**\n   * Opzionale.\n   * Nel caso di input numerico, indica se il campo si deve ridimensionare automaticamente a seconda del valore contenuto in esso.\n   * Accetta una espressione booleana o può essere usato come attributo senza valore\n   */\n  @Input()\n  get adaptive(): boolean { return this._adaptive; }\n  set adaptive(value: boolean) { this._adaptive = Util.coerceBooleanProperty(value); }\n  private _adaptive = false;\n\n  /**\n   * Opzionale.\n   * Indica se il campo in questione è di sola lettura.\n   * Accetta una espressione booleana o può essere usato come attributo senza valore\n   */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = Util.coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  get value(): any { return this._inputElement?.nativeElement?.value; }\n  set value(value: any) { \n    if(this._inputElement) {\n      this._inputElement.nativeElement.value = value;\n    } \n  }\n\n  /**\n   * Opzionale.\n   * Disponibile solo se il type è search.\n   * Indica la lista di elementi ricercabili su cui basare il sistema di autocompletamento della input\n   */\n  @Input()\n  get autoCompleteData(): Array<AutoCompleteItem> { return this._autoCompleteData; }\n  set autoCompleteData(value: Array<AutoCompleteItem>) { this._autoCompleteData = value; }\n  private _autoCompleteData: Array<AutoCompleteItem>;\n\n  /**\n   * Evento emesso quando il valore dell'input cambia.\n   * Gli eventi di change sono emessi soltanto quando il valore cambia a causa dell'interazione dell'utente\n   * con il campo d'input.\n   */\n  @Output()\n  readonly change: EventEmitter<FormInputChange> = new EventEmitter<FormInputChange>();\n\n  /**\n   * Opzionale.\n   * Indica se disabilitare l'avviso di CAPS LOCK attivo\n   * Accetta una espressione booleana o può essere usato come attributo senza valore\n   */\n  @Input()\n  get disableCapsLockAlert(): boolean { return this._disableCapsLockAlert; }\n  set disableCapsLockAlert(value: boolean) { this._disableCapsLockAlert = Util.coerceBooleanProperty(value); }\n  private _disableCapsLockAlert = false;\n\n  /**\n   * Indica se è attivo il CAPS LOCK\n   */\n  isCapsLockActive = false;\n\n  /**\n   * La label da mostrare in caso sia attivo il CAPS LOCK\n   */\n  @Input() capsLockActiveLabel = 'CAPS LOCK inserito';\n\n  get isLabelActive() {\n    return this._isLabelActive;\n  }\n  set isLabelActive(value: boolean) {\n    const newValue = Util.coerceBooleanProperty(value);\n   \n    // In alcuni casi la label deve essere sempre posizionata sopra l'input per evitare sovrapposizioni \n    // di testo, come in caso di presenza del placeholder o per l'input di tipo \"date\" o \"time\"\n    if(newValue || (!this.value && !this.placeholder && this.type !== INPUT_TYPES.TIME && \n                    this.type !== INPUT_TYPES.DATE && this.type !== INPUT_TYPES.NUMBER)) {\n      this._isLabelActive = newValue;\n    } else {\n      this._isLabelActive = true;\n    }\n  }\n  private _isLabelActive: boolean;\n\n\n  get isPasswordMode() {\n    return this._isPasswordMode;\n  }\n  set isPasswordMode(value: boolean) {\n    this._isPasswordMode = Util.coerceBooleanProperty(value);\n  }\n  private _isPasswordMode = false;\n\n  get isPasswordVisible() {\n    return this._isPasswordVisible;\n  }\n  set isPasswordVisible(value: boolean) {\n    this._isPasswordVisible = Util.coerceBooleanProperty(value);\n    this._type = this._isPasswordVisible ? INPUT_TYPES.TEXT : INPUT_TYPES.PASSWORD;\n  }\n  private _isPasswordVisible = false;\n\n  showAutocompletion = false;\n  private _isInitialized = false;\n  private _controlValueAccessorChangeFn: (value: any) => void = () => { };\n  private _onTouched: () => any = () => { };\n\n  /** Indica se è stato effettuato il focus sul campo di input */\n  focus: boolean = false;\n\n  private _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new FormInputChange(this, this.value));\n    }\n  }\n\n  ngOnInit(): void {\n    this.isLabelActive = false;\n    this._formInputPasswordUtils = new FormInputPasswordUtils(this.passwordStrengthMeterConfig);\n  }\n\n\n  writeValue(value: any): void {\n    this.value = value;\n    if (this.value) {\n      this.isLabelActive = true;\n    }\n\n    this.onChange();\n    if (this._isInitialized) {\n      this._changeDetector.detectChanges();\n    }\n  }\n\n  registerOnChange(fn: (value: any) => void): void {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n\n  ngAfterContentInit(): void {\n    this._isInitialized = true;\n\n    // Run change detection if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes,\n          this._textPrefixChildren.changes, this._textSuffixChildren.changes\n    ).subscribe(() => {\n      this._changeDetector.markForCheck();\n    });\n    \n  }\n\n  onChange() {\n    this._emitChangeEvent();\n    this._controlValueAccessorChangeFn(this.value);\n  }\n\n  onInput() {\n    if(this.isPasswordMode && this._enablePasswordStrengthMeter) {\n      this.recalculatePasswordStrength();\n    }\n\n    this.showAutocompletion = this._type === INPUT_TYPES.SEARCH && this.isAutocompletable() && this.value;\n   \n    this._emitChangeEvent();\n    this._controlValueAccessorChangeFn(this.value);\n  }\n\n  onFocus() {\n    this.focus = true;\n    this.isLabelActive = true;\n  }\n\n  onBlur() {\n    this.focus = false;\n    const inputValue: string = this.value;\n    if (!inputValue || inputValue.length === 0) {\n     \n      this.isLabelActive = false;\n      \n      if (this.type === INPUT_TYPES.NUMBER) {\n        this.value = '';\n      }\n    }\n  }\n\n  get noteId() {\n    return `${this.id}-note`;\n  }\n\n  getRelatedEntries() {\n    if (this.value) {\n      const lowercaseValue = this.value.toLowerCase();\n      const lowercaseData = this._autoCompleteData.filter((item) => item.value).map(item => {\n        return { ...item, original : item.value, lowercase : item.value.toLowerCase() };\n      });\n\n      const relatedEntries = [];\n      lowercaseData.forEach(lowercaseEntry => {\n        const matching = (lowercaseEntry.lowercase).includes(lowercaseValue);\n        if (matching) {\n          relatedEntries.push(lowercaseEntry);\n        }\n      });\n\n      return relatedEntries;\n    } else {\n      return [];\n    }\n  }\n\n  isAutocompletable() {\n    if (this._autoCompleteData && this._type === INPUT_TYPES.SEARCH) {\n      return this._autoCompleteData.length > 0;\n    } else {\n      return false;\n    }\n  }\n\n  onEntryClick(entry: AutoCompleteItem, event: Event) {\n    // Se non è stato definito un link associato all'elemento dell'autocomplete, probabilmente il desiderata \n    // non è effettuare la navigazione al default '#', pertanto in tal caso meglio annullare la navigazione.\n    if(!entry.link) {\n      event.preventDefault();\n    }\n    this.value = entry.value;\n    this.showAutocompletion = false;\n    this.onChange();\n  }\n\n  /**\n   * indica se il campo di input è composto da altri elementi accessori come \n   * icone o bottoni da posizionare adiacenti al campo di input\n   */\n  get isInputGroup(): boolean {\n    return  this._textPrefixChildren.length > 0 || this._prefixChildren.length > 0 || !!this.icon \n            || this._suffixChildren.length > 0 || this._textSuffixChildren.length > 0;\n  }\n\n\n  /**\n   * Ricalcola il punteggio di sicurezza in base al valore corrente\n   */\n  recalculatePasswordStrength(): void {\n    this.passwordScore = this._formInputPasswordUtils.calculateScore(this.value);\n  }\n  \n\n  get passwordScoreText(): string {\n    return this._formInputPasswordUtils.scoreText(this.passwordScore);\n  }\n\n  get passwordScoreColor(): string {\n    return this._formInputPasswordUtils.scoreColor(this.passwordScore);\n  }\n\n  get valueLength(): number {\n    if(!this.value) {\n      return 0;\n    }\n    return (this.value as string | number).toString().length;\n  }\n \n\n  @HostListener('window:click', ['$event'])\n  @HostListener('window:keydown', ['$event'])\n  @HostListener('window:keyup', ['$event'])\n  onKeyUp(event: KeyboardEvent): void {\n    this.isCapsLockActive = event.getModifierState && event.getModifierState('CapsLock');\n  }\n\n\n  autocompleteItemTrackByValueFn(index: number, item: AutoCompleteItem) {\n    return item.value;\n  }\n\n\n  /**\n   * Incrementa il valore dell'input numerico di tanto quanto vale lo step\n   */\n  incrementNumberValue(): void {\n    if(this.type === INPUT_TYPES.NUMBER) {\n      const tempValue = +this.value + this.step;\n      if(this.max === undefined || tempValue <= this.max) {\n        this.value = tempValue;\n      }\n    }\n  }\n\n  /**\n   * Decrementa il valore dell'input numerico di tanto quanto vale lo step\n   */\n  decrementNumberValue(): void {\n    if(this.type === INPUT_TYPES.NUMBER ) {\n      const tempValue = +this.value - this.step;\n      if(this.min === undefined || tempValue >= this.min) {\n        this.value = tempValue;\n      }\n    }\n  }\n}\n\n",
            "properties": [
                {
                    "name": "avatarAltText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Opzionale. Testo in alternativa dell&#39;avatar per accessibilità</p>\n",
                    "line": 53,
                    "rawdescription": "\nOpzionale. Testo in alternativa dell'avatar per accessibilità"
                },
                {
                    "name": "avatarSrcPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Opzionale. Path in cui ricercare l&#39;immagine dell&#39;avatar da posizionare a sinistra della voce di autocompletamento</p>\n",
                    "line": 51,
                    "rawdescription": "\nOpzionale. Path in cui ricercare l'immagine dell'avatar da posizionare a sinistra della voce di autocompletamento"
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Opzionale. Icona posizionata a sinistra della voce di autocompletamento</p>\n",
                    "line": 55,
                    "rawdescription": "\nOpzionale. Icona posizionata a sinistra della voce di autocompletamento"
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Opzionale. Label posizionata a destra della voce di autocompletamento</p>\n",
                    "line": 57,
                    "rawdescription": "\nOpzionale. Label posizionata a destra della voce di autocompletamento"
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Opzionale. Link relativo all&#39;elemento</p>\n",
                    "line": 59,
                    "rawdescription": "\nOpzionale. Link relativo all'elemento"
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Valore voce di autocompletamento</p>\n",
                    "line": 49,
                    "rawdescription": "\nValore voce di autocompletamento"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Elemento disponibile per l&#39;autocompletamento del it-form-input</p>\n",
            "rawdescription": "\n\nElemento disponibile per l'autocompletamento del it-form-input\n",
            "methods": []
        },
        {
            "name": "PasswordStrengthMeterConfig",
            "id": "interface-PasswordStrengthMeterConfig-345511f33d2b07621a8d756c4d4db99314b334b0858223f836bc2d0c01315f2b3562a61bf970411188879a57606b55cf51c04f6c8d7ff0b472dde522e0cfdd8d",
            "file": "projects/design-angular-kit/src/lib/form-input/form-input.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Component, Input, ChangeDetectionStrategy, forwardRef,\n  AfterContentInit, Output, EventEmitter, ChangeDetectorRef, ViewChild, ElementRef, ContentChildren, QueryList, AfterContentChecked, OnInit, HostListener\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { merge } from 'rxjs';\nimport { InputType, INPUT_TYPES } from '../models/InputType';\nimport { Util } from '../util/util';\nimport { FormInputPasswordUtils } from './form-input-password.utils';\nimport { ItPrefixDirective } from './it-prefix.directive';\nimport { ItSuffixDirective } from './it-suffix.directive';\nimport { ItTextPrefixDirective } from './it-text-prefix.directive';\nimport { ItTextSuffixDirective } from './it-text-suffix.directive';\n\nlet identifier = 0;\n\nexport class FormInputChange {\n  constructor(\n    public source: FormInputComponent,\n    public value: any\n  ) { }\n}\n\nexport interface PasswordStrengthMeterConfig {\n  /** Testo per il punteggio di forza della password minimo */\n  shortPass: string,\n  /** Testo per punteggio di forza della password basso\t */\n  badPass: string,\n  /** Testo per punteggio di forza della password buono\t */\n  goodPass: string,\n  /** Testo per il punteggio di forza della password massimo\t */\n  strongPass: string,\n  /** Testo di aiuto */\n  enterPass: string,\n  /** Testo per avvertire che il CAPS LOCK è inserito\t */\n  alertCaps: string,\n  /** Lunghezza minima per il calcolo della forza della password (soglia password molto debole)\t */\n  showText: boolean,\n  /** Attiva/disattiva la visibilità dei messaggi di errore\t */\n  minimumLength: number,\n}\n\n\n/**\n * Elemento disponibile per l'autocompletamento del it-form-input\n */\nexport interface AutoCompleteItem {\n  /** Valore voce di autocompletamento */\n  value: string;\n  /** Opzionale. Path in cui ricercare l'immagine dell'avatar da posizionare a sinistra della voce di autocompletamento */\n  avatarSrcPath?: string;\n  /** Opzionale. Testo in alternativa dell'avatar per accessibilità */\n  avatarAltText?: string;\n  /** Opzionale. Icona posizionata a sinistra della voce di autocompletamento */\n  icon?: string;\n  /** Opzionale. Label posizionata a destra della voce di autocompletamento */\n  label?: string;\n  /** Opzionale. Link relativo all'elemento */\n  link?: string\n}\n\n/**\n * Elementi e stili per la creazione di input accessibili e responsivi.\n */\n@Component({\n  selector: 'it-input',\n  templateUrl: './form-input.component.html',\n  styleUrls: ['./form-input.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => FormInputComponent),\n    multi: true\n  }]\n})\nexport class FormInputComponent implements OnInit, AfterContentInit, ControlValueAccessor {\n\n  private _formInputPasswordUtils: FormInputPasswordUtils;\n\n  @ContentChildren(ItPrefixDirective, {descendants: true}) _prefixChildren: QueryList<ItPrefixDirective>;\n  @ContentChildren(ItTextPrefixDirective, {descendants: true}) _textPrefixChildren: QueryList<ItTextPrefixDirective>;\n\n  @ContentChildren(ItSuffixDirective, {descendants: true}) _suffixChildren: QueryList<ItSuffixDirective>;\n  @ContentChildren(ItTextSuffixDirective, {descendants: true}) _textSuffixChildren: QueryList<ItTextSuffixDirective>;\n\n  INPUT_TYPES = INPUT_TYPES;\n\n  @ViewChild('inputElement', { static: false })\n  private _inputElement: ElementRef;\n\n  /**\n   * Opzionale. Indica se mostrare gli input readonly nella forma stilizzata come testo normale\n   */\n  @Input()\n  get readonlyPlainText(): boolean { return this._readonlyPlainText; }\n  set readonlyPlainText(value: boolean) { this._readonlyPlainText = Util.coerceBooleanProperty(value); }\n  private _readonlyPlainText: boolean = false;\n\n\n  /**\n   * Opzionale. Indica se abilitare il controllo sulla sicurezza della password\n   */\n  @Input()\n  get enablePasswordStrengthMeter(): boolean { return this._enablePasswordStrengthMeter; }\n  set enablePasswordStrengthMeter(value: boolean) { this._enablePasswordStrengthMeter = Util.coerceBooleanProperty(value); }\n  private _enablePasswordStrengthMeter: boolean = false;\n\n  /**\n   * Punteggio di sicurezza calcolato in base alla password immessa se enablePasswordStrengthMeter ha valore true\n   */\n  passwordScore: number = 0;\n\n  /**\n   * Dimensione dell'input di autocomplete. Di default ha dimensione standard.\n   */\n  @Input() autocompleteWrapperSize: 'big' | 'default' = 'default';\n\n  private _passwordStrengthMeterConfig: PasswordStrengthMeterConfig = FormInputPasswordUtils.DEFAULT_CONFIG;\n\n  @Input() set passwordStrengthMeterConfig(newConfig: PasswordStrengthMeterConfig) {\n    this._passwordStrengthMeterConfig = {...this._passwordStrengthMeterConfig, ...newConfig};\n  }\n\n  get passwordStrengthMeterConfig(): PasswordStrengthMeterConfig {\n    return this._passwordStrengthMeterConfig;\n  }\n\n  /**\n   * Indica l'id dell'elemento HTML\n   */\n  @Input()\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    this._id = value;\n  }\n  private _id = `form-input-${identifier++}`;\n\n  /**\n   * Indica l'attributo name del componente HTML\n   */\n  @Input()\n  get name(): string {\n    return this._name;\n  }\n  set name(value: string) {\n    this._name = value;\n  }\n  private _name: string;\n\n  /**\n   * Indica il tipo di campo. Puo' assumere i valori text, email, password e number\n   */\n  @Input()\n  get type(): string {\n    return this._type;\n  }\n  set type(value: string) {\n    if (InputType.is(value)) {\n      if (value === INPUT_TYPES.NUMBER) {\n        if (isNaN(Number(this.value))) {\n          this.value = '';\n          this.onChange();\n        }\n      }\n      this._type = value;\n    } else {\n      this._type = INPUT_TYPES.TEXT;\n    }\n\n    this._isPasswordMode = this._type === INPUT_TYPES.PASSWORD;\n    this._isPasswordVisible = false;\n    this.showAutocompletion = false;\n  }\n  private _type = INPUT_TYPES.TEXT;\n\n  /**\n   * Indica il valore della label da visualizzare\n   */\n  @Input()\n  get label(): string { return this._label; }\n  set label(value: string) { this._label = value; }\n  private _label: string;\n\n  /**\n   * Indica se la label dell'input deve essere visualizzata dall'utente o solamente visibile per lo screen reader\n   */\n  @Input()\n  get labelVisuallyHidden(): boolean { return this._labelVisuallyHidden; }\n  set labelVisuallyHidden(value: boolean) { this._labelVisuallyHidden = value; }\n  private _labelVisuallyHidden: boolean = false;\n\n\n  /**\n   * Indica il valore che avrà l'attributo HTML \"min\" per l'input di tipo number\n   */\n  @Input()\n  get min(): number { return this._min; }\n  set min(value: number) { this._min = Util.coerceNumberProperty(value); }\n  private _min: number;\n   \n  /**\n   * Indica il valore che avrà l'attributo HTML \"max\" per l'input di tipo number\n   */\n  @Input()\n  get max(): number { return this._max; }\n  set max(value: number) { this._max = Util.coerceNumberProperty(value); }\n  private _max: number;\n\n  /**\n   * Indica il valore che avrà l'attributo HTML \"step\" per l'input di tipo number\n   */\n  @Input()\n  get step(): number { return this._step; }\n  set step(value: number) { this._step = Util.coerceNumberProperty(value); }\n  private _step: number = 1;\n\n\n  /**\n   * Indica il testo di aiuto sotto la input\n   */\n  @Input()\n  get note(): string { return this._note; }\n  set note(value: string) { this._note = value; }\n  private _note: string;\n\n  /**\n   * Indica il testo presente nel campo vuoto. Nel caso sia già presente la label, il placeholder non verrà mostrato\n   */\n  @Input()\n  get placeholder(): string {\n    return this._placeholder || '';\n  }\n  set placeholder(value: string) { this._placeholder = value; }\n  private _placeholder: string;\n\n  /**\n   * Indica l'icona da visualizzare a sinistra del campo di input\n   */\n  @Input()\n  get icon(): string { return this._icon; }\n  set icon(value: string) { this._icon = value; }\n  private _icon: string;\n\n  /**\n   * Opzionale.\n   * Indica se il campo in questione è disabilitato.\n   * Accetta una espressione booleana o può essere usato come attributo senza valore\n   */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) { this._disabled = Util.coerceBooleanProperty(value); }\n  private _disabled = false;\n\n   /**\n   * Opzionale.\n   * Nel caso di input numerico, indica se il campo è una valuta.\n   * Accetta una espressione booleana o può essere usato come attributo senza valore\n   */\n  @Input()\n  get currency(): boolean { return this._currency; }\n  set currency(value: boolean) { this._currency = Util.coerceBooleanProperty(value); }\n  private _currency = false;\n\n   /**\n   * Opzionale.\n   * Nel caso di input numerico, indica se il campo è una percentuale.\n   * Accetta una espressione booleana o può essere usato come attributo senza valore\n   */\n  @Input()\n  get percentage(): boolean { return this._percentage; }\n  set percentage(value: boolean) { this._percentage = Util.coerceBooleanProperty(value); }\n  private _percentage = false;\n\n  /**\n   * Opzionale.\n   * Nel caso di input numerico, indica se il campo si deve ridimensionare automaticamente a seconda del valore contenuto in esso.\n   * Accetta una espressione booleana o può essere usato come attributo senza valore\n   */\n  @Input()\n  get adaptive(): boolean { return this._adaptive; }\n  set adaptive(value: boolean) { this._adaptive = Util.coerceBooleanProperty(value); }\n  private _adaptive = false;\n\n  /**\n   * Opzionale.\n   * Indica se il campo in questione è di sola lettura.\n   * Accetta una espressione booleana o può essere usato come attributo senza valore\n   */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = Util.coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  get value(): any { return this._inputElement?.nativeElement?.value; }\n  set value(value: any) { \n    if(this._inputElement) {\n      this._inputElement.nativeElement.value = value;\n    } \n  }\n\n  /**\n   * Opzionale.\n   * Disponibile solo se il type è search.\n   * Indica la lista di elementi ricercabili su cui basare il sistema di autocompletamento della input\n   */\n  @Input()\n  get autoCompleteData(): Array<AutoCompleteItem> { return this._autoCompleteData; }\n  set autoCompleteData(value: Array<AutoCompleteItem>) { this._autoCompleteData = value; }\n  private _autoCompleteData: Array<AutoCompleteItem>;\n\n  /**\n   * Evento emesso quando il valore dell'input cambia.\n   * Gli eventi di change sono emessi soltanto quando il valore cambia a causa dell'interazione dell'utente\n   * con il campo d'input.\n   */\n  @Output()\n  readonly change: EventEmitter<FormInputChange> = new EventEmitter<FormInputChange>();\n\n  /**\n   * Opzionale.\n   * Indica se disabilitare l'avviso di CAPS LOCK attivo\n   * Accetta una espressione booleana o può essere usato come attributo senza valore\n   */\n  @Input()\n  get disableCapsLockAlert(): boolean { return this._disableCapsLockAlert; }\n  set disableCapsLockAlert(value: boolean) { this._disableCapsLockAlert = Util.coerceBooleanProperty(value); }\n  private _disableCapsLockAlert = false;\n\n  /**\n   * Indica se è attivo il CAPS LOCK\n   */\n  isCapsLockActive = false;\n\n  /**\n   * La label da mostrare in caso sia attivo il CAPS LOCK\n   */\n  @Input() capsLockActiveLabel = 'CAPS LOCK inserito';\n\n  get isLabelActive() {\n    return this._isLabelActive;\n  }\n  set isLabelActive(value: boolean) {\n    const newValue = Util.coerceBooleanProperty(value);\n   \n    // In alcuni casi la label deve essere sempre posizionata sopra l'input per evitare sovrapposizioni \n    // di testo, come in caso di presenza del placeholder o per l'input di tipo \"date\" o \"time\"\n    if(newValue || (!this.value && !this.placeholder && this.type !== INPUT_TYPES.TIME && \n                    this.type !== INPUT_TYPES.DATE && this.type !== INPUT_TYPES.NUMBER)) {\n      this._isLabelActive = newValue;\n    } else {\n      this._isLabelActive = true;\n    }\n  }\n  private _isLabelActive: boolean;\n\n\n  get isPasswordMode() {\n    return this._isPasswordMode;\n  }\n  set isPasswordMode(value: boolean) {\n    this._isPasswordMode = Util.coerceBooleanProperty(value);\n  }\n  private _isPasswordMode = false;\n\n  get isPasswordVisible() {\n    return this._isPasswordVisible;\n  }\n  set isPasswordVisible(value: boolean) {\n    this._isPasswordVisible = Util.coerceBooleanProperty(value);\n    this._type = this._isPasswordVisible ? INPUT_TYPES.TEXT : INPUT_TYPES.PASSWORD;\n  }\n  private _isPasswordVisible = false;\n\n  showAutocompletion = false;\n  private _isInitialized = false;\n  private _controlValueAccessorChangeFn: (value: any) => void = () => { };\n  private _onTouched: () => any = () => { };\n\n  /** Indica se è stato effettuato il focus sul campo di input */\n  focus: boolean = false;\n\n  private _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new FormInputChange(this, this.value));\n    }\n  }\n\n  ngOnInit(): void {\n    this.isLabelActive = false;\n    this._formInputPasswordUtils = new FormInputPasswordUtils(this.passwordStrengthMeterConfig);\n  }\n\n\n  writeValue(value: any): void {\n    this.value = value;\n    if (this.value) {\n      this.isLabelActive = true;\n    }\n\n    this.onChange();\n    if (this._isInitialized) {\n      this._changeDetector.detectChanges();\n    }\n  }\n\n  registerOnChange(fn: (value: any) => void): void {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n\n  ngAfterContentInit(): void {\n    this._isInitialized = true;\n\n    // Run change detection if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes,\n          this._textPrefixChildren.changes, this._textSuffixChildren.changes\n    ).subscribe(() => {\n      this._changeDetector.markForCheck();\n    });\n    \n  }\n\n  onChange() {\n    this._emitChangeEvent();\n    this._controlValueAccessorChangeFn(this.value);\n  }\n\n  onInput() {\n    if(this.isPasswordMode && this._enablePasswordStrengthMeter) {\n      this.recalculatePasswordStrength();\n    }\n\n    this.showAutocompletion = this._type === INPUT_TYPES.SEARCH && this.isAutocompletable() && this.value;\n   \n    this._emitChangeEvent();\n    this._controlValueAccessorChangeFn(this.value);\n  }\n\n  onFocus() {\n    this.focus = true;\n    this.isLabelActive = true;\n  }\n\n  onBlur() {\n    this.focus = false;\n    const inputValue: string = this.value;\n    if (!inputValue || inputValue.length === 0) {\n     \n      this.isLabelActive = false;\n      \n      if (this.type === INPUT_TYPES.NUMBER) {\n        this.value = '';\n      }\n    }\n  }\n\n  get noteId() {\n    return `${this.id}-note`;\n  }\n\n  getRelatedEntries() {\n    if (this.value) {\n      const lowercaseValue = this.value.toLowerCase();\n      const lowercaseData = this._autoCompleteData.filter((item) => item.value).map(item => {\n        return { ...item, original : item.value, lowercase : item.value.toLowerCase() };\n      });\n\n      const relatedEntries = [];\n      lowercaseData.forEach(lowercaseEntry => {\n        const matching = (lowercaseEntry.lowercase).includes(lowercaseValue);\n        if (matching) {\n          relatedEntries.push(lowercaseEntry);\n        }\n      });\n\n      return relatedEntries;\n    } else {\n      return [];\n    }\n  }\n\n  isAutocompletable() {\n    if (this._autoCompleteData && this._type === INPUT_TYPES.SEARCH) {\n      return this._autoCompleteData.length > 0;\n    } else {\n      return false;\n    }\n  }\n\n  onEntryClick(entry: AutoCompleteItem, event: Event) {\n    // Se non è stato definito un link associato all'elemento dell'autocomplete, probabilmente il desiderata \n    // non è effettuare la navigazione al default '#', pertanto in tal caso meglio annullare la navigazione.\n    if(!entry.link) {\n      event.preventDefault();\n    }\n    this.value = entry.value;\n    this.showAutocompletion = false;\n    this.onChange();\n  }\n\n  /**\n   * indica se il campo di input è composto da altri elementi accessori come \n   * icone o bottoni da posizionare adiacenti al campo di input\n   */\n  get isInputGroup(): boolean {\n    return  this._textPrefixChildren.length > 0 || this._prefixChildren.length > 0 || !!this.icon \n            || this._suffixChildren.length > 0 || this._textSuffixChildren.length > 0;\n  }\n\n\n  /**\n   * Ricalcola il punteggio di sicurezza in base al valore corrente\n   */\n  recalculatePasswordStrength(): void {\n    this.passwordScore = this._formInputPasswordUtils.calculateScore(this.value);\n  }\n  \n\n  get passwordScoreText(): string {\n    return this._formInputPasswordUtils.scoreText(this.passwordScore);\n  }\n\n  get passwordScoreColor(): string {\n    return this._formInputPasswordUtils.scoreColor(this.passwordScore);\n  }\n\n  get valueLength(): number {\n    if(!this.value) {\n      return 0;\n    }\n    return (this.value as string | number).toString().length;\n  }\n \n\n  @HostListener('window:click', ['$event'])\n  @HostListener('window:keydown', ['$event'])\n  @HostListener('window:keyup', ['$event'])\n  onKeyUp(event: KeyboardEvent): void {\n    this.isCapsLockActive = event.getModifierState && event.getModifierState('CapsLock');\n  }\n\n\n  autocompleteItemTrackByValueFn(index: number, item: AutoCompleteItem) {\n    return item.value;\n  }\n\n\n  /**\n   * Incrementa il valore dell'input numerico di tanto quanto vale lo step\n   */\n  incrementNumberValue(): void {\n    if(this.type === INPUT_TYPES.NUMBER) {\n      const tempValue = +this.value + this.step;\n      if(this.max === undefined || tempValue <= this.max) {\n        this.value = tempValue;\n      }\n    }\n  }\n\n  /**\n   * Decrementa il valore dell'input numerico di tanto quanto vale lo step\n   */\n  decrementNumberValue(): void {\n    if(this.type === INPUT_TYPES.NUMBER ) {\n      const tempValue = +this.value - this.step;\n      if(this.min === undefined || tempValue >= this.min) {\n        this.value = tempValue;\n      }\n    }\n  }\n}\n\n",
            "properties": [
                {
                    "name": "alertCaps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Testo per avvertire che il CAPS LOCK è inserito</p>\n",
                    "line": 36,
                    "rawdescription": "\nTesto per avvertire che il CAPS LOCK è inserito"
                },
                {
                    "name": "badPass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Testo per punteggio di forza della password basso</p>\n",
                    "line": 28,
                    "rawdescription": "\nTesto per punteggio di forza della password basso"
                },
                {
                    "name": "enterPass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Testo di aiuto</p>\n",
                    "line": 34,
                    "rawdescription": "\nTesto di aiuto"
                },
                {
                    "name": "goodPass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Testo per punteggio di forza della password buono</p>\n",
                    "line": 30,
                    "rawdescription": "\nTesto per punteggio di forza della password buono"
                },
                {
                    "name": "minimumLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Attiva/disattiva la visibilità dei messaggi di errore</p>\n",
                    "line": 40,
                    "rawdescription": "\nAttiva/disattiva la visibilità dei messaggi di errore"
                },
                {
                    "name": "shortPass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Testo per il punteggio di forza della password minimo</p>\n",
                    "line": 26,
                    "rawdescription": "\nTesto per il punteggio di forza della password minimo"
                },
                {
                    "name": "showText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Lunghezza minima per il calcolo della forza della password (soglia password molto debole)</p>\n",
                    "line": 38,
                    "rawdescription": "\nLunghezza minima per il calcolo della forza della password (soglia password molto debole)"
                },
                {
                    "name": "strongPass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Testo per il punteggio di forza della password massimo</p>\n",
                    "line": 32,
                    "rawdescription": "\nTesto per il punteggio di forza della password massimo"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ItCollapseConfig",
            "id": "injectable-ItCollapseConfig-0c56d7ba420dea82541d336d6502a7fe9eebeadbb1b28178f63e42014a35c247f44a7e66c0011420e0cf202dc8b645e16755a664e7a56905c5e9c9694822604a",
            "file": "projects/design-angular-kit/src/lib/collapse/collapse.config.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { NgbCollapseConfig } from \"@ng-bootstrap/ng-bootstrap\";\n\n@Injectable({providedIn: 'root'})\nexport class ItCollapseConfig extends NgbCollapseConfig {\n    \n}",
            "extends": "NgbCollapseConfig",
            "type": "injectable"
        },
        {
            "name": "ItDropdownConfig",
            "id": "injectable-ItDropdownConfig-6dd115f62d479546f9a17d9d5f3127afb93ee2e1db6d9b1d06038462ce98df11b3e477703d89139c4b5fffddbf9f548f66814ec88e54e281304f00561de0a88c",
            "file": "projects/design-angular-kit/src/lib/dropdown/dropdown.config.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { NgbDropdownConfig } from \"@ng-bootstrap/ng-bootstrap\";\n\n@Injectable({providedIn: 'root'})\nexport class ItDropdownConfig extends NgbDropdownConfig {}",
            "extends": "NgbDropdownConfig",
            "type": "injectable"
        },
        {
            "name": "ItPopoverConfig",
            "id": "injectable-ItPopoverConfig-35549dd6bc989b52898eb62215725abb1169cff8ca1c34ac548f7d86abca38bbe1166ee617faae970f254a626c81d80f61553220dc4420cc6d039f0d09a08a37",
            "file": "projects/design-angular-kit/src/lib/popover/popover.config.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Servizio di configurazione per la direttiva ItPopover.\nIl servizio può essere iniettato, tipicamente in un root component, per impostare i valori delle proprietà in\nmodo tale da fornire i valori di default per tutti i popover utilizzati in un&#39;applicazione.</p>\n",
            "rawdescription": "\n\nServizio di configurazione per la direttiva ItPopover.\nIl servizio può essere iniettato, tipicamente in un root component, per impostare i valori delle proprietà in\nmodo tale da fornire i valori di default per tutti i popover utilizzati in un'applicazione.\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { NgbPopoverConfig } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * Servizio di configurazione per la direttiva ItPopover.\n * Il servizio può essere iniettato, tipicamente in un root component, per impostare i valori delle proprietà in\n * modo tale da fornire i valori di default per tutti i popover utilizzati in un'applicazione.\n */\n@Injectable({providedIn: 'root'})\nexport class ItPopoverConfig extends NgbPopoverConfig {}\n",
            "extends": "NgbPopoverConfig",
            "type": "injectable"
        },
        {
            "name": "ItTooltipConfig",
            "id": "injectable-ItTooltipConfig-166dd9506e30453b3a6118391cf28bd45174cec54b2f1549da22f8a5fe2ebc6e2016acaeee5e6b9ee2d4b774771c1a631cf9f7bb0986a06c2a9b8915003b7f8d",
            "file": "projects/design-angular-kit/src/lib/tooltip/tooltip.config.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Servizio di configurazione per la direttiva ItPopover.\nIl servizio può essere iniettato, tipicamente in un root component, per impostare i valori delle proprietà in\nmodo tale da fornire i valori di default per tutti i popover utilizzati in un&#39;applicazione.</p>\n",
            "rawdescription": "\n\nServizio di configurazione per la direttiva ItPopover.\nIl servizio può essere iniettato, tipicamente in un root component, per impostare i valori delle proprietà in\nmodo tale da fornire i valori di default per tutti i popover utilizzati in un'applicazione.\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { NgbTooltipConfig } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * Servizio di configurazione per la direttiva ItPopover.\n * Il servizio può essere iniettato, tipicamente in un root component, per impostare i valori delle proprietà in\n * modo tale da fornire i valori di default per tutti i popover utilizzati in un'applicazione.\n */\n@Injectable({providedIn: 'root'})\nexport class ItTooltipConfig extends NgbTooltipConfig {}\n",
            "extends": "NgbTooltipConfig",
            "type": "injectable"
        },
        {
            "name": "UniqueSelectionDispatcher",
            "id": "injectable-UniqueSelectionDispatcher-d4f60d30b31adb33014709252682f6626858ccfbe2f3e14b89e739b52d2f57c7b067f25fbeb9f712cb648fbfb11e9d94c735de1151fc9096f77161350ac3c896",
            "file": "projects/design-angular-kit/src/lib/radio/unique-selection-dispatcher.ts",
            "properties": [
                {
                    "name": "_listeners",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UniqueSelectionDispatcherListener[]",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "listen",
                    "args": [
                        {
                            "name": "listener",
                            "type": "UniqueSelectionDispatcherListener",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nListen for future changes to item selection.\n",
                    "description": "<p>Listen for future changes to item selection.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "listener",
                            "type": "UniqueSelectionDispatcherListener",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 1395,
                                "end": 1401,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 105,
                                "escapedText": "return"
                            },
                            "comment": "<p>Function used to deregister listener</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "notify",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNotify other items that selection for the given name has been set.\n",
                    "description": "<p>Notify other items that selection for the given name has been set.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1153,
                                "end": 1155,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1147,
                                "end": 1152,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>ID of the item.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1184,
                                "end": 1188,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "name"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1178,
                                "end": 1183,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Name of the item.</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Class to coordinate unique selection based on name.\nIntended to be consumed as an Angular service.\nThis service is needed because native radio change events are only fired on the item currently\nbeing selected, and we still need to uncheck the previous selection.</p>\n<p>This service does not <em>store</em> any IDs and names because they may change at any time, so it is\nless error-prone if they are simply passed through when the events occur.</p>\n",
            "rawdescription": "\n\nClass to coordinate unique selection based on name.\nIntended to be consumed as an Angular service.\nThis service is needed because native radio change events are only fired on the item currently\nbeing selected, and we still need to uncheck the previous selection.\n\nThis service does not *store* any IDs and names because they may change at any time, so it is\nless error-prone if they are simply passed through when the events occur.\n",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\n@Injectable({providedIn: 'root'})\nexport class UniqueSelectionDispatcher implements OnDestroy {\n  private _listeners: UniqueSelectionDispatcherListener[] = [];\n\n  /**\n   * Notify other items that selection for the given name has been set.\n   * @param id ID of the item.\n   * @param name Name of the item.\n   */\n  notify(id: string, name: string) {\n    for (const listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n\n  /**\n   * Listen for future changes to item selection.\n   * @return Function used to deregister listener\n   */\n  listen(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\n\n  ngOnDestroy() {\n    this._listeners = [];\n  }\n}\n",
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "CheckboxChange",
            "id": "class-CheckboxChange-b33bd20e7f3b966189a249b332be9d1da05026a377cc7577fd46c42e2193cd356393975572c9331f5f7071a3693952cd101d8c0a8864317011357c4088a68a7a",
            "file": "projects/design-angular-kit/src/lib/checkbox/checkbox.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, Input, Output, EventEmitter, ChangeDetectorRef, forwardRef, ChangeDetectionStrategy, ElementRef, ViewChild } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { Util } from '../util/util';\n\nlet identifier = 0;\n\nexport class CheckboxChange {\n  source: CheckboxComponent;\n  checked: boolean;\n}\n\n/**\n * Una checkbox con design bootstrap italia. Supporta tutte le funzionalità di una checkbox HTML5,\n * ed espone una API simile. Una `<it-checkbox>` può essere checked, unchecked, o disabled.\n */\n@Component({\n  selector: 'it-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.css'],\n  providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => CheckboxComponent), multi: true }],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CheckboxComponent implements ControlValueAccessor {\n  \n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /**\n   * Se la checkbox è selezionata.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value !== this.checked) {\n      this._checked = value;\n      if(this._checked) {\n        this.indeterminate = false;    \n      }\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked = false;\n\n  @Input()\n  get grouped(): boolean { return this._grouped; }\n  set grouped(value: boolean) { this._grouped = Util.coerceBooleanProperty(value); }\n  private _grouped = false;\n  \n  /**\n   * L'etichetta della checkbox.\n   */\n  @Input()\n  label: string;\n\n  /**\n   * Se la checkbox è disabilitata.\n   */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    if (value !== this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled = false;\n\n  @Input()\n  get inline(): boolean { return this._inline; }\n  set inline(value: boolean) { this._inline = Util.coerceBooleanProperty(value); }\n  private _inline = false;\n\n\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) { \n    const newValue = Util.coerceBooleanProperty(value); \n    const changed = this._indeterminate !== newValue;\n    if(changed) {\n      this._indeterminate = newValue;\n      this.indeterminateChange.emit(this._indeterminate);\n      \n      if(this._indeterminate) {\n        queueMicrotask(() => {\n          this.checked = false;\n          this._emitChangeEvent();\n        });\n    \n      }\n      \n    }\n  }\n  private _indeterminate = false;\n\n  @Output() indeterminateChange = new EventEmitter<boolean>();\n\n  focus = false;\n  onFocus() {\n    this.focus = true;\n  }\n\n  onBlur() {\n    this.focus = false;\n  }\n  \n  /**\n   * Evento emesso quando il valore `checked` della checkbox cambia.\n   */\n  @Output() readonly change: EventEmitter<CheckboxChange> =\n    new EventEmitter<CheckboxChange>();\n\n  inputId = `checkbox-${identifier++}`;\n\n  private _onTouched: () => any = () => {};\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => { };\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef\n  ) { }\n\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  handleChange(event: Event) {\n    event.stopPropagation();\n    if (!this.disabled) {\n      if(!this.indeterminate) {\n        this._toggle();\n      } else {\n        this.indeterminate = false;\n        // reset proprietà \"checked\" per prevenire il comportamento di default dell'elemento HTML\n        this._inputElement.nativeElement.checked = this.checked;\n      }\n      this._emitChangeEvent();\n    }\n  }\n\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  private _emitChangeEvent() {\n    const event = new CheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n}\n",
            "properties": [
                {
                    "name": "checked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "source",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CheckboxComponent",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FormInputChange",
            "id": "class-FormInputChange-345511f33d2b07621a8d756c4d4db99314b334b0858223f836bc2d0c01315f2b3562a61bf970411188879a57606b55cf51c04f6c8d7ff0b472dde522e0cfdd8d",
            "file": "projects/design-angular-kit/src/lib/form-input/form-input.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\n  Component, Input, ChangeDetectionStrategy, forwardRef,\n  AfterContentInit, Output, EventEmitter, ChangeDetectorRef, ViewChild, ElementRef, ContentChildren, QueryList, AfterContentChecked, OnInit, HostListener\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { merge } from 'rxjs';\nimport { InputType, INPUT_TYPES } from '../models/InputType';\nimport { Util } from '../util/util';\nimport { FormInputPasswordUtils } from './form-input-password.utils';\nimport { ItPrefixDirective } from './it-prefix.directive';\nimport { ItSuffixDirective } from './it-suffix.directive';\nimport { ItTextPrefixDirective } from './it-text-prefix.directive';\nimport { ItTextSuffixDirective } from './it-text-suffix.directive';\n\nlet identifier = 0;\n\nexport class FormInputChange {\n  constructor(\n    public source: FormInputComponent,\n    public value: any\n  ) { }\n}\n\nexport interface PasswordStrengthMeterConfig {\n  /** Testo per il punteggio di forza della password minimo */\n  shortPass: string,\n  /** Testo per punteggio di forza della password basso\t */\n  badPass: string,\n  /** Testo per punteggio di forza della password buono\t */\n  goodPass: string,\n  /** Testo per il punteggio di forza della password massimo\t */\n  strongPass: string,\n  /** Testo di aiuto */\n  enterPass: string,\n  /** Testo per avvertire che il CAPS LOCK è inserito\t */\n  alertCaps: string,\n  /** Lunghezza minima per il calcolo della forza della password (soglia password molto debole)\t */\n  showText: boolean,\n  /** Attiva/disattiva la visibilità dei messaggi di errore\t */\n  minimumLength: number,\n}\n\n\n/**\n * Elemento disponibile per l'autocompletamento del it-form-input\n */\nexport interface AutoCompleteItem {\n  /** Valore voce di autocompletamento */\n  value: string;\n  /** Opzionale. Path in cui ricercare l'immagine dell'avatar da posizionare a sinistra della voce di autocompletamento */\n  avatarSrcPath?: string;\n  /** Opzionale. Testo in alternativa dell'avatar per accessibilità */\n  avatarAltText?: string;\n  /** Opzionale. Icona posizionata a sinistra della voce di autocompletamento */\n  icon?: string;\n  /** Opzionale. Label posizionata a destra della voce di autocompletamento */\n  label?: string;\n  /** Opzionale. Link relativo all'elemento */\n  link?: string\n}\n\n/**\n * Elementi e stili per la creazione di input accessibili e responsivi.\n */\n@Component({\n  selector: 'it-input',\n  templateUrl: './form-input.component.html',\n  styleUrls: ['./form-input.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => FormInputComponent),\n    multi: true\n  }]\n})\nexport class FormInputComponent implements OnInit, AfterContentInit, ControlValueAccessor {\n\n  private _formInputPasswordUtils: FormInputPasswordUtils;\n\n  @ContentChildren(ItPrefixDirective, {descendants: true}) _prefixChildren: QueryList<ItPrefixDirective>;\n  @ContentChildren(ItTextPrefixDirective, {descendants: true}) _textPrefixChildren: QueryList<ItTextPrefixDirective>;\n\n  @ContentChildren(ItSuffixDirective, {descendants: true}) _suffixChildren: QueryList<ItSuffixDirective>;\n  @ContentChildren(ItTextSuffixDirective, {descendants: true}) _textSuffixChildren: QueryList<ItTextSuffixDirective>;\n\n  INPUT_TYPES = INPUT_TYPES;\n\n  @ViewChild('inputElement', { static: false })\n  private _inputElement: ElementRef;\n\n  /**\n   * Opzionale. Indica se mostrare gli input readonly nella forma stilizzata come testo normale\n   */\n  @Input()\n  get readonlyPlainText(): boolean { return this._readonlyPlainText; }\n  set readonlyPlainText(value: boolean) { this._readonlyPlainText = Util.coerceBooleanProperty(value); }\n  private _readonlyPlainText: boolean = false;\n\n\n  /**\n   * Opzionale. Indica se abilitare il controllo sulla sicurezza della password\n   */\n  @Input()\n  get enablePasswordStrengthMeter(): boolean { return this._enablePasswordStrengthMeter; }\n  set enablePasswordStrengthMeter(value: boolean) { this._enablePasswordStrengthMeter = Util.coerceBooleanProperty(value); }\n  private _enablePasswordStrengthMeter: boolean = false;\n\n  /**\n   * Punteggio di sicurezza calcolato in base alla password immessa se enablePasswordStrengthMeter ha valore true\n   */\n  passwordScore: number = 0;\n\n  /**\n   * Dimensione dell'input di autocomplete. Di default ha dimensione standard.\n   */\n  @Input() autocompleteWrapperSize: 'big' | 'default' = 'default';\n\n  private _passwordStrengthMeterConfig: PasswordStrengthMeterConfig = FormInputPasswordUtils.DEFAULT_CONFIG;\n\n  @Input() set passwordStrengthMeterConfig(newConfig: PasswordStrengthMeterConfig) {\n    this._passwordStrengthMeterConfig = {...this._passwordStrengthMeterConfig, ...newConfig};\n  }\n\n  get passwordStrengthMeterConfig(): PasswordStrengthMeterConfig {\n    return this._passwordStrengthMeterConfig;\n  }\n\n  /**\n   * Indica l'id dell'elemento HTML\n   */\n  @Input()\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    this._id = value;\n  }\n  private _id = `form-input-${identifier++}`;\n\n  /**\n   * Indica l'attributo name del componente HTML\n   */\n  @Input()\n  get name(): string {\n    return this._name;\n  }\n  set name(value: string) {\n    this._name = value;\n  }\n  private _name: string;\n\n  /**\n   * Indica il tipo di campo. Puo' assumere i valori text, email, password e number\n   */\n  @Input()\n  get type(): string {\n    return this._type;\n  }\n  set type(value: string) {\n    if (InputType.is(value)) {\n      if (value === INPUT_TYPES.NUMBER) {\n        if (isNaN(Number(this.value))) {\n          this.value = '';\n          this.onChange();\n        }\n      }\n      this._type = value;\n    } else {\n      this._type = INPUT_TYPES.TEXT;\n    }\n\n    this._isPasswordMode = this._type === INPUT_TYPES.PASSWORD;\n    this._isPasswordVisible = false;\n    this.showAutocompletion = false;\n  }\n  private _type = INPUT_TYPES.TEXT;\n\n  /**\n   * Indica il valore della label da visualizzare\n   */\n  @Input()\n  get label(): string { return this._label; }\n  set label(value: string) { this._label = value; }\n  private _label: string;\n\n  /**\n   * Indica se la label dell'input deve essere visualizzata dall'utente o solamente visibile per lo screen reader\n   */\n  @Input()\n  get labelVisuallyHidden(): boolean { return this._labelVisuallyHidden; }\n  set labelVisuallyHidden(value: boolean) { this._labelVisuallyHidden = value; }\n  private _labelVisuallyHidden: boolean = false;\n\n\n  /**\n   * Indica il valore che avrà l'attributo HTML \"min\" per l'input di tipo number\n   */\n  @Input()\n  get min(): number { return this._min; }\n  set min(value: number) { this._min = Util.coerceNumberProperty(value); }\n  private _min: number;\n   \n  /**\n   * Indica il valore che avrà l'attributo HTML \"max\" per l'input di tipo number\n   */\n  @Input()\n  get max(): number { return this._max; }\n  set max(value: number) { this._max = Util.coerceNumberProperty(value); }\n  private _max: number;\n\n  /**\n   * Indica il valore che avrà l'attributo HTML \"step\" per l'input di tipo number\n   */\n  @Input()\n  get step(): number { return this._step; }\n  set step(value: number) { this._step = Util.coerceNumberProperty(value); }\n  private _step: number = 1;\n\n\n  /**\n   * Indica il testo di aiuto sotto la input\n   */\n  @Input()\n  get note(): string { return this._note; }\n  set note(value: string) { this._note = value; }\n  private _note: string;\n\n  /**\n   * Indica il testo presente nel campo vuoto. Nel caso sia già presente la label, il placeholder non verrà mostrato\n   */\n  @Input()\n  get placeholder(): string {\n    return this._placeholder || '';\n  }\n  set placeholder(value: string) { this._placeholder = value; }\n  private _placeholder: string;\n\n  /**\n   * Indica l'icona da visualizzare a sinistra del campo di input\n   */\n  @Input()\n  get icon(): string { return this._icon; }\n  set icon(value: string) { this._icon = value; }\n  private _icon: string;\n\n  /**\n   * Opzionale.\n   * Indica se il campo in questione è disabilitato.\n   * Accetta una espressione booleana o può essere usato come attributo senza valore\n   */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) { this._disabled = Util.coerceBooleanProperty(value); }\n  private _disabled = false;\n\n   /**\n   * Opzionale.\n   * Nel caso di input numerico, indica se il campo è una valuta.\n   * Accetta una espressione booleana o può essere usato come attributo senza valore\n   */\n  @Input()\n  get currency(): boolean { return this._currency; }\n  set currency(value: boolean) { this._currency = Util.coerceBooleanProperty(value); }\n  private _currency = false;\n\n   /**\n   * Opzionale.\n   * Nel caso di input numerico, indica se il campo è una percentuale.\n   * Accetta una espressione booleana o può essere usato come attributo senza valore\n   */\n  @Input()\n  get percentage(): boolean { return this._percentage; }\n  set percentage(value: boolean) { this._percentage = Util.coerceBooleanProperty(value); }\n  private _percentage = false;\n\n  /**\n   * Opzionale.\n   * Nel caso di input numerico, indica se il campo si deve ridimensionare automaticamente a seconda del valore contenuto in esso.\n   * Accetta una espressione booleana o può essere usato come attributo senza valore\n   */\n  @Input()\n  get adaptive(): boolean { return this._adaptive; }\n  set adaptive(value: boolean) { this._adaptive = Util.coerceBooleanProperty(value); }\n  private _adaptive = false;\n\n  /**\n   * Opzionale.\n   * Indica se il campo in questione è di sola lettura.\n   * Accetta una espressione booleana o può essere usato come attributo senza valore\n   */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = Util.coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  get value(): any { return this._inputElement?.nativeElement?.value; }\n  set value(value: any) { \n    if(this._inputElement) {\n      this._inputElement.nativeElement.value = value;\n    } \n  }\n\n  /**\n   * Opzionale.\n   * Disponibile solo se il type è search.\n   * Indica la lista di elementi ricercabili su cui basare il sistema di autocompletamento della input\n   */\n  @Input()\n  get autoCompleteData(): Array<AutoCompleteItem> { return this._autoCompleteData; }\n  set autoCompleteData(value: Array<AutoCompleteItem>) { this._autoCompleteData = value; }\n  private _autoCompleteData: Array<AutoCompleteItem>;\n\n  /**\n   * Evento emesso quando il valore dell'input cambia.\n   * Gli eventi di change sono emessi soltanto quando il valore cambia a causa dell'interazione dell'utente\n   * con il campo d'input.\n   */\n  @Output()\n  readonly change: EventEmitter<FormInputChange> = new EventEmitter<FormInputChange>();\n\n  /**\n   * Opzionale.\n   * Indica se disabilitare l'avviso di CAPS LOCK attivo\n   * Accetta una espressione booleana o può essere usato come attributo senza valore\n   */\n  @Input()\n  get disableCapsLockAlert(): boolean { return this._disableCapsLockAlert; }\n  set disableCapsLockAlert(value: boolean) { this._disableCapsLockAlert = Util.coerceBooleanProperty(value); }\n  private _disableCapsLockAlert = false;\n\n  /**\n   * Indica se è attivo il CAPS LOCK\n   */\n  isCapsLockActive = false;\n\n  /**\n   * La label da mostrare in caso sia attivo il CAPS LOCK\n   */\n  @Input() capsLockActiveLabel = 'CAPS LOCK inserito';\n\n  get isLabelActive() {\n    return this._isLabelActive;\n  }\n  set isLabelActive(value: boolean) {\n    const newValue = Util.coerceBooleanProperty(value);\n   \n    // In alcuni casi la label deve essere sempre posizionata sopra l'input per evitare sovrapposizioni \n    // di testo, come in caso di presenza del placeholder o per l'input di tipo \"date\" o \"time\"\n    if(newValue || (!this.value && !this.placeholder && this.type !== INPUT_TYPES.TIME && \n                    this.type !== INPUT_TYPES.DATE && this.type !== INPUT_TYPES.NUMBER)) {\n      this._isLabelActive = newValue;\n    } else {\n      this._isLabelActive = true;\n    }\n  }\n  private _isLabelActive: boolean;\n\n\n  get isPasswordMode() {\n    return this._isPasswordMode;\n  }\n  set isPasswordMode(value: boolean) {\n    this._isPasswordMode = Util.coerceBooleanProperty(value);\n  }\n  private _isPasswordMode = false;\n\n  get isPasswordVisible() {\n    return this._isPasswordVisible;\n  }\n  set isPasswordVisible(value: boolean) {\n    this._isPasswordVisible = Util.coerceBooleanProperty(value);\n    this._type = this._isPasswordVisible ? INPUT_TYPES.TEXT : INPUT_TYPES.PASSWORD;\n  }\n  private _isPasswordVisible = false;\n\n  showAutocompletion = false;\n  private _isInitialized = false;\n  private _controlValueAccessorChangeFn: (value: any) => void = () => { };\n  private _onTouched: () => any = () => { };\n\n  /** Indica se è stato effettuato il focus sul campo di input */\n  focus: boolean = false;\n\n  private _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new FormInputChange(this, this.value));\n    }\n  }\n\n  ngOnInit(): void {\n    this.isLabelActive = false;\n    this._formInputPasswordUtils = new FormInputPasswordUtils(this.passwordStrengthMeterConfig);\n  }\n\n\n  writeValue(value: any): void {\n    this.value = value;\n    if (this.value) {\n      this.isLabelActive = true;\n    }\n\n    this.onChange();\n    if (this._isInitialized) {\n      this._changeDetector.detectChanges();\n    }\n  }\n\n  registerOnChange(fn: (value: any) => void): void {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n\n  ngAfterContentInit(): void {\n    this._isInitialized = true;\n\n    // Run change detection if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes,\n          this._textPrefixChildren.changes, this._textSuffixChildren.changes\n    ).subscribe(() => {\n      this._changeDetector.markForCheck();\n    });\n    \n  }\n\n  onChange() {\n    this._emitChangeEvent();\n    this._controlValueAccessorChangeFn(this.value);\n  }\n\n  onInput() {\n    if(this.isPasswordMode && this._enablePasswordStrengthMeter) {\n      this.recalculatePasswordStrength();\n    }\n\n    this.showAutocompletion = this._type === INPUT_TYPES.SEARCH && this.isAutocompletable() && this.value;\n   \n    this._emitChangeEvent();\n    this._controlValueAccessorChangeFn(this.value);\n  }\n\n  onFocus() {\n    this.focus = true;\n    this.isLabelActive = true;\n  }\n\n  onBlur() {\n    this.focus = false;\n    const inputValue: string = this.value;\n    if (!inputValue || inputValue.length === 0) {\n     \n      this.isLabelActive = false;\n      \n      if (this.type === INPUT_TYPES.NUMBER) {\n        this.value = '';\n      }\n    }\n  }\n\n  get noteId() {\n    return `${this.id}-note`;\n  }\n\n  getRelatedEntries() {\n    if (this.value) {\n      const lowercaseValue = this.value.toLowerCase();\n      const lowercaseData = this._autoCompleteData.filter((item) => item.value).map(item => {\n        return { ...item, original : item.value, lowercase : item.value.toLowerCase() };\n      });\n\n      const relatedEntries = [];\n      lowercaseData.forEach(lowercaseEntry => {\n        const matching = (lowercaseEntry.lowercase).includes(lowercaseValue);\n        if (matching) {\n          relatedEntries.push(lowercaseEntry);\n        }\n      });\n\n      return relatedEntries;\n    } else {\n      return [];\n    }\n  }\n\n  isAutocompletable() {\n    if (this._autoCompleteData && this._type === INPUT_TYPES.SEARCH) {\n      return this._autoCompleteData.length > 0;\n    } else {\n      return false;\n    }\n  }\n\n  onEntryClick(entry: AutoCompleteItem, event: Event) {\n    // Se non è stato definito un link associato all'elemento dell'autocomplete, probabilmente il desiderata \n    // non è effettuare la navigazione al default '#', pertanto in tal caso meglio annullare la navigazione.\n    if(!entry.link) {\n      event.preventDefault();\n    }\n    this.value = entry.value;\n    this.showAutocompletion = false;\n    this.onChange();\n  }\n\n  /**\n   * indica se il campo di input è composto da altri elementi accessori come \n   * icone o bottoni da posizionare adiacenti al campo di input\n   */\n  get isInputGroup(): boolean {\n    return  this._textPrefixChildren.length > 0 || this._prefixChildren.length > 0 || !!this.icon \n            || this._suffixChildren.length > 0 || this._textSuffixChildren.length > 0;\n  }\n\n\n  /**\n   * Ricalcola il punteggio di sicurezza in base al valore corrente\n   */\n  recalculatePasswordStrength(): void {\n    this.passwordScore = this._formInputPasswordUtils.calculateScore(this.value);\n  }\n  \n\n  get passwordScoreText(): string {\n    return this._formInputPasswordUtils.scoreText(this.passwordScore);\n  }\n\n  get passwordScoreColor(): string {\n    return this._formInputPasswordUtils.scoreColor(this.passwordScore);\n  }\n\n  get valueLength(): number {\n    if(!this.value) {\n      return 0;\n    }\n    return (this.value as string | number).toString().length;\n  }\n \n\n  @HostListener('window:click', ['$event'])\n  @HostListener('window:keydown', ['$event'])\n  @HostListener('window:keyup', ['$event'])\n  onKeyUp(event: KeyboardEvent): void {\n    this.isCapsLockActive = event.getModifierState && event.getModifierState('CapsLock');\n  }\n\n\n  autocompleteItemTrackByValueFn(index: number, item: AutoCompleteItem) {\n    return item.value;\n  }\n\n\n  /**\n   * Incrementa il valore dell'input numerico di tanto quanto vale lo step\n   */\n  incrementNumberValue(): void {\n    if(this.type === INPUT_TYPES.NUMBER) {\n      const tempValue = +this.value + this.step;\n      if(this.max === undefined || tempValue <= this.max) {\n        this.value = tempValue;\n      }\n    }\n  }\n\n  /**\n   * Decrementa il valore dell'input numerico di tanto quanto vale lo step\n   */\n  decrementNumberValue(): void {\n    if(this.type === INPUT_TYPES.NUMBER ) {\n      const tempValue = +this.value - this.step;\n      if(this.min === undefined || tempValue >= this.min) {\n        this.value = tempValue;\n      }\n    }\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "source",
                        "type": "FormInputComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "source",
                        "type": "FormInputComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "source",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormInputComponent",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FormInputPasswordUtils",
            "id": "class-FormInputPasswordUtils-e093e6668974a904d23d4f7654ea1dfdeac59400611ae4885ae601a8542509db4d3b6e067b03c4a96df9c4a5eff85f669af0f624411a1627606fa1b71a5d28a9",
            "file": "projects/design-angular-kit/src/lib/form-input/form-input-password.utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { PasswordStrengthMeterConfig } from \"./form-input.component\"\n\n/**\n * Classe di utility creata sulla base del seguente sorgente di bootstrap-italia: https://github.com/italia/bootstrap-italia/blob/main/src/js/plugins/input-password.js\n * TODO: Da sostituire una volta che i metodi scoreText, scoreColor, e calculateScore \n * saranno importabili dalla libreria bootstrap-italia.\n */\nexport class FormInputPasswordUtils {\n\n  public static readonly DEFAULT_CONFIG =  {\n    shortPass: 'Password molto debole',\n    badPass: 'Password debole',\n    goodPass: 'Password sicura',\n    strongPass: 'Password molto sicura',\n    enterPass: 'Inserisci almeno 8 caratteri e una lettera maiuscola',\n    alertCaps: 'CAPS LOCK inserito',\n    showText: true,\n    minimumLength: 4,\n  };\n\n  constructor(private _config: PasswordStrengthMeterConfig) {}\n\n    /**\n   * Returns a value between -1 and 100 to score\n   * the user's password.\n   *\n   * @param  string password The password to be checked.\n   * @return int\n   */\n  public calculateScore(password: string) {\n    var score = 0\n\n    // empty password\n    if (password.trim().length === 0) {\n      return -2\n    }\n\n    // password < this._config.minimumLength\n    if (password.length < this._config.minimumLength) {\n      return -1\n    }\n\n    // password length\n    score += password.length * 4\n    score += this._checkRepetition(1, password).length - password.length\n    score += this._checkRepetition(2, password).length - password.length\n    score += this._checkRepetition(3, password).length - password.length\n    score += this._checkRepetition(4, password).length - password.length\n\n    // password has 3 numbers\n    if (password.match(/(.*[0-9].*[0-9].*[0-9])/)) {\n      score += 5\n    }\n\n    // password has at least 2 sybols\n    let symbols: RegExp | string = '.*[!,@,#,$,%,^,&,*,?,_,~]';\n    symbols = new RegExp('(' + symbols + symbols + ')')\n    if (password.match(symbols)) {\n      score += 5\n    }\n\n    // password has Upper and Lower chars\n    if (password.match(/([a-z].*[A-Z])|([A-Z].*[a-z])/)) {\n      score += 10\n    }\n\n    // password has number and chars\n    if (password.match(/([a-zA-Z])/) && password.match(/([0-9])/)) {\n      score += 15\n    }\n\n    // password has number and symbol\n    if (password.match(/([!,@,#,$,%,^,&,*,?,_,~])/) && password.match(/([0-9])/)) {\n      score += 15\n    }\n\n    // password has char and symbol\n    if (password.match(/([!,@,#,$,%,^,&,*,?,_,~])/) && password.match(/([a-zA-Z])/)) {\n      score += 15\n    }\n\n    // password is just numbers or chars\n    if (password.match(/^\\w+$/) || password.match(/^\\d+$/)) {\n      score -= 10\n    }\n\n    if (score > 100) {\n      score = 100\n    }\n\n    if (score < 0) {\n      score = 0\n    }\n\n    return score\n  }\n\n  /**\n   * Checks for repetition of characters in\n   * a string\n   *\n   * @param int rLen Repetition length.\n   * @param string str The string to be checked.\n   * @return string\n   */\n  private _checkRepetition(rLen, str) {\n    var res = '',\n      repeated = false\n    for (var i = 0; i < str.length; i++) {\n      repeated = true\n      for (var j = 0; j < rLen && j + i + rLen < str.length; j++) {\n        repeated = repeated && str.charAt(j + i) === str.charAt(j + i + rLen)\n      }\n      if (j < rLen) {\n        repeated = false\n      }\n      if (repeated) {\n        i += rLen - 1\n        repeated = false\n      } else {\n        res += str.charAt(i)\n      }\n    }\n    return res\n  }\n\n  /**\n   * Returns strings based on the score given.\n   *\n   * @param int score Score base.\n   * @return string\n   */\n   public scoreText(score) {\n\n    if (score === -1) {\n      return this._config.shortPass;\n    } else if (score === -2) {\n      return this._config.enterPass;\n    }\n\n    score = score < 0 ? 0 : score\n\n    if (score < 26) {\n      return this._config.shortPass\n    }\n    if (score < 51) {\n      return this._config.badPass\n    }\n    if (score < 76) {\n      return this._config.goodPass\n    }\n\n    return this._config.strongPass\n  }\n\n  public scoreColor(score) {\n    if (score === -1) {\n      return 'danger'\n    }\n    if (score === -2) {\n      return 'muted'\n    }\n\n    score = score < 0 ? 0 : score\n\n    if (score < 26) {\n      return 'danger'\n    }\n    if (score < 51) {\n      return 'warning'\n    }\n    if (score < 76) {\n      return 'success'\n    }\n\n    return 'success'\n  }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_config",
                        "type": "PasswordStrengthMeterConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "_config",
                        "type": "PasswordStrengthMeterConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "DEFAULT_CONFIG",
                    "defaultValue": "{\n    shortPass: 'Password molto debole',\n    badPass: 'Password debole',\n    goodPass: 'Password sicura',\n    strongPass: 'Password molto sicura',\n    enterPass: 'Inserisci almeno 8 caratteri e una lettera maiuscola',\n    alertCaps: 'CAPS LOCK inserito',\n    showText: true,\n    minimumLength: 4,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "description": "<p>Classe di utility creata sulla base del seguente sorgente di bootstrap-italia: <a href=\"https://github.com/italia/bootstrap-italia/blob/main/src/js/plugins/input-password.js\">https://github.com/italia/bootstrap-italia/blob/main/src/js/plugins/input-password.js</a>\nTODO: Da sostituire una volta che i metodi scoreText, scoreColor, e calculateScore\nsaranno importabili dalla libreria bootstrap-italia.</p>\n",
            "rawdescription": "\n\nClasse di utility creata sulla base del seguente sorgente di bootstrap-italia: https://github.com/italia/bootstrap-italia/blob/main/src/js/plugins/input-password.js\nTODO: Da sostituire una volta che i metodi scoreText, scoreColor, e calculateScore\nsaranno importabili dalla libreria bootstrap-italia.\n",
            "methods": [
                {
                    "name": "_checkRepetition",
                    "args": [
                        {
                            "name": "rLen",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "str",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks for repetition of characters in\na string\n\n",
                    "description": "<p>Checks for repetition of characters in\na string</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "rLen",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "str",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 2910,
                                "end": 2916,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 105,
                                "escapedText": "return"
                            },
                            "comment": "<p>string</p>\n"
                        }
                    ]
                },
                {
                    "name": "calculateScore",
                    "args": [
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns a value between -1 and 100 to score\nthe user's password.\n\n",
                    "description": "<p>Returns a value between -1 and 100 to score\nthe user&#39;s password.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 990,
                                "end": 996,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 105,
                                "escapedText": "return"
                            },
                            "comment": "<p>int</p>\n"
                        }
                    ]
                },
                {
                    "name": "scoreColor",
                    "args": [
                        {
                            "name": "score",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"danger\" | \"muted\" | \"warning\" | \"success\"",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "score",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scoreText",
                    "args": [
                        {
                            "name": "score",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns strings based on the score given.\n\n",
                    "description": "<p>Returns strings based on the score given.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "score",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 3530,
                                "end": 3536,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 105,
                                "escapedText": "return"
                            },
                            "comment": "<p>string</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RadioChange",
            "id": "class-RadioChange-ab0a8ebae66165b1788d514410994e34c024aadca082a8b4fac18d45934ef0a733ce5c7acbd3ddab8f85fe3cc6987731487de0fe7542e693f6142f86b40281c1",
            "file": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  forwardRef,\n  ChangeDetectionStrategy,\n  AfterContentInit,\n  Directive,\n  ContentChildren,\n  QueryList,\n  OnInit,\n  OnDestroy,\n  Optional,\n  HostBinding\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { UniqueSelectionDispatcher } from './unique-selection-dispatcher';\n\nlet identifier = 0;\n\nfunction _coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n\nexport class RadioChange {\n  constructor(\n    public source: RadioButtonComponent,\n    public value: any\n  ) { }\n}\n\n@Directive({\n  selector: 'it-radio-group', // tslint:disable-line\n  exportAs: 'itRadioGroup',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioGroupDirective),\n    multi: true\n  }]\n})\nexport class RadioGroupDirective implements AfterContentInit, ControlValueAccessor {\n\n  @HostBinding('attr.role') role = 'radiogroup';\n\n  /**\n   * Il valore selezionato per il gruppo. Dovrebbe essere uguale al valore del radio button selezionato se\n   * *esiste* un radio button con un valore corrispondente. Se *non esiste* un radio button corrispondente\n   * questo valore persiste ed è applicato nel caso in cui un nuovo radio button viene aggiunto con il valore\n   * corrispondente.\n   */\n  private _value: any = null;\n\n  /** L'attributo HTML name da applicare ai radio button in questo gruppo */\n  private _name = `it-radio-group-${identifier++}`;\n\n  /** Il radio button attualmente selezionato. */\n  private _selected: RadioButtonComponent | null = null;\n\n  /** se `value` è stato settato al suo valore iniziale. */\n  private _isInitialized = false;\n\n  /** Se il radio group è disabilitato. */\n  private _disabled = false;\n\n\n\n  /**\n   * Evento emesso quando il valore del gruppo cambia.\n   * Gli eventi di change sono emessi soltanto quando il valore cambia a causa dell'interazione dell'utente\n   * con il radio button (stesso comportamento di `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<RadioChange> = new EventEmitter<RadioChange>();\n\n  /** radio buttons figli. */\n  @ContentChildren(forwardRef(() => RadioButtonComponent), { descendants: true }) _radios: QueryList<RadioButtonComponent>; // tslint:disable-line\n\n  /** Il metodo da chiamare per aggiornare ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => { };\n\n  onTouched: () => any = () => { };\n\n  /** Nome del gruppo di radio button. Tutti i radio button all'interno del gruppo avranno questo nome. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Valore del radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Il radio button selezionato. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: RadioButtonComponent | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Se il gruppo è disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = _coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef\n  ) { }\n\n  /**\n   * Inizializza le proprietà quando il contenuto dei figliè disponibile.\n   * Questo permette di propagare gli attributi rilevanti ai radio buttons associati.\n   */\n  ngAfterContentInit(): void {\n    this._isInitialized = true;\n  }\n\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Aggiorna il radio button `selected` a seconda del suo _value. */\n  private _updateSelectedRadioFromValue(): void {\n    this._selected = null;\n    this._radios.forEach(radio => {\n      radio.checked = this.value === radio.value;\n      if (radio.checked) {\n        this._selected = radio;\n      }\n    });\n  }\n\n  /** Invia l'evento change con la selezione corrente e il valore del gruppo. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new RadioChange(this._selected, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  writeValue(value: any): void {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  registerOnChange(fn: (value: any) => void): void {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n}\n\n/**\n * Un radio button con design bootstrap italia. Supporta tutte le funzionalità di una radio HTML5,\n * ed espone una API simile. Una `<it-radio-button>` può essere checked, unchecked, o disabled.\n */\n@Component({\n  selector: 'it-radio-button',\n  templateUrl: './radio.component.html',\n  styleUrls: ['./radio.component.scss'],\n  exportAs: 'itRadioButton',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RadioButtonComponent implements OnInit, OnDestroy {\n\n  id = `radio-${identifier++}`;\n\n  /** Attributo 'name' usato per raggruppare i radio button per un'unica selezione. */\n  @Input() name: string;\n\n  /** L'etichetta delradio button. */\n  @Input()\n  label: string;\n\n  /** se il radio button è checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = _coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Il valore di questo radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Se il radio button è disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = !!value;\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /**\n   * Evento emesso quando il valore `checked` del radio button cambia.\n   */\n  @Output() readonly change: EventEmitter<RadioChange> = new EventEmitter<RadioChange>();\n\n  /** Il radio group padre. Può essere presente o meno. */\n  radioGroup: RadioGroupDirective;\n\n  /** Se il radio button è checked. */\n  private _checked = false;\n\n  /** Se il radio button è disabled. */\n  private _disabled: boolean;\n\n  /** il valore assegnato al radio button. */\n  private _value: any = null;\n\n  private _removeUniqueSelectionListener: () => void = () => { };\n\n  constructor(\n    @Optional() radioGroup: RadioGroupDirective,\n    private _changeDetector: ChangeDetectorRef,\n    private _radioDispatcher: UniqueSelectionDispatcher\n  ) {\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /**\n   * Segna il radio button come da controllare per la change detection.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit(): void {\n    if (this.radioGroup) {\n      // Se il radio button è all'interno di un gruppo, determina se deve essere selezionato\n      this.checked = this.radioGroup.value === this._value;\n      // Copia il `name` del radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngOnDestroy() {\n    this._removeUniqueSelectionListener();\n  }\n\n  private _emitChangeEvent(): void {\n    this.change.emit(new RadioChange(this, this._value));\n  }\n\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "source",
                        "type": "RadioButtonComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "source",
                        "type": "RadioButtonComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "source",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RadioButtonComponent",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TabChangeEvent",
            "id": "class-TabChangeEvent-ea7ecc114ff52ce7982730e28f046104a6fab1a1571d6d790849e446a49cc3b4162d3c22104a6d9e17871de9eef3d3b199f40bf1384962f11ed00fab27b51e7b",
            "file": "projects/design-angular-kit/src/lib/tabs/tab-group.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\n  Component,\n  AfterContentInit,\n  ContentChildren,\n  QueryList,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  AfterContentChecked,\n  OnDestroy\n} from '@angular/core';\nimport { Subscription, merge } from 'rxjs';\nimport { Util } from '../util/util';\nimport { ItTabComponent } from './tab.component';\n\n/** Usato per generare ID univoci per ogni componente tab */\nlet nextId = 0;\n\n/** Un change event emesso ai cambi di selezione. */\nexport class TabChangeEvent {\n  /** Indice del tab selezionato. */\n  index: number;\n  /** Riferimento al tab selezionato. */\n  tab: ItTabComponent;\n}\n\n /**\n * Un componente tab-group con design bootstrap italia. Utilizzabile con il tag `<it-tab-group>`.\n *\n * Supporta al suo interno tab di base `<it-tab>` con una label e un contenuto.\n */\n@Component({\n  selector: 'it-tab-group',\n  exportAs: 'itTabGroup',\n  templateUrl: './tab-group.component.html',\n  styleUrls: ['./tab-group.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ItTabGroupComponent implements AfterContentInit, AfterContentChecked, OnDestroy {\n\n  @ContentChildren(ItTabComponent) _tabs: QueryList<ItTabComponent>;\n\n  /** L'indice del tab che dovrebbe essere selezionato dopo che il contenuto e' stato controllato */\n  private _indexToSelect: number | null = 0;\n\n  /** Subscription all'aggiunta e rimozione di tab. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription ai cambiamenti alle label dei tab. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Se le tab sono formattate come pill. */\n  @Input()\n  get pill(): boolean { return this._isPill; }\n  set pill(value) {\n    this._isPill = Util.coerceBooleanProperty(value);\n  }\n  private _isPill = false;\n\n\n  /** L'indice della tab attiva. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = Util.coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /**\n   * Se il tab-group ha un tema scuro\n   */\n  @Input()\n  get dark(): boolean { return this._dark; }\n  set dark(value) {\n    this._dark = Util.coerceBooleanProperty(value);\n  }\n  private _dark = false;\n\n  /** abilita il supporto al data-binding bidirezionale `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** emesso quando la selezione del tab cambia. */\n  @Output() readonly selectedTabChange: EventEmitter<TabChangeEvent> =\n      new EventEmitter<TabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {\n    this._groupId = nextId++;\n  }\n\n  /**\n   * Dopo che il contenuto è controllato, il componente conosce i tab che sono stati definiti\n   * e qual è l'indice del tab selezionato.\n   */\n  ngAfterContentChecked(): void {\n    this.changeTab(this._indexToSelect);\n  }\n\n  changeTab(newIndex: number): void {\n\n    // Non fissare `indexToSelect` immediatamente nel setter perchè può accadere che\n    // il numero di tab cambi prima che avvenga la change detection.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(newIndex);\n\n    // Se il nuovo tab è disabilitato, non fare niente\n    if (this._tabs && this._tabs.length > 0 && this._tabs.toArray()[indexToSelect].disabled) {\n      return;\n    }\n\n    if (this._selectedIndex !== indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emetto questo valore dopo che è partita la change detection\n      // dal momento che il contenuto controllato potrebbe contenere questa variabile\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setta la posizione per ogni tab.\n    this._tabs.forEach((tab: ItTabComponent, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._subscribeToTabLabels();\n\n    // Sottoscrivi al cambiamento nel numero di tab, così da\n    // poter ri-renderizzare il contenuto quando nuove tab vengono aggiunte o rimosse.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Mantieni il tab selezionato precedentemente se un nuovo tab è aggiunto o rimosso e non ci sono\n      // cambiamenti espliciti che selezionino un tab differente.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assegna `_indexToSelect` e `_selectedIndex` in modo da non emettere un change event\n            // per evitare al consumer loop infiniti in alcuni casi limite come ad esempio\n            // se si aggiunge un tab all'interno dell'evento `selectedIndexChange`.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy(): void {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  private _createChangeEvent(index: number): TabChangeEvent {\n    const event = new TabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Sottoscrivi a cambiamenti nelle label dei tab. Necessario perchè l'input per la label è sul TabComponent\n   * mentre il data binding è all'interno di TabGroupComponent. Per fare in modo che il binding sia aggiornato\n   * bisogna sottoscriversi ai cambiamenti e azionare la change detection in maniera manuale.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** fissa l'indice tra 0 e la dimensione dei tab. */\n  private _clampTabIndex(index: number | null): number {\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** ritorna un id univoco per ogni label di tab */\n  _getTabLabelId(i: number): string {\n    return `it-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** ritorna un id univoco per ogni elemento di contenuto del tab */\n  _getTabContentId(i: number): string {\n    return `it-tab-content-${this._groupId}-${i}`;\n  }\n\n  /** restituisce il tabIndex del tab. */\n  _getTabIndex(tab: ItTabComponent, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n\n  _handleClick($event: Event, index: number): void {\n    $event.preventDefault();\n    this.changeTab(index);\n  }\n\n}\n",
            "properties": [
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Indice del tab selezionato.</p>\n",
                    "line": 25,
                    "rawdescription": "\nIndice del tab selezionato."
                },
                {
                    "name": "tab",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItTabComponent",
                    "optional": false,
                    "description": "<p>Riferimento al tab selezionato.</p>\n",
                    "line": 27,
                    "rawdescription": "\nRiferimento al tab selezionato."
                }
            ],
            "description": "<p>Un change event emesso ai cambi di selezione.</p>\n",
            "rawdescription": "\nUn change event emesso ai cambi di selezione.",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ToggleChange",
            "id": "class-ToggleChange-1373773a1ec1ce2b67d2ffc98987acf20689643bd4191d56039cf3391d0b26f5501107cdaa83b9f21c4101c7aabeeaaf025161216d4c7633c1fb227da1477f7c",
            "file": "projects/design-angular-kit/src/lib/toggle/toggle.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, Input, Output, EventEmitter, ChangeDetectorRef, forwardRef, ChangeDetectionStrategy } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nlet identifier = 0;\n\nexport class ToggleChange {\n  source: ToggleComponent;\n  checked: boolean;\n}\n\n/**\n * Una toggle con design bootstrap italia. Supporta tutte le funzionalità di una checkbox HTML5,\n * ed espone una API simile. Una `<it-toggle>` può essere checked, unchecked, o disabled.\n */\n@Component({\n  selector: 'it-toggle',\n  templateUrl: './toggle.component.html',\n  styleUrls: ['./toggle.component.css'],\n  providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ToggleComponent), multi: true }],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ToggleComponent implements ControlValueAccessor {\n  /**\n   * Se la toggle è selezionata.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value !== this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked = false;\n\n  /**\n   * L'etichetta della toggle.\n   */\n  @Input()\n  label: string;\n\n  /**\n   * Se la toggle è disabilitata.\n   */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    if (value !== this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled = false;\n\n  /**\n   * Evento emesso quando il valore `checked` della toggle cambia.\n   */\n  @Output() readonly change: EventEmitter<ToggleChange> =\n    new EventEmitter<ToggleChange>();\n\n    inputId = `toggle-${identifier++}`;\n\n  private _onTouched: () => any = () => {};\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => { };\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef\n  ) { }\n\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  handleChange(event: Event) {\n    event.stopPropagation();\n    if (!this.disabled) {\n      this._toggle();\n      this._emitChangeEvent();\n    }\n  }\n\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  private _emitChangeEvent() {\n    const event = new ToggleChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n}\n",
            "properties": [
                {
                    "name": "checked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "source",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ToggleComponent",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Util",
            "id": "class-Util-95d133915d98fbae04eec0f232f970f8d2c1bb9f49e30c013c5cd11522a13b6b21a5948058347e845aa92443c7a088871fd72369033f9db630d38c06305e3aac",
            "file": "projects/design-angular-kit/src/lib/util/util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Util {\n  static coerceBooleanProperty(value: any): boolean {\n    return value != null && `${value}` !== 'false';\n  }\n\n  static coerceNumberProperty(value: any, fallbackValue = 0): number {\n    return Util._isNumberValue(value) ? Number(value) : fallbackValue;\n  }\n\n  static _isNumberValue(value: any): boolean {\n    return !isNaN(parseFloat(value as any)) && !isNaN(Number(value));\n\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "_isNumberValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "coerceBooleanProperty",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "coerceNumberProperty",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fallbackValue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fallbackValue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "BadgeDirective",
            "id": "directive-BadgeDirective-a233592ce4467154bc999944b6487b65b8b39279cf87998819f094bd16afd637c4bb2e0010a3ab027dea6575634fb3bff06aa96f76159ceedc7195d9dce3a84b",
            "file": "projects/design-angular-kit/src/lib/badge/badge.directive.ts",
            "type": "directive",
            "description": "<p>Una badge con design bootstrap italia.</p>\n",
            "rawdescription": "\n\nUna badge con design bootstrap italia.\n",
            "sourceCode": "import { Directive, ElementRef, Input, HostBinding } from '@angular/core';\nimport { ThemeColor, THEME_COLORS } from '../models/ThemeColor';\nimport { Util } from '../util/util';\n\n/**\n * Una badge con design bootstrap italia.\n */\n@Directive({\n  selector: '[itBadge]', // tslint:disable-line\n  exportAs: 'itBadge'\n})\nexport class BadgeDirective {\n\n  /**\n   * (Opzionale) indica il colore del badge. Può essere `primary`, `secondary`, `danger`, `warning`, `info`, `success`, `light` o `dark`.\n   * Se non viene fornito o il valore è diverso da quelli previsti il suo valore di default è `light`.\n   */\n  @Input()\n  get badgeColor(): any {\n    return this._badgeColor;\n  }\n  set badgeColor(value: any) {\n    if (ThemeColor.is(value)) {\n      this._badgeColor = value;\n    } else {\n      this._badgeColor = THEME_COLORS.LIGHT;\n    }\n  }\n  private _badgeColor = THEME_COLORS.LIGHT;\n\n  /**\n   * La direttiva che abilita l'elemento come badge. Mostra il testo come contenuto del badge.\n   * Se valutato ad `undefined`, `null` o stringa vuota il badge non viene mostrato.\n   */\n  @Input('itBadge')\n  @HostBinding('innerText')\n  get badgeText(): string { return this._badgeText; }\n  set badgeText(value: string) {\n    if (value) {\n      this._badgeText = value;\n    } else {\n      this._badgeText = '';\n    }\n  }\n  private _badgeText = '';\n\n  private _isPill = false;\n  /**\n   * Indica se il badge è arrotondato o meno.\n   */\n  @Input()\n  get isPill(): boolean { return this._isPill; }\n  set isPill(value: boolean) {\n    this._isPill = Util.coerceBooleanProperty(value);\n  }\n\n  private getBadgeColorClassName(): string {\n    return `bg-${this._badgeColor}`;\n  }\n\n  @HostBinding('class')\n  get hostClasses(): string {\n    return [\n      'badge',\n      this.getBadgeColorClassName(),\n      this.isPill ? 'rounded-pill' : '',\n    ].join(' ');\n  }\n\n  constructor(private el: ElementRef) { }\n\n}\n",
            "selector": "[itBadge]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "badgeColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n(Opzionale) indica il colore del badge. Può essere `primary`, `secondary`, `danger`, `warning`, `info`, `success`, `light` o `dark`.\nSe non viene fornito o il valore è diverso da quelli previsti il suo valore di default è `light`.\n",
                    "description": "<p>(Opzionale) indica il colore del badge. Può essere <code>primary</code>, <code>secondary</code>, <code>danger</code>, <code>warning</code>, <code>info</code>, <code>success</code>, <code>light</code> o <code>dark</code>.\nSe non viene fornito o il valore è diverso da quelli previsti il suo valore di default è <code>light</code>.</p>\n",
                    "line": 19,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "isPill",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica se il badge è arrotondato o meno.\n",
                    "description": "<p>Indica se il badge è arrotondato o meno.</p>\n",
                    "line": 52,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "itBadge",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLa direttiva che abilita l'elemento come badge. Mostra il testo come contenuto del badge.\nSe valutato ad `undefined`, `null` o stringa vuota il badge non viene mostrato.\n",
                    "description": "<p>La direttiva che abilita l&#39;elemento come badge. Mostra il testo come contenuto del badge.\nSe valutato ad <code>undefined</code>, <code>null</code> o stringa vuota il badge non viene mostrato.</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_badgeColor",
                    "defaultValue": "THEME_COLORS.LIGHT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_badgeText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_isPill",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getBadgeColorClassName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 68,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "badgeColor": {
                    "name": "badgeColor",
                    "setSignature": {
                        "name": "badgeColor",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 22,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "badgeColor",
                        "type": "any",
                        "returnType": "any",
                        "line": 19,
                        "rawdescription": "\n\n(Opzionale) indica il colore del badge. Può essere `primary`, `secondary`, `danger`, `warning`, `info`, `success`, `light` o `dark`.\nSe non viene fornito o il valore è diverso da quelli previsti il suo valore di default è `light`.\n",
                        "description": "<p>(Opzionale) indica il colore del badge. Può essere <code>primary</code>, <code>secondary</code>, <code>danger</code>, <code>warning</code>, <code>info</code>, <code>success</code>, <code>light</code> o <code>dark</code>.\nSe non viene fornito o il valore è diverso da quelli previsti il suo valore di default è <code>light</code>.</p>\n"
                    }
                },
                "badgeText": {
                    "name": "badgeText",
                    "setSignature": {
                        "name": "badgeText",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 38,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "badgeText",
                        "type": "string",
                        "returnType": "string",
                        "line": 37,
                        "rawdescription": "\n\nLa direttiva che abilita l'elemento come badge. Mostra il testo come contenuto del badge.\nSe valutato ad `undefined`, `null` o stringa vuota il badge non viene mostrato.\n",
                        "description": "<p>La direttiva che abilita l&#39;elemento come badge. Mostra il testo come contenuto del badge.\nSe valutato ad <code>undefined</code>, <code>null</code> o stringa vuota il badge non viene mostrato.</p>\n"
                    }
                },
                "isPill": {
                    "name": "isPill",
                    "setSignature": {
                        "name": "isPill",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 53,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "isPill",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 52,
                        "rawdescription": "\n\nIndica se il badge è arrotondato o meno.\n",
                        "description": "<p>Indica se il badge è arrotondato o meno.</p>\n"
                    }
                },
                "hostClasses": {
                    "name": "hostClasses",
                    "getSignature": {
                        "name": "hostClasses",
                        "type": "string",
                        "returnType": "string",
                        "line": 62
                    }
                }
            }
        },
        {
            "name": "FocusMouseDirective",
            "id": "directive-FocusMouseDirective-d95117b20361bbc49489a73e7111d085317afea9e9885413507944df3742337cf2f0b8484815213bfa9da89ec510b742416614385c0f56ca687988583adec465",
            "file": "projects/design-angular-kit/src/lib/util/focus-mouse.directive.ts",
            "type": "directive",
            "description": "<p>Aggiunge la classe &quot;focus--mouse&quot; quando viene effettuato il focus sull&#39;elemento a cui è applicata la direttiva</p>\n",
            "rawdescription": "\n\nAggiunge la classe \"focus--mouse\" quando viene effettuato il focus sull'elemento a cui è applicata la direttiva\n",
            "sourceCode": "import { Directive, ElementRef, HostListener } from \"@angular/core\";\n\n\n/**\n * Aggiunge la classe \"focus--mouse\" quando viene effettuato il focus sull'elemento a cui è applicata la direttiva\n */\n@Directive({\n    selector: '[focusMouse]',\n    exportAs: 'focusMouse'\n\n})\nexport class FocusMouseDirective {\n    \n    constructor(private elementRef: ElementRef) {}\n    \n    \n    @HostListener('focus')\n    onFocus(): void {\n        (this.elementRef.nativeElement as HTMLElement).classList.add('focus--mouse');\n    }\n\n    @HostListener('blur')\n    onBlur(): void {\n        (this.elementRef.nativeElement as HTMLElement).classList.remove('focus--mouse');\n    }\n}",
            "selector": "[focusMouse]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "blur",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23
                },
                {
                    "name": "focus",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'blur'"
                        }
                    ]
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'focus'"
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ItButtonDirective",
            "id": "directive-ItButtonDirective-79ce2ff4f76c14dcbb69e33f70abf7f711162d55f6042dccdf23a3c381184d3ca03b5e52a29b3d37aec5b04fc781336c0a541efc1de72802491e86f922e2c9c4",
            "file": "projects/design-angular-kit/src/lib/button/button.directive.ts",
            "type": "directive",
            "description": "<p>Un bottone con design bootstrap italia. Supporta tutte le funzionalità di un bottone HTML5.</p>\n",
            "rawdescription": "\n\nUn bottone con design bootstrap italia. Supporta tutte le funzionalità di un bottone HTML5.\n",
            "sourceCode": "import { ChangeDetectorRef, ContentChild, ContentChildren, Directive, Host, HostBinding, HostListener, Input, Optional, QueryList } from '@angular/core';\nimport { ThemeColor } from '../models/ThemeColor';\nimport { ButtonSize } from '../models/ButtonSize';\nimport { Util } from '../util/util';\nimport { IconComponent } from '../icon/icon.component';\nimport { IconColorEnum } from '../enums/icons.enum';\nimport { ItDropdownToggle } from '../dropdown/dropdown.directive';\nimport { ProgressBarComponent } from '../progress-bar/progress-bar.component';\n\n\n/**\n * Un bottone con design bootstrap italia. Supporta tutte le funzionalità di un bottone HTML5.\n */\n@Directive({\n  selector: '[itButton]',\n  exportAs: 'itButton'\n})\nexport class ItButtonDirective {\n  private _isDropdownButton: boolean = false;\n  constructor(@Optional() @Host() dropdownToggle: ItDropdownToggle, private _cdr: ChangeDetectorRef) {\n    this._isDropdownButton = !!dropdownToggle;\n  }\n\n  private isLightColor(color: string): boolean {\n    return  color === IconColorEnum.light || color === IconColorEnum.info || \n            color === IconColorEnum.white;\n  }\n\n  @Input() autoUpdateIconColor = true;\n\n  @Input('itButton')\n  set color(value: any) {\n    if (ThemeColor.is(value)) {\n      this._color = value;\n    } else {\n      this._color = this._isDropdownButton ? \"dropdown\" : IconColorEnum.primary;\n    }\n    if(this.autoUpdateIconColor) {\n      this.updateButtonIconColor();\n    }\n  }\n  private _color;\n\n  private updateButtonIconColor() {\n    this.iconComponents?.forEach(icon => {\n      let newIconColor = IconColorEnum.primary;\n      if(this._color === \"dropdown\") {\n        newIconColor = IconColorEnum.primary;\n      } else if(this.isLightColor(this._color)) {\n        newIconColor = IconColorEnum.default;\n      } else {\n        newIconColor = IconColorEnum.white;\n      }\n      icon.changeColor(newIconColor);\n    });\n    \n  }\n\n  /**\n   * Stabilisce il colore del pulsante a seconda delle classi di bootstrap.\n   * Può avere valori:\n   * <ul>\n   * <li> primary\n   * <li> secondary\n   * <li> danger\n   * <li> warning\n   * <li> info\n   * <li> success\n   * <li> light\n   * <li> dark\n   * </ul>\n   */\n  get color(): any {\n    return this._color;\n  }\n\n\n  /**\n   * Se presente, il pulsante avrà un effetto di trasparenza e non reagirà al click\n   */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) { this._disabled = Util.coerceBooleanProperty(value); }\n  private _disabled = false;\n\n  private _onFocus = false;\n  @HostListener('focus')\n  onFocus() {\n    this._onFocus = true;\n  }\n\n  @HostListener('blur')\n  onBlur() {\n    this._onFocus = false;\n  }\n\n  @ContentChildren(IconComponent) iconComponents: QueryList<IconComponent>;\n  @ContentChild(ProgressBarComponent) progressBar: ProgressBarComponent;\n\n  /**\n   * Stabilisce se lo stile del pulsante avrà un contorno.\n   * Accetta una espressione booleana o può essere usato come attributo senza valore.\n   * Deve funzionare solo in congiunzione con un colore definito, altrimenti l'attributo viene ignorato.\n   */\n  @Input()\n  get outline(): boolean { return this._outline; }\n  set outline(value: boolean) { this._outline = Util.coerceBooleanProperty(value); }\n  private _outline = false;\n\n  /**\n   * Indica se il pulsante occupa tutta l'ampiezza a sua disposizione.\n   */\n  @Input()\n  get block(): boolean { return this._block; }\n  set block(value: boolean) { this._block = Util.coerceBooleanProperty(value); }\n  private _block = false;\n\n\n\n  \n\n  /**\n   * Indica la grandezza del pulsante. Può assumere i valori:\n   * <ul>\n   * <li> lg\n   * <li> sm\n   * <li> xs\n   * </ul>\n   */\n  @Input()\n  get size(): any {\n    return this._size;\n  }\n  set size(value: any) {\n    if (ButtonSize.is(value)) {\n      this._size = value;\n    } else {\n      this._size = undefined;\n    }\n  }\n  private _size;\n  \n  @HostBinding('class')\n  get hostClasses(): string {\n    let cssClass = 'btn';\n   \n    if (this.color) {\n      if (this.outline) {\n        cssClass += ` btn-outline-${this.color}`;\n      } else {\n        cssClass += ` btn-${this.color}`;\n      }\n    }\n\n    if (this.size) {\n      cssClass += ` btn-${this.size}`;\n    }\n\n    if (this.block) {\n      cssClass += ' btn-block';\n    }\n\n    if (this.disabled) {\n      cssClass += ' disabled';\n    }\n\n    if(this._onFocus) {\n      cssClass += ' focus--mouse';\n    }\n\n    if(this.iconComponents?.length && !this.progressBar) {\n      cssClass += ' btn-icon';\n    }\n\n    if(this.progressBar) {\n      cssClass += ' btn-progress';\n    }\n\n    return cssClass;\n  }\n\n\n}\n",
            "selector": "[itButton]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "autoUpdateIconColor",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "block",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica se il pulsante occupa tutta l'ampiezza a sua disposizione.\n",
                    "description": "<p>Indica se il pulsante occupa tutta l&#39;ampiezza a sua disposizione.</p>\n",
                    "line": 114,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSe presente, il pulsante avrà un effetto di trasparenza e non reagirà al click\n",
                    "description": "<p>Se presente, il pulsante avrà un effetto di trasparenza e non reagirà al click</p>\n",
                    "line": 82,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "itButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "outline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStabilisce se lo stile del pulsante avrà un contorno.\nAccetta una espressione booleana o può essere usato come attributo senza valore.\nDeve funzionare solo in congiunzione con un colore definito, altrimenti l'attributo viene ignorato.\n",
                    "description": "<p>Stabilisce se lo stile del pulsante avrà un contorno.\nAccetta una espressione booleana o può essere usato come attributo senza valore.\nDeve funzionare solo in congiunzione con un colore definito, altrimenti l&#39;attributo viene ignorato.</p>\n",
                    "line": 106,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica la grandezza del pulsante. Può assumere i valori:\n<ul>\n<li> lg\n<li> sm\n<li> xs\n</ul>\n",
                    "description": "<p>Indica la grandezza del pulsante. Può assumere i valori:</p>\n<ul>\n<li> lg\n<li> sm\n<li> xs\n</ul>\n",
                    "line": 131,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 144,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "blur",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93
                },
                {
                    "name": "focus",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 88
                }
            ],
            "propertiesClass": [
                {
                    "name": "_block",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 116,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_isDropdownButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_onFocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_outline",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 108,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 141,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "iconComponents",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<IconComponent>",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "IconComponent"
                        }
                    ]
                },
                {
                    "name": "progressBar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProgressBarComponent",
                    "optional": false,
                    "description": "",
                    "line": 98,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "ProgressBarComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "isLightColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'blur'"
                        }
                    ]
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'focus'"
                        }
                    ]
                },
                {
                    "name": "updateButtonIconColor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dropdownToggle",
                        "type": "ItDropdownToggle",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "dropdownToggle",
                        "type": "ItDropdownToggle",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "color": {
                    "name": "color",
                    "setSignature": {
                        "name": "color",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 32,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "color",
                        "type": "any",
                        "returnType": "any",
                        "line": 73,
                        "rawdescription": "\n\nStabilisce il colore del pulsante a seconda delle classi di bootstrap.\nPuò avere valori:\n<ul>\n<li> primary\n<li> secondary\n<li> danger\n<li> warning\n<li> info\n<li> success\n<li> light\n<li> dark\n</ul>\n",
                        "description": "<p>Stabilisce il colore del pulsante a seconda delle classi di bootstrap.\nPuò avere valori:</p>\n<ul>\n<li> primary\n<li> secondary\n<li> danger\n<li> warning\n<li> info\n<li> success\n<li> light\n<li> dark\n</ul>\n"
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 83,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 82,
                        "rawdescription": "\n\nSe presente, il pulsante avrà un effetto di trasparenza e non reagirà al click\n",
                        "description": "<p>Se presente, il pulsante avrà un effetto di trasparenza e non reagirà al click</p>\n"
                    }
                },
                "outline": {
                    "name": "outline",
                    "setSignature": {
                        "name": "outline",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 107,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "outline",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 106,
                        "rawdescription": "\n\nStabilisce se lo stile del pulsante avrà un contorno.\nAccetta una espressione booleana o può essere usato come attributo senza valore.\nDeve funzionare solo in congiunzione con un colore definito, altrimenti l'attributo viene ignorato.\n",
                        "description": "<p>Stabilisce se lo stile del pulsante avrà un contorno.\nAccetta una espressione booleana o può essere usato come attributo senza valore.\nDeve funzionare solo in congiunzione con un colore definito, altrimenti l&#39;attributo viene ignorato.</p>\n"
                    }
                },
                "block": {
                    "name": "block",
                    "setSignature": {
                        "name": "block",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 115,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "block",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 114,
                        "rawdescription": "\n\nIndica se il pulsante occupa tutta l'ampiezza a sua disposizione.\n",
                        "description": "<p>Indica se il pulsante occupa tutta l&#39;ampiezza a sua disposizione.</p>\n"
                    }
                },
                "size": {
                    "name": "size",
                    "setSignature": {
                        "name": "size",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 134,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "size",
                        "type": "any",
                        "returnType": "any",
                        "line": 131,
                        "rawdescription": "\n\nIndica la grandezza del pulsante. Può assumere i valori:\n<ul>\n<li> lg\n<li> sm\n<li> xs\n</ul>\n",
                        "description": "<p>Indica la grandezza del pulsante. Può assumere i valori:</p>\n<ul>\n<li> lg\n<li> sm\n<li> xs\n</ul>\n"
                    }
                },
                "hostClasses": {
                    "name": "hostClasses",
                    "getSignature": {
                        "name": "hostClasses",
                        "type": "string",
                        "returnType": "string",
                        "line": 144
                    }
                }
            }
        },
        {
            "name": "ItCollapseDirective",
            "id": "directive-ItCollapseDirective-708cedaf3c4b508d34993a18143072b05afbd31bd2429a7614ce389eb114c3020f5e4150ec9eb0f43dc77cfadf4322c0a3fa4561ac22119d8e538d7ac3afe48b",
            "file": "projects/design-angular-kit/src/lib/collapse/collapse.directive.ts",
            "type": "directive",
            "description": "<p>Per ottimizzare l’ingombro dei contenuti di una pagina si possono usare degli elementi richiudibili\n(in gergo definiti collassabili o collapse), che possono essere attivati indipendentemente l’uno dall’altro</p>\n",
            "rawdescription": "\n\nPer ottimizzare l’ingombro dei contenuti di una pagina si possono usare degli elementi richiudibili\n(in gergo definiti collassabili o collapse), che possono essere attivati indipendentemente l’uno dall’altro\n",
            "sourceCode": "import { Directive, Input, ElementRef, NgZone, OnInit, OnChanges, SimpleChanges, ChangeDetectorRef, Output, EventEmitter} from '@angular/core';\nimport { NgbCollapse } from '@ng-bootstrap/ng-bootstrap';\nimport { Util } from '../util/util';\nimport { ItCollapseConfig } from './collapse.config';\n\n/**\n * Per ottimizzare l’ingombro dei contenuti di una pagina si possono usare degli elementi richiudibili\n * (in gergo definiti collassabili o collapse), che possono essere attivati indipendentemente l’uno dall’altro\n */\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[itCollapse]',\n  exportAs: 'itCollapse'\n})\nexport class ItCollapseDirective extends NgbCollapse implements OnInit, OnChanges {\n  \n  constructor(private _cd: ChangeDetectorRef,  _elementRef: ElementRef<HTMLElement>, _config: ItCollapseConfig, _ngZone: NgZone) {\n      super(_elementRef, _config, _ngZone);\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n    super.collapsed = Util.coerceBooleanProperty(this.itCollapse);\n    super.ngbCollapseChange = this.itCollapseChange;   \n    this._cd.detectChanges();\n  }\n\n  ngOnChanges({itCollapse}: SimpleChanges): void {\n    const coercedValue = Util.coerceBooleanProperty(itCollapse.currentValue);\n    super.collapsed = coercedValue;\n    super.ngOnChanges({collapsed: itCollapse});\n   \n  }\n\n  /**\n   * La direttiva di collapse che opzionalmente contiene il predicato che ne stabilisce\n   * che sarà avvalorato a true quando il collapse è espanso, a false altrimenti\n   */\n  @Input() itCollapse:boolean;\n  @Output() itCollapseChange = new EventEmitter<boolean>();\n\n\n  get isCollapsed(): boolean {\n    return this.collapsed;\n  }\n\n  show(): void {\n    if(this.isCollapsed) {\n      super.toggle();\n    }\n  }\n\n  hide(): void {\n    if(!this.isCollapsed) {\n      super.toggle();\n    }\n  }\n}\n",
            "selector": "[itCollapse]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "itCollapse",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLa direttiva di collapse che opzionalmente contiene il predicato che ne stabilisce\nche sarà avvalorato a true quando il collapse è espanso, a false altrimenti\n",
                    "description": "<p>La direttiva di collapse che opzionalmente contiene il predicato che ne stabilisce\nche sarà avvalorato a true quando il collapse è espanso, a false altrimenti</p>\n",
                    "line": 39,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "itCollapseChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": "NgbCollapse",
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_config",
                        "type": "ItCollapseConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "_cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_config",
                        "type": "ItCollapseConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "isCollapsed": {
                    "name": "isCollapsed",
                    "getSignature": {
                        "name": "isCollapsed",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "ItDropdown",
            "id": "directive-ItDropdown-2f16bb455fab4bf8191676c099f308fd5873a5f4e6a9664283bc317b8fee55b6d6967d5d52f4bc0ac69589f427d6d9938b028e17542778fc203c19d7d81c284f",
            "file": "projects/design-angular-kit/src/lib/dropdown/dropdown.directive.ts",
            "type": "directive",
            "description": "<p>A directive that provides contextual overlays for displaying lists of links and more.</p>\n",
            "rawdescription": "\n\nA directive that provides contextual overlays for displaying lists of links and more.\n",
            "sourceCode": "import {\n  ChangeDetectorRef,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  NgZone,\n  AfterContentInit,\n  OnDestroy,\n  Output,\n  QueryList,\n  Renderer2,\n  SimpleChanges,\n  Optional,\n  OnChanges,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport { NgbDropdown, NgbDropdownAnchor, NgbDropdownItem, NgbDropdownMenu, NgbDropdownToggle, NgbNavbar } from '@ng-bootstrap/ng-bootstrap';\nimport { ItDropdownConfig } from './dropdown.config';\n\n@Directive({selector: '.navbar'})\nexport class ItNavbar extends NgbNavbar {\n}\n\n/**\n * A directive you should put on a dropdown item to enable keyboard navigation.\n * Arrow keys will move focus between items marked with this directive.\n *\n * @since 4.1.0\n */\n@Directive({\n  selector: '[itDropdownItem]'\n})\nexport class ItDropdownItem extends NgbDropdownItem {\n  constructor(elementRef: ElementRef<HTMLElement>, _renderer: Renderer2) {\n    super(elementRef, _renderer);\n  }\n}\n\n/**\n * A directive that wraps dropdown menu content and dropdown items.\n */\n@Directive({\n  selector: '[itDropdownMenu]',\n  host: {\n    '[attr.data-popper-placement]': 'placement'\n  }\n})\nexport class ItDropdownMenu extends NgbDropdownMenu implements AfterContentInit {\n  @ContentChildren(ItDropdownItem) menuItems: QueryList<ItDropdownItem>;\n\n  constructor(\n      @Inject(forwardRef(() => ItDropdown)) public dropdown: ItDropdown, _elementRef: ElementRef<HTMLElement>) {\n        super(dropdown, _elementRef);\n    }\n\n  ngAfterContentInit(): void {\n    super.menuItems = this.menuItems;\n  }\n\n\n\n}\n\n/**\n * A directive to mark an element to which dropdown menu will be anchored.\n *\n * This is a simple version of the `NgbDropdownToggle` directive.\n * It plays the same role, but doesn't listen to click events to toggle dropdown menu thus enabling support\n * for events other than click.\n *\n * @since 1.1.0\n */\n@Directive(\n    {selector: '[itDropdownAnchor]'})\nexport class ItDropdownAnchor extends NgbDropdownAnchor {\n  constructor(\n      @Inject(forwardRef(() => ItDropdown)) public dropdown: ItDropdown, _elementRef: ElementRef<HTMLElement>) {\n        super(dropdown, _elementRef)\n  }\n}\n\n/**\n * A directive to mark an element that will toggle dropdown via the `click` event.\n *\n * You can also use `NgbDropdownAnchor` as an alternative.\n */\n@Directive({\n  selector: '[itDropdownToggle]',\n  host: {\n    '[class]': 'placement'\n  },\n  providers: [{provide: ItDropdownAnchor, useExisting: forwardRef(() => ItDropdownToggle)}]\n})\nexport class ItDropdownToggle extends NgbDropdownToggle {\n  constructor(@Inject(forwardRef(() => ItDropdown)) public dropdown: ItDropdown, elementRef: ElementRef<HTMLElement>) {\n    super(dropdown, elementRef);\n  }\n}\n\n/**\n * A directive that provides contextual overlays for displaying lists of links and more.\n */\n@Directive({selector: '[itDropdown]', exportAs: 'itDropdown'})\nexport class ItDropdown extends NgbDropdown implements AfterContentInit, OnChanges, OnDestroy {\n\n  @ContentChild(ItDropdownMenu, {static: false}) _itMenu: ItDropdownMenu;\n  @ContentChild(ItDropdownAnchor, {static: false}) _itAnchor: ItDropdownAnchor;\n\n  /**\n   * An event fired when the dropdown is opened or closed.\n   *\n   * The event payload is a `boolean`:\n   * * `true` - the dropdown was opened\n   * * `false` - the dropdown was closed\n   */\n  @Output() openChange = new EventEmitter<boolean>();\n\n  constructor(\n      _changeDetector: ChangeDetectorRef, config: ItDropdownConfig,\n      @Inject(DOCUMENT) _document: any, _ngZone: NgZone, _elementRef: ElementRef<HTMLElement>,\n      _renderer: Renderer2, @Optional() itNavbar: ItNavbar) {\n        super(_changeDetector, config, _document, _ngZone, _elementRef, _renderer, itNavbar);\n  }\n\n  ngAfterContentInit() {\n    super[\"_menu\"] = this._itMenu;\n    super[\"_anchor\"] = this._itAnchor;\n\n    super.ngAfterContentInit();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    super.ngOnChanges(changes);\n  }\n\n  ngOnDestroy() { super.ngOnDestroy(); }\n\n}",
            "selector": "[itDropdown]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "openChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAn event fired when the dropdown is opened or closed.\n\nThe event payload is a `boolean`:\n* `true` - the dropdown was opened\n* `false` - the dropdown was closed\n",
                    "description": "<p>An event fired when the dropdown is opened or closed.</p>\n<p>The event payload is a <code>boolean</code>:</p>\n<ul>\n<li><code>true</code> - the dropdown was opened</li>\n<li><code>false</code> - the dropdown was closed</li>\n</ul>\n",
                    "line": 121,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_itAnchor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItDropdownAnchor",
                    "optional": false,
                    "description": "",
                    "line": 112,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "ItDropdownAnchor, {static: false}"
                        }
                    ]
                },
                {
                    "name": "_itMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItDropdownMenu",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "ItDropdownMenu, {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": "NgbDropdown",
            "implements": [
                "AfterContentInit",
                "OnChanges",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "config",
                        "type": "ItDropdownConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "itNavbar",
                        "type": "ItNavbar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 121,
                "jsdoctags": [
                    {
                        "name": "_changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "config",
                        "type": "ItDropdownConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "itNavbar",
                        "type": "ItNavbar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ItDropdownAnchor",
            "id": "directive-ItDropdownAnchor-2f16bb455fab4bf8191676c099f308fd5873a5f4e6a9664283bc317b8fee55b6d6967d5d52f4bc0ac69589f427d6d9938b028e17542778fc203c19d7d81c284f",
            "file": "projects/design-angular-kit/src/lib/dropdown/dropdown.directive.ts",
            "type": "directive",
            "description": "<p>A directive to mark an element to which dropdown menu will be anchored.</p>\n<p>This is a simple version of the <code>NgbDropdownToggle</code> directive.\nIt plays the same role, but doesn&#39;t listen to click events to toggle dropdown menu thus enabling support\nfor events other than click.</p>\n",
            "rawdescription": "\n\nA directive to mark an element to which dropdown menu will be anchored.\n\nThis is a simple version of the `NgbDropdownToggle` directive.\nIt plays the same role, but doesn't listen to click events to toggle dropdown menu thus enabling support\nfor events other than click.\n\n",
            "sourceCode": "import {\n  ChangeDetectorRef,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  NgZone,\n  AfterContentInit,\n  OnDestroy,\n  Output,\n  QueryList,\n  Renderer2,\n  SimpleChanges,\n  Optional,\n  OnChanges,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport { NgbDropdown, NgbDropdownAnchor, NgbDropdownItem, NgbDropdownMenu, NgbDropdownToggle, NgbNavbar } from '@ng-bootstrap/ng-bootstrap';\nimport { ItDropdownConfig } from './dropdown.config';\n\n@Directive({selector: '.navbar'})\nexport class ItNavbar extends NgbNavbar {\n}\n\n/**\n * A directive you should put on a dropdown item to enable keyboard navigation.\n * Arrow keys will move focus between items marked with this directive.\n *\n * @since 4.1.0\n */\n@Directive({\n  selector: '[itDropdownItem]'\n})\nexport class ItDropdownItem extends NgbDropdownItem {\n  constructor(elementRef: ElementRef<HTMLElement>, _renderer: Renderer2) {\n    super(elementRef, _renderer);\n  }\n}\n\n/**\n * A directive that wraps dropdown menu content and dropdown items.\n */\n@Directive({\n  selector: '[itDropdownMenu]',\n  host: {\n    '[attr.data-popper-placement]': 'placement'\n  }\n})\nexport class ItDropdownMenu extends NgbDropdownMenu implements AfterContentInit {\n  @ContentChildren(ItDropdownItem) menuItems: QueryList<ItDropdownItem>;\n\n  constructor(\n      @Inject(forwardRef(() => ItDropdown)) public dropdown: ItDropdown, _elementRef: ElementRef<HTMLElement>) {\n        super(dropdown, _elementRef);\n    }\n\n  ngAfterContentInit(): void {\n    super.menuItems = this.menuItems;\n  }\n\n\n\n}\n\n/**\n * A directive to mark an element to which dropdown menu will be anchored.\n *\n * This is a simple version of the `NgbDropdownToggle` directive.\n * It plays the same role, but doesn't listen to click events to toggle dropdown menu thus enabling support\n * for events other than click.\n *\n * @since 1.1.0\n */\n@Directive(\n    {selector: '[itDropdownAnchor]'})\nexport class ItDropdownAnchor extends NgbDropdownAnchor {\n  constructor(\n      @Inject(forwardRef(() => ItDropdown)) public dropdown: ItDropdown, _elementRef: ElementRef<HTMLElement>) {\n        super(dropdown, _elementRef)\n  }\n}\n\n/**\n * A directive to mark an element that will toggle dropdown via the `click` event.\n *\n * You can also use `NgbDropdownAnchor` as an alternative.\n */\n@Directive({\n  selector: '[itDropdownToggle]',\n  host: {\n    '[class]': 'placement'\n  },\n  providers: [{provide: ItDropdownAnchor, useExisting: forwardRef(() => ItDropdownToggle)}]\n})\nexport class ItDropdownToggle extends NgbDropdownToggle {\n  constructor(@Inject(forwardRef(() => ItDropdown)) public dropdown: ItDropdown, elementRef: ElementRef<HTMLElement>) {\n    super(dropdown, elementRef);\n  }\n}\n\n/**\n * A directive that provides contextual overlays for displaying lists of links and more.\n */\n@Directive({selector: '[itDropdown]', exportAs: 'itDropdown'})\nexport class ItDropdown extends NgbDropdown implements AfterContentInit, OnChanges, OnDestroy {\n\n  @ContentChild(ItDropdownMenu, {static: false}) _itMenu: ItDropdownMenu;\n  @ContentChild(ItDropdownAnchor, {static: false}) _itAnchor: ItDropdownAnchor;\n\n  /**\n   * An event fired when the dropdown is opened or closed.\n   *\n   * The event payload is a `boolean`:\n   * * `true` - the dropdown was opened\n   * * `false` - the dropdown was closed\n   */\n  @Output() openChange = new EventEmitter<boolean>();\n\n  constructor(\n      _changeDetector: ChangeDetectorRef, config: ItDropdownConfig,\n      @Inject(DOCUMENT) _document: any, _ngZone: NgZone, _elementRef: ElementRef<HTMLElement>,\n      _renderer: Renderer2, @Optional() itNavbar: ItNavbar) {\n        super(_changeDetector, config, _document, _ngZone, _elementRef, _renderer, itNavbar);\n  }\n\n  ngAfterContentInit() {\n    super[\"_menu\"] = this._itMenu;\n    super[\"_anchor\"] = this._itAnchor;\n\n    super.ngAfterContentInit();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    super.ngOnChanges(changes);\n  }\n\n  ngOnDestroy() { super.ngOnDestroy(); }\n\n}",
            "selector": "[itDropdownAnchor]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "dropdown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItDropdown",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "undefined"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "extends": "NgbDropdownAnchor",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dropdown",
                        "type": "ItDropdown",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 80,
                "jsdoctags": [
                    {
                        "name": "dropdown",
                        "type": "ItDropdown",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ItDropdownItem",
            "id": "directive-ItDropdownItem-2f16bb455fab4bf8191676c099f308fd5873a5f4e6a9664283bc317b8fee55b6d6967d5d52f4bc0ac69589f427d6d9938b028e17542778fc203c19d7d81c284f",
            "file": "projects/design-angular-kit/src/lib/dropdown/dropdown.directive.ts",
            "type": "directive",
            "description": "<p>A directive you should put on a dropdown item to enable keyboard navigation.\nArrow keys will move focus between items marked with this directive.</p>\n",
            "rawdescription": "\n\nA directive you should put on a dropdown item to enable keyboard navigation.\nArrow keys will move focus between items marked with this directive.\n\n",
            "sourceCode": "import {\n  ChangeDetectorRef,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  NgZone,\n  AfterContentInit,\n  OnDestroy,\n  Output,\n  QueryList,\n  Renderer2,\n  SimpleChanges,\n  Optional,\n  OnChanges,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport { NgbDropdown, NgbDropdownAnchor, NgbDropdownItem, NgbDropdownMenu, NgbDropdownToggle, NgbNavbar } from '@ng-bootstrap/ng-bootstrap';\nimport { ItDropdownConfig } from './dropdown.config';\n\n@Directive({selector: '.navbar'})\nexport class ItNavbar extends NgbNavbar {\n}\n\n/**\n * A directive you should put on a dropdown item to enable keyboard navigation.\n * Arrow keys will move focus between items marked with this directive.\n *\n * @since 4.1.0\n */\n@Directive({\n  selector: '[itDropdownItem]'\n})\nexport class ItDropdownItem extends NgbDropdownItem {\n  constructor(elementRef: ElementRef<HTMLElement>, _renderer: Renderer2) {\n    super(elementRef, _renderer);\n  }\n}\n\n/**\n * A directive that wraps dropdown menu content and dropdown items.\n */\n@Directive({\n  selector: '[itDropdownMenu]',\n  host: {\n    '[attr.data-popper-placement]': 'placement'\n  }\n})\nexport class ItDropdownMenu extends NgbDropdownMenu implements AfterContentInit {\n  @ContentChildren(ItDropdownItem) menuItems: QueryList<ItDropdownItem>;\n\n  constructor(\n      @Inject(forwardRef(() => ItDropdown)) public dropdown: ItDropdown, _elementRef: ElementRef<HTMLElement>) {\n        super(dropdown, _elementRef);\n    }\n\n  ngAfterContentInit(): void {\n    super.menuItems = this.menuItems;\n  }\n\n\n\n}\n\n/**\n * A directive to mark an element to which dropdown menu will be anchored.\n *\n * This is a simple version of the `NgbDropdownToggle` directive.\n * It plays the same role, but doesn't listen to click events to toggle dropdown menu thus enabling support\n * for events other than click.\n *\n * @since 1.1.0\n */\n@Directive(\n    {selector: '[itDropdownAnchor]'})\nexport class ItDropdownAnchor extends NgbDropdownAnchor {\n  constructor(\n      @Inject(forwardRef(() => ItDropdown)) public dropdown: ItDropdown, _elementRef: ElementRef<HTMLElement>) {\n        super(dropdown, _elementRef)\n  }\n}\n\n/**\n * A directive to mark an element that will toggle dropdown via the `click` event.\n *\n * You can also use `NgbDropdownAnchor` as an alternative.\n */\n@Directive({\n  selector: '[itDropdownToggle]',\n  host: {\n    '[class]': 'placement'\n  },\n  providers: [{provide: ItDropdownAnchor, useExisting: forwardRef(() => ItDropdownToggle)}]\n})\nexport class ItDropdownToggle extends NgbDropdownToggle {\n  constructor(@Inject(forwardRef(() => ItDropdown)) public dropdown: ItDropdown, elementRef: ElementRef<HTMLElement>) {\n    super(dropdown, elementRef);\n  }\n}\n\n/**\n * A directive that provides contextual overlays for displaying lists of links and more.\n */\n@Directive({selector: '[itDropdown]', exportAs: 'itDropdown'})\nexport class ItDropdown extends NgbDropdown implements AfterContentInit, OnChanges, OnDestroy {\n\n  @ContentChild(ItDropdownMenu, {static: false}) _itMenu: ItDropdownMenu;\n  @ContentChild(ItDropdownAnchor, {static: false}) _itAnchor: ItDropdownAnchor;\n\n  /**\n   * An event fired when the dropdown is opened or closed.\n   *\n   * The event payload is a `boolean`:\n   * * `true` - the dropdown was opened\n   * * `false` - the dropdown was closed\n   */\n  @Output() openChange = new EventEmitter<boolean>();\n\n  constructor(\n      _changeDetector: ChangeDetectorRef, config: ItDropdownConfig,\n      @Inject(DOCUMENT) _document: any, _ngZone: NgZone, _elementRef: ElementRef<HTMLElement>,\n      _renderer: Renderer2, @Optional() itNavbar: ItNavbar) {\n        super(_changeDetector, config, _document, _ngZone, _elementRef, _renderer, itNavbar);\n  }\n\n  ngAfterContentInit() {\n    super[\"_menu\"] = this._itMenu;\n    super[\"_anchor\"] = this._itAnchor;\n\n    super.ngAfterContentInit();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    super.ngOnChanges(changes);\n  }\n\n  ngOnDestroy() { super.ngOnDestroy(); }\n\n}",
            "selector": "[itDropdownItem]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "extends": "NgbDropdownItem",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ItDropdownMenu",
            "id": "directive-ItDropdownMenu-2f16bb455fab4bf8191676c099f308fd5873a5f4e6a9664283bc317b8fee55b6d6967d5d52f4bc0ac69589f427d6d9938b028e17542778fc203c19d7d81c284f",
            "file": "projects/design-angular-kit/src/lib/dropdown/dropdown.directive.ts",
            "type": "directive",
            "description": "<p>A directive that wraps dropdown menu content and dropdown items.</p>\n",
            "rawdescription": "\n\nA directive that wraps dropdown menu content and dropdown items.\n",
            "sourceCode": "import {\n  ChangeDetectorRef,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  NgZone,\n  AfterContentInit,\n  OnDestroy,\n  Output,\n  QueryList,\n  Renderer2,\n  SimpleChanges,\n  Optional,\n  OnChanges,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport { NgbDropdown, NgbDropdownAnchor, NgbDropdownItem, NgbDropdownMenu, NgbDropdownToggle, NgbNavbar } from '@ng-bootstrap/ng-bootstrap';\nimport { ItDropdownConfig } from './dropdown.config';\n\n@Directive({selector: '.navbar'})\nexport class ItNavbar extends NgbNavbar {\n}\n\n/**\n * A directive you should put on a dropdown item to enable keyboard navigation.\n * Arrow keys will move focus between items marked with this directive.\n *\n * @since 4.1.0\n */\n@Directive({\n  selector: '[itDropdownItem]'\n})\nexport class ItDropdownItem extends NgbDropdownItem {\n  constructor(elementRef: ElementRef<HTMLElement>, _renderer: Renderer2) {\n    super(elementRef, _renderer);\n  }\n}\n\n/**\n * A directive that wraps dropdown menu content and dropdown items.\n */\n@Directive({\n  selector: '[itDropdownMenu]',\n  host: {\n    '[attr.data-popper-placement]': 'placement'\n  }\n})\nexport class ItDropdownMenu extends NgbDropdownMenu implements AfterContentInit {\n  @ContentChildren(ItDropdownItem) menuItems: QueryList<ItDropdownItem>;\n\n  constructor(\n      @Inject(forwardRef(() => ItDropdown)) public dropdown: ItDropdown, _elementRef: ElementRef<HTMLElement>) {\n        super(dropdown, _elementRef);\n    }\n\n  ngAfterContentInit(): void {\n    super.menuItems = this.menuItems;\n  }\n\n\n\n}\n\n/**\n * A directive to mark an element to which dropdown menu will be anchored.\n *\n * This is a simple version of the `NgbDropdownToggle` directive.\n * It plays the same role, but doesn't listen to click events to toggle dropdown menu thus enabling support\n * for events other than click.\n *\n * @since 1.1.0\n */\n@Directive(\n    {selector: '[itDropdownAnchor]'})\nexport class ItDropdownAnchor extends NgbDropdownAnchor {\n  constructor(\n      @Inject(forwardRef(() => ItDropdown)) public dropdown: ItDropdown, _elementRef: ElementRef<HTMLElement>) {\n        super(dropdown, _elementRef)\n  }\n}\n\n/**\n * A directive to mark an element that will toggle dropdown via the `click` event.\n *\n * You can also use `NgbDropdownAnchor` as an alternative.\n */\n@Directive({\n  selector: '[itDropdownToggle]',\n  host: {\n    '[class]': 'placement'\n  },\n  providers: [{provide: ItDropdownAnchor, useExisting: forwardRef(() => ItDropdownToggle)}]\n})\nexport class ItDropdownToggle extends NgbDropdownToggle {\n  constructor(@Inject(forwardRef(() => ItDropdown)) public dropdown: ItDropdown, elementRef: ElementRef<HTMLElement>) {\n    super(dropdown, elementRef);\n  }\n}\n\n/**\n * A directive that provides contextual overlays for displaying lists of links and more.\n */\n@Directive({selector: '[itDropdown]', exportAs: 'itDropdown'})\nexport class ItDropdown extends NgbDropdown implements AfterContentInit, OnChanges, OnDestroy {\n\n  @ContentChild(ItDropdownMenu, {static: false}) _itMenu: ItDropdownMenu;\n  @ContentChild(ItDropdownAnchor, {static: false}) _itAnchor: ItDropdownAnchor;\n\n  /**\n   * An event fired when the dropdown is opened or closed.\n   *\n   * The event payload is a `boolean`:\n   * * `true` - the dropdown was opened\n   * * `false` - the dropdown was closed\n   */\n  @Output() openChange = new EventEmitter<boolean>();\n\n  constructor(\n      _changeDetector: ChangeDetectorRef, config: ItDropdownConfig,\n      @Inject(DOCUMENT) _document: any, _ngZone: NgZone, _elementRef: ElementRef<HTMLElement>,\n      _renderer: Renderer2, @Optional() itNavbar: ItNavbar) {\n        super(_changeDetector, config, _document, _ngZone, _elementRef, _renderer, itNavbar);\n  }\n\n  ngAfterContentInit() {\n    super[\"_menu\"] = this._itMenu;\n    super[\"_anchor\"] = this._itAnchor;\n\n    super.ngAfterContentInit();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    super.ngOnChanges(changes);\n  }\n\n  ngOnDestroy() { super.ngOnDestroy(); }\n\n}",
            "selector": "[itDropdownMenu]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "dropdown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItDropdown",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "undefined"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "menuItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ItDropdownItem>",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "ItDropdownItem"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": "NgbDropdownMenu",
            "implements": [
                "AfterContentInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dropdown",
                        "type": "ItDropdown",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "dropdown",
                        "type": "ItDropdown",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ItDropdownToggle",
            "id": "directive-ItDropdownToggle-2f16bb455fab4bf8191676c099f308fd5873a5f4e6a9664283bc317b8fee55b6d6967d5d52f4bc0ac69589f427d6d9938b028e17542778fc203c19d7d81c284f",
            "file": "projects/design-angular-kit/src/lib/dropdown/dropdown.directive.ts",
            "type": "directive",
            "description": "<p>A directive to mark an element that will toggle dropdown via the <code>click</code> event.</p>\n<p>You can also use <code>NgbDropdownAnchor</code> as an alternative.</p>\n",
            "rawdescription": "\n\nA directive to mark an element that will toggle dropdown via the `click` event.\n\nYou can also use `NgbDropdownAnchor` as an alternative.\n",
            "sourceCode": "import {\n  ChangeDetectorRef,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  NgZone,\n  AfterContentInit,\n  OnDestroy,\n  Output,\n  QueryList,\n  Renderer2,\n  SimpleChanges,\n  Optional,\n  OnChanges,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport { NgbDropdown, NgbDropdownAnchor, NgbDropdownItem, NgbDropdownMenu, NgbDropdownToggle, NgbNavbar } from '@ng-bootstrap/ng-bootstrap';\nimport { ItDropdownConfig } from './dropdown.config';\n\n@Directive({selector: '.navbar'})\nexport class ItNavbar extends NgbNavbar {\n}\n\n/**\n * A directive you should put on a dropdown item to enable keyboard navigation.\n * Arrow keys will move focus between items marked with this directive.\n *\n * @since 4.1.0\n */\n@Directive({\n  selector: '[itDropdownItem]'\n})\nexport class ItDropdownItem extends NgbDropdownItem {\n  constructor(elementRef: ElementRef<HTMLElement>, _renderer: Renderer2) {\n    super(elementRef, _renderer);\n  }\n}\n\n/**\n * A directive that wraps dropdown menu content and dropdown items.\n */\n@Directive({\n  selector: '[itDropdownMenu]',\n  host: {\n    '[attr.data-popper-placement]': 'placement'\n  }\n})\nexport class ItDropdownMenu extends NgbDropdownMenu implements AfterContentInit {\n  @ContentChildren(ItDropdownItem) menuItems: QueryList<ItDropdownItem>;\n\n  constructor(\n      @Inject(forwardRef(() => ItDropdown)) public dropdown: ItDropdown, _elementRef: ElementRef<HTMLElement>) {\n        super(dropdown, _elementRef);\n    }\n\n  ngAfterContentInit(): void {\n    super.menuItems = this.menuItems;\n  }\n\n\n\n}\n\n/**\n * A directive to mark an element to which dropdown menu will be anchored.\n *\n * This is a simple version of the `NgbDropdownToggle` directive.\n * It plays the same role, but doesn't listen to click events to toggle dropdown menu thus enabling support\n * for events other than click.\n *\n * @since 1.1.0\n */\n@Directive(\n    {selector: '[itDropdownAnchor]'})\nexport class ItDropdownAnchor extends NgbDropdownAnchor {\n  constructor(\n      @Inject(forwardRef(() => ItDropdown)) public dropdown: ItDropdown, _elementRef: ElementRef<HTMLElement>) {\n        super(dropdown, _elementRef)\n  }\n}\n\n/**\n * A directive to mark an element that will toggle dropdown via the `click` event.\n *\n * You can also use `NgbDropdownAnchor` as an alternative.\n */\n@Directive({\n  selector: '[itDropdownToggle]',\n  host: {\n    '[class]': 'placement'\n  },\n  providers: [{provide: ItDropdownAnchor, useExisting: forwardRef(() => ItDropdownToggle)}]\n})\nexport class ItDropdownToggle extends NgbDropdownToggle {\n  constructor(@Inject(forwardRef(() => ItDropdown)) public dropdown: ItDropdown, elementRef: ElementRef<HTMLElement>) {\n    super(dropdown, elementRef);\n  }\n}\n\n/**\n * A directive that provides contextual overlays for displaying lists of links and more.\n */\n@Directive({selector: '[itDropdown]', exportAs: 'itDropdown'})\nexport class ItDropdown extends NgbDropdown implements AfterContentInit, OnChanges, OnDestroy {\n\n  @ContentChild(ItDropdownMenu, {static: false}) _itMenu: ItDropdownMenu;\n  @ContentChild(ItDropdownAnchor, {static: false}) _itAnchor: ItDropdownAnchor;\n\n  /**\n   * An event fired when the dropdown is opened or closed.\n   *\n   * The event payload is a `boolean`:\n   * * `true` - the dropdown was opened\n   * * `false` - the dropdown was closed\n   */\n  @Output() openChange = new EventEmitter<boolean>();\n\n  constructor(\n      _changeDetector: ChangeDetectorRef, config: ItDropdownConfig,\n      @Inject(DOCUMENT) _document: any, _ngZone: NgZone, _elementRef: ElementRef<HTMLElement>,\n      _renderer: Renderer2, @Optional() itNavbar: ItNavbar) {\n        super(_changeDetector, config, _document, _ngZone, _elementRef, _renderer, itNavbar);\n  }\n\n  ngAfterContentInit() {\n    super[\"_menu\"] = this._itMenu;\n    super[\"_anchor\"] = this._itAnchor;\n\n    super.ngAfterContentInit();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    super.ngOnChanges(changes);\n  }\n\n  ngOnDestroy() { super.ngOnDestroy(); }\n\n}",
            "selector": "[itDropdownToggle]",
            "providers": [
                {
                    "name": "{ provide: ItDropdownAnchor, useExisting: forwardRef(() => ItDropdownToggle) }"
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "dropdown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItDropdown",
                    "optional": false,
                    "description": "",
                    "line": 100,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "undefined"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "extends": "NgbDropdownToggle",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dropdown",
                        "type": "ItDropdown",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 99,
                "jsdoctags": [
                    {
                        "name": "dropdown",
                        "type": "ItDropdown",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ItNavbar",
            "id": "directive-ItNavbar-2f16bb455fab4bf8191676c099f308fd5873a5f4e6a9664283bc317b8fee55b6d6967d5d52f4bc0ac69589f427d6d9938b028e17542778fc203c19d7d81c284f",
            "file": "projects/design-angular-kit/src/lib/dropdown/dropdown.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  ChangeDetectorRef,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  NgZone,\n  AfterContentInit,\n  OnDestroy,\n  Output,\n  QueryList,\n  Renderer2,\n  SimpleChanges,\n  Optional,\n  OnChanges,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport { NgbDropdown, NgbDropdownAnchor, NgbDropdownItem, NgbDropdownMenu, NgbDropdownToggle, NgbNavbar } from '@ng-bootstrap/ng-bootstrap';\nimport { ItDropdownConfig } from './dropdown.config';\n\n@Directive({selector: '.navbar'})\nexport class ItNavbar extends NgbNavbar {\n}\n\n/**\n * A directive you should put on a dropdown item to enable keyboard navigation.\n * Arrow keys will move focus between items marked with this directive.\n *\n * @since 4.1.0\n */\n@Directive({\n  selector: '[itDropdownItem]'\n})\nexport class ItDropdownItem extends NgbDropdownItem {\n  constructor(elementRef: ElementRef<HTMLElement>, _renderer: Renderer2) {\n    super(elementRef, _renderer);\n  }\n}\n\n/**\n * A directive that wraps dropdown menu content and dropdown items.\n */\n@Directive({\n  selector: '[itDropdownMenu]',\n  host: {\n    '[attr.data-popper-placement]': 'placement'\n  }\n})\nexport class ItDropdownMenu extends NgbDropdownMenu implements AfterContentInit {\n  @ContentChildren(ItDropdownItem) menuItems: QueryList<ItDropdownItem>;\n\n  constructor(\n      @Inject(forwardRef(() => ItDropdown)) public dropdown: ItDropdown, _elementRef: ElementRef<HTMLElement>) {\n        super(dropdown, _elementRef);\n    }\n\n  ngAfterContentInit(): void {\n    super.menuItems = this.menuItems;\n  }\n\n\n\n}\n\n/**\n * A directive to mark an element to which dropdown menu will be anchored.\n *\n * This is a simple version of the `NgbDropdownToggle` directive.\n * It plays the same role, but doesn't listen to click events to toggle dropdown menu thus enabling support\n * for events other than click.\n *\n * @since 1.1.0\n */\n@Directive(\n    {selector: '[itDropdownAnchor]'})\nexport class ItDropdownAnchor extends NgbDropdownAnchor {\n  constructor(\n      @Inject(forwardRef(() => ItDropdown)) public dropdown: ItDropdown, _elementRef: ElementRef<HTMLElement>) {\n        super(dropdown, _elementRef)\n  }\n}\n\n/**\n * A directive to mark an element that will toggle dropdown via the `click` event.\n *\n * You can also use `NgbDropdownAnchor` as an alternative.\n */\n@Directive({\n  selector: '[itDropdownToggle]',\n  host: {\n    '[class]': 'placement'\n  },\n  providers: [{provide: ItDropdownAnchor, useExisting: forwardRef(() => ItDropdownToggle)}]\n})\nexport class ItDropdownToggle extends NgbDropdownToggle {\n  constructor(@Inject(forwardRef(() => ItDropdown)) public dropdown: ItDropdown, elementRef: ElementRef<HTMLElement>) {\n    super(dropdown, elementRef);\n  }\n}\n\n/**\n * A directive that provides contextual overlays for displaying lists of links and more.\n */\n@Directive({selector: '[itDropdown]', exportAs: 'itDropdown'})\nexport class ItDropdown extends NgbDropdown implements AfterContentInit, OnChanges, OnDestroy {\n\n  @ContentChild(ItDropdownMenu, {static: false}) _itMenu: ItDropdownMenu;\n  @ContentChild(ItDropdownAnchor, {static: false}) _itAnchor: ItDropdownAnchor;\n\n  /**\n   * An event fired when the dropdown is opened or closed.\n   *\n   * The event payload is a `boolean`:\n   * * `true` - the dropdown was opened\n   * * `false` - the dropdown was closed\n   */\n  @Output() openChange = new EventEmitter<boolean>();\n\n  constructor(\n      _changeDetector: ChangeDetectorRef, config: ItDropdownConfig,\n      @Inject(DOCUMENT) _document: any, _ngZone: NgZone, _elementRef: ElementRef<HTMLElement>,\n      _renderer: Renderer2, @Optional() itNavbar: ItNavbar) {\n        super(_changeDetector, config, _document, _ngZone, _elementRef, _renderer, itNavbar);\n  }\n\n  ngAfterContentInit() {\n    super[\"_menu\"] = this._itMenu;\n    super[\"_anchor\"] = this._itAnchor;\n\n    super.ngAfterContentInit();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    super.ngOnChanges(changes);\n  }\n\n  ngOnDestroy() { super.ngOnDestroy(); }\n\n}",
            "selector": ".navbar",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "extends": "NgbNavbar"
        },
        {
            "name": "ItPopover",
            "id": "directive-ItPopover-9f0672c972e2eed6e07ee971122ae13d62e43f42704ba9184f0ab56ebdabdac21e5bdfdea2fb5d2fe8b37323815ce00ed18146c86d54bbc0cd962497cbee39a0",
            "file": "projects/design-angular-kit/src/lib/popover/popover.directive.ts",
            "type": "directive",
            "description": "<p>A lightweight and extensible directive for fancy popover creation.</p>\n",
            "rawdescription": "\n\nA lightweight and extensible directive for fancy popover creation.\n",
            "sourceCode": "import {\n    Directive,\n    Input,\n    OnInit,\n    OnDestroy,\n    OnChanges,\n    Inject,\n    Injector,\n    Renderer2,\n    ElementRef,\n    TemplateRef,\n    ViewContainerRef,\n    NgZone,\n    ChangeDetectorRef,\n    ApplicationRef\n  } from '@angular/core';\n  import {DOCUMENT} from '@angular/common';\nimport { NgbPopover } from '@ng-bootstrap/ng-bootstrap';\nimport { ItPopoverConfig } from './popover.config';\n  \n/**\n * A lightweight and extensible directive for fancy popover creation.\n */\n@Directive({selector: '[itPopover]', exportAs: 'itPopover'})\nexport class ItPopover extends NgbPopover implements OnInit, OnDestroy, OnChanges {\n \n  /**\n   * The string content or a `TemplateRef` for the content to be displayed in the popover.\n   *\n   * If the title and the content are falsy, the popover won't open.\n   */\n  @Input() itPopover:  string | TemplateRef<any>| null | undefined;\n\n  constructor(\n      _elementRef: ElementRef<HTMLElement>, _renderer: Renderer2, injector: Injector,\n      viewContainerRef: ViewContainerRef, config: ItPopoverConfig, _ngZone: NgZone,\n      @Inject(DOCUMENT) _document: any, _changeDetector: ChangeDetectorRef,\n      applicationRef: ApplicationRef) {\n        super(_elementRef, _renderer, injector, viewContainerRef, config, _ngZone, _document, _changeDetector, applicationRef);\n  }\n\n  ngOnInit(): void {\n      super.ngOnInit();\n      super.ngbPopover = this.itPopover;\n      this.popoverClass = 'it-popover-window';\n  }\n\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n  }\n}",
            "selector": "[itPopover]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "itPopover",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe string content or a `TemplateRef` for the content to be displayed in the popover.\n\nIf the title and the content are falsy, the popover won't open.\n",
                    "description": "<p>The string content or a <code>TemplateRef</code> for the content to be displayed in the popover.</p>\n<p>If the title and the content are falsy, the popover won&#39;t open.</p>\n",
                    "line": 32,
                    "type": "string | TemplateRef<any> | null | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": "NgbPopover",
            "implements": [
                "OnInit",
                "OnDestroy",
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "config",
                        "type": "ItPopoverConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "applicationRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "config",
                        "type": "ItPopoverConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ItPrefixDirective",
            "id": "directive-ItPrefixDirective-b658961c246db0926598a8d00cb7f9953cdaca9f134e30583d97e4ad42865ba62cab93f8d0563b56bc02b10683ffe1ba9e8c242b1264973551b303623cfec022",
            "file": "projects/design-angular-kit/src/lib/form-input/it-prefix.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive } from \"@angular/core\";\n\n@Directive({\n    selector: '[itPrefix]'\n})\nexport class ItPrefixDirective {}\n",
            "selector": "[itPrefix]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": []
        },
        {
            "name": "ItSuffixDirective",
            "id": "directive-ItSuffixDirective-ad2e2911d7949e18c5335ae395656647f0fa7d49437c6fdeb67438b40cd5503df3116b6564640177c781215d598001f3f26e186cb56079a6cf4969c11783c11c",
            "file": "projects/design-angular-kit/src/lib/form-input/it-suffix.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive } from \"@angular/core\";\n\n@Directive({\n    selector: '[itSuffix]'\n})\nexport class ItSuffixDirective {}",
            "selector": "[itSuffix]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": []
        },
        {
            "name": "ItTextPrefixDirective",
            "id": "directive-ItTextPrefixDirective-03553ba626c45de2972f0663fd40c13e9897279cd21f08de626ca227dec2bbea0ef6545dff24270b123e2bb3c0ec8082f262f3ce30c898905d5cda0bdfa28866",
            "file": "projects/design-angular-kit/src/lib/form-input/it-text-prefix.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive } from \"@angular/core\";\n\n@Directive({\n    selector: '[itTextPrefix]'\n})\nexport class ItTextPrefixDirective {}\n",
            "selector": "[itTextPrefix]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": []
        },
        {
            "name": "ItTextSuffixDirective",
            "id": "directive-ItTextSuffixDirective-26cb5704ce8bda60991a2d716050e27c5d018b78f93ee21697628a6652aea48c70c336b3e036f041b468c5e73e8c881a21a8c59fa1f78d756e875091aeb1bea7",
            "file": "projects/design-angular-kit/src/lib/form-input/it-text-suffix.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive } from '@angular/core';\n\n@Directive({\n    selector: '[itTextSuffix]'\n})\nexport class ItTextSuffixDirective {}\n",
            "selector": "[itTextSuffix]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": []
        },
        {
            "name": "ItTooltip",
            "id": "directive-ItTooltip-568034665fe5b5edf5724649f8e22671ffe8e10f481198d16aca0b84c03c4f3bbd9fed05034e31c19ba1671cdfc8b485f983291af728efa0c7c99fe8163f194b",
            "file": "projects/design-angular-kit/src/lib/tooltip/tooltip.directive.ts",
            "type": "directive",
            "description": "<p>Una direttiva per la creazione di un tooltip.</p>\n",
            "rawdescription": "\n\nUna direttiva per la creazione di un tooltip.\n",
            "sourceCode": "import {\n  Directive,\n  Input,\n  OnInit,\n  OnDestroy,\n  OnChanges,\n  Injector,\n  Renderer2,\n  ElementRef,\n  TemplateRef,\n  ViewContainerRef,\n  NgZone,\n  Inject,\n  ApplicationRef,\n  ChangeDetectorRef,\n} from '@angular/core';\n\n\nimport { ItTooltipConfig } from './tooltip.config';\n\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * Una direttiva per la creazione di un tooltip.\n */\n@Directive({\n  selector: '[itTooltip]', // tslint:disable-line\n  exportAs: 'itTooltip'\n})\nexport class ItTooltip extends NgbTooltip implements OnInit, OnDestroy, OnChanges {\n  /**\n   * The string content or a `TemplateRef` for the content to be displayed in the popover.\n   *\n   * If the title and the content are falsy, the popover won't open.\n   */\n   @Input() itTooltip:  string | TemplateRef<any>| null | undefined;\n\n   constructor(\n       _elementRef: ElementRef<HTMLElement>, _renderer: Renderer2, injector: Injector,\n       viewContainerRef: ViewContainerRef, config: ItTooltipConfig, _ngZone: NgZone,\n       @Inject(DOCUMENT) _document: any, _changeDetector: ChangeDetectorRef,\n       applicationRef: ApplicationRef) {\n         super(_elementRef, _renderer, injector, viewContainerRef, config, _ngZone, _document, _changeDetector, applicationRef);\n   }\n \n   ngOnInit(): void {\n       super.ngOnInit();\n       super.ngbTooltip = this.itTooltip;\n       this.tooltipClass = 'it-tooltip-window';\n   }\n \n   ngOnDestroy(): void {\n     super.ngOnDestroy();\n   }\n}\n",
            "selector": "[itTooltip]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "itTooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe string content or a `TemplateRef` for the content to be displayed in the popover.\n\nIf the title and the content are falsy, the popover won't open.\n",
                    "description": "<p>The string content or a <code>TemplateRef</code> for the content to be displayed in the popover.</p>\n<p>If the title and the content are falsy, the popover won&#39;t open.</p>\n",
                    "line": 44,
                    "type": "string | TemplateRef<any> | null | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": "NgbTooltip",
            "implements": [
                "OnInit",
                "OnDestroy",
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "config",
                        "type": "ItTooltipConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "applicationRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "config",
                        "type": "ItTooltipConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "RadioGroupDirective",
            "id": "directive-RadioGroupDirective-ab0a8ebae66165b1788d514410994e34c024aadca082a8b4fac18d45934ef0a733ce5c7acbd3ddab8f85fe3cc6987731487de0fe7542e693f6142f86b40281c1",
            "file": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  forwardRef,\n  ChangeDetectionStrategy,\n  AfterContentInit,\n  Directive,\n  ContentChildren,\n  QueryList,\n  OnInit,\n  OnDestroy,\n  Optional,\n  HostBinding\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { UniqueSelectionDispatcher } from './unique-selection-dispatcher';\n\nlet identifier = 0;\n\nfunction _coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n\nexport class RadioChange {\n  constructor(\n    public source: RadioButtonComponent,\n    public value: any\n  ) { }\n}\n\n@Directive({\n  selector: 'it-radio-group', // tslint:disable-line\n  exportAs: 'itRadioGroup',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioGroupDirective),\n    multi: true\n  }]\n})\nexport class RadioGroupDirective implements AfterContentInit, ControlValueAccessor {\n\n  @HostBinding('attr.role') role = 'radiogroup';\n\n  /**\n   * Il valore selezionato per il gruppo. Dovrebbe essere uguale al valore del radio button selezionato se\n   * *esiste* un radio button con un valore corrispondente. Se *non esiste* un radio button corrispondente\n   * questo valore persiste ed è applicato nel caso in cui un nuovo radio button viene aggiunto con il valore\n   * corrispondente.\n   */\n  private _value: any = null;\n\n  /** L'attributo HTML name da applicare ai radio button in questo gruppo */\n  private _name = `it-radio-group-${identifier++}`;\n\n  /** Il radio button attualmente selezionato. */\n  private _selected: RadioButtonComponent | null = null;\n\n  /** se `value` è stato settato al suo valore iniziale. */\n  private _isInitialized = false;\n\n  /** Se il radio group è disabilitato. */\n  private _disabled = false;\n\n\n\n  /**\n   * Evento emesso quando il valore del gruppo cambia.\n   * Gli eventi di change sono emessi soltanto quando il valore cambia a causa dell'interazione dell'utente\n   * con il radio button (stesso comportamento di `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<RadioChange> = new EventEmitter<RadioChange>();\n\n  /** radio buttons figli. */\n  @ContentChildren(forwardRef(() => RadioButtonComponent), { descendants: true }) _radios: QueryList<RadioButtonComponent>; // tslint:disable-line\n\n  /** Il metodo da chiamare per aggiornare ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => { };\n\n  onTouched: () => any = () => { };\n\n  /** Nome del gruppo di radio button. Tutti i radio button all'interno del gruppo avranno questo nome. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Valore del radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Il radio button selezionato. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: RadioButtonComponent | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Se il gruppo è disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = _coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef\n  ) { }\n\n  /**\n   * Inizializza le proprietà quando il contenuto dei figliè disponibile.\n   * Questo permette di propagare gli attributi rilevanti ai radio buttons associati.\n   */\n  ngAfterContentInit(): void {\n    this._isInitialized = true;\n  }\n\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Aggiorna il radio button `selected` a seconda del suo _value. */\n  private _updateSelectedRadioFromValue(): void {\n    this._selected = null;\n    this._radios.forEach(radio => {\n      radio.checked = this.value === radio.value;\n      if (radio.checked) {\n        this._selected = radio;\n      }\n    });\n  }\n\n  /** Invia l'evento change con la selezione corrente e il valore del gruppo. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new RadioChange(this._selected, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  writeValue(value: any): void {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  registerOnChange(fn: (value: any) => void): void {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n}\n\n/**\n * Un radio button con design bootstrap italia. Supporta tutte le funzionalità di una radio HTML5,\n * ed espone una API simile. Una `<it-radio-button>` può essere checked, unchecked, o disabled.\n */\n@Component({\n  selector: 'it-radio-button',\n  templateUrl: './radio.component.html',\n  styleUrls: ['./radio.component.scss'],\n  exportAs: 'itRadioButton',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RadioButtonComponent implements OnInit, OnDestroy {\n\n  id = `radio-${identifier++}`;\n\n  /** Attributo 'name' usato per raggruppare i radio button per un'unica selezione. */\n  @Input() name: string;\n\n  /** L'etichetta delradio button. */\n  @Input()\n  label: string;\n\n  /** se il radio button è checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = _coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Il valore di questo radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Se il radio button è disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = !!value;\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /**\n   * Evento emesso quando il valore `checked` del radio button cambia.\n   */\n  @Output() readonly change: EventEmitter<RadioChange> = new EventEmitter<RadioChange>();\n\n  /** Il radio group padre. Può essere presente o meno. */\n  radioGroup: RadioGroupDirective;\n\n  /** Se il radio button è checked. */\n  private _checked = false;\n\n  /** Se il radio button è disabled. */\n  private _disabled: boolean;\n\n  /** il valore assegnato al radio button. */\n  private _value: any = null;\n\n  private _removeUniqueSelectionListener: () => void = () => { };\n\n  constructor(\n    @Optional() radioGroup: RadioGroupDirective,\n    private _changeDetector: ChangeDetectorRef,\n    private _radioDispatcher: UniqueSelectionDispatcher\n  ) {\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /**\n   * Segna il radio button come da controllare per la change detection.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit(): void {\n    if (this.radioGroup) {\n      // Se il radio button è all'interno di un gruppo, determina se deve essere selezionato\n      this.checked = this.radioGroup.value === this._value;\n      // Copia il `name` del radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngOnDestroy() {\n    this._removeUniqueSelectionListener();\n  }\n\n  private _emitChangeEvent(): void {\n    this.change.emit(new RadioChange(this, this._value));\n  }\n\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n}\n",
            "selector": "it-radio-group",
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => RadioGroupDirective), multi: true\n}",
                    "type": "directive"
                }
            ],
            "inputsClass": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSe il gruppo è disabled",
                    "description": "<p>Se il gruppo è disabled</p>\n",
                    "line": 121,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nNome del gruppo di radio button. Tutti i radio button all'interno del gruppo avranno questo nome.",
                    "description": "<p>Nome del gruppo di radio button. Tutti i radio button all&#39;interno del gruppo avranno questo nome.</p>\n",
                    "line": 86,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIl radio button selezionato.",
                    "description": "<p>Il radio button selezionato.</p>\n",
                    "line": 112,
                    "type": "RadioButtonComponent",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nValore del radio button.",
                    "description": "<p>Valore del radio button.</p>\n",
                    "line": 94,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter<RadioChange>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvento emesso quando il valore del gruppo cambia.\nGli eventi di change sono emessi soltanto quando il valore cambia a causa dell'interazione dell'utente\ncon il radio button (stesso comportamento di `<input type-\"radio\">`).\n",
                    "description": "<p>Evento emesso quando il valore del gruppo cambia.\nGli eventi di change sono emessi soltanto quando il valore cambia a causa dell&#39;interazione dell&#39;utente\ncon il radio button (stesso comportamento di <code>&lt;input type-&quot;radio&quot;&gt;</code>).</p>\n",
                    "line": 74,
                    "type": "EventEmitter<RadioChange>"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.role",
                    "defaultValue": "'radiogroup'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_controlValueAccessorChangeFn",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Il metodo da chiamare per aggiornare ngModel</p>\n",
                    "line": 80,
                    "rawdescription": "\nIl metodo da chiamare per aggiornare ngModel"
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Se il radio group è disabilitato.</p>\n",
                    "line": 65,
                    "rawdescription": "\nSe il radio group è disabilitato.",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_isInitialized",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>se <code>value</code> è stato settato al suo valore iniziale.</p>\n",
                    "line": 62,
                    "rawdescription": "\nse `value` è stato settato al suo valore iniziale.",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_name",
                    "defaultValue": "`it-radio-group-${identifier++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>L&#39;attributo HTML name da applicare ai radio button in questo gruppo</p>\n",
                    "line": 56,
                    "rawdescription": "\nL'attributo HTML name da applicare ai radio button in questo gruppo",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_radios",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<RadioButtonComponent>",
                    "optional": false,
                    "description": "<p>radio buttons figli.</p>\n",
                    "line": 77,
                    "rawdescription": "\nradio buttons figli.",
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "undefined, {descendants: true}"
                        }
                    ]
                },
                {
                    "name": "_selected",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RadioButtonComponent | null",
                    "optional": false,
                    "description": "<p>Il radio button attualmente selezionato.</p>\n",
                    "line": 59,
                    "rawdescription": "\nIl radio button attualmente selezionato.",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_value",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Il valore selezionato per il gruppo. Dovrebbe essere uguale al valore del radio button selezionato se\n<em>esiste</em> un radio button con un valore corrispondente. Se <em>non esiste</em> un radio button corrispondente\nquesto valore persiste ed è applicato nel caso in cui un nuovo radio button viene aggiunto con il valore\ncorrispondente.</p>\n",
                    "line": 53,
                    "rawdescription": "\n\nIl valore selezionato per il gruppo. Dovrebbe essere uguale al valore del radio button selezionato se\n*esiste* un radio button con un valore corrispondente. Se *non esiste* un radio button corrispondente\nquesto valore persiste ed è applicato nel caso in cui un nuovo radio button viene aggiunto con il valore\ncorrispondente.\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "role",
                    "defaultValue": "'radiogroup'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.role'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_checkSelectedRadioButton",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "_emitChangeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nInvia l'evento change con la selezione corrente e il valore del gruppo.",
                    "description": "<p>Invia l&#39;evento change con la selezione corrente e il valore del gruppo.</p>\n"
                },
                {
                    "name": "_markRadiosForCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "_touch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "_updateRadioButtonNames",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_updateSelectedRadioFromValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAggiorna il radio button `selected` a seconda del suo _value.",
                    "description": "<p>Aggiorna il radio button <code>selected</code> a seconda del suo _value.</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInizializza le proprietà quando il contenuto dei figliè disponibile.\nQuesto permette di propagare gli attributi rilevanti ai radio buttons associati.\n",
                    "description": "<p>Inizializza le proprietà quando il contenuto dei figliè disponibile.\nQuesto permette di propagare gli attributi rilevanti ai radio buttons associati.</p>\n"
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "AfterContentInit",
                "ControlValueAccessor"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 125,
                "jsdoctags": [
                    {
                        "name": "_changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "name": {
                    "name": "name",
                    "setSignature": {
                        "name": "name",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 87,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "name",
                        "type": "string",
                        "returnType": "string",
                        "line": 86,
                        "rawdescription": "\nNome del gruppo di radio button. Tutti i radio button all'interno del gruppo avranno questo nome.",
                        "description": "<p>Nome del gruppo di radio button. Tutti i radio button all&#39;interno del gruppo avranno questo nome.</p>\n"
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "newValue",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 95,
                        "jsdoctags": [
                            {
                                "name": "newValue",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "any",
                        "returnType": "any",
                        "line": 94,
                        "rawdescription": "\nValore del radio button.",
                        "description": "<p>Valore del radio button.</p>\n"
                    }
                },
                "selected": {
                    "name": "selected",
                    "setSignature": {
                        "name": "selected",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "selected",
                                "type": "RadioButtonComponent | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 113,
                        "jsdoctags": [
                            {
                                "name": "selected",
                                "type": "RadioButtonComponent | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "selected",
                        "type": "",
                        "returnType": "",
                        "line": 112,
                        "rawdescription": "\nIl radio button selezionato.",
                        "description": "<p>Il radio button selezionato.</p>\n"
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 122,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 121,
                        "rawdescription": "\nSe il gruppo è disabled",
                        "description": "<p>Se il gruppo è disabled</p>\n"
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "BreadcrumbComponent",
            "id": "component-BreadcrumbComponent-e6426fa98f91a62ff31af2488b7bccebf18aea8de1e6b18fd4e0b91db8c32dc92574d53499a34c59ee4fbdadf8114d657a36ccefac97398540382a640b0d130d",
            "file": "projects/design-angular-kit/src/lib/breadcrumb/breadcrumb.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-breadcrumb",
            "styleUrls": [
                "./breadcrumb.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./breadcrumb.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "'breadcrumb'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "dark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica che il breadcrumb utilizza il tema di colorazione scura.\nAccetta una espressione booleana o può essere usato come attributo senza valore\n",
                    "description": "<p>Indica che il breadcrumb utilizza il tema di colorazione scura.\nAccetta una espressione booleana o può essere usato come attributo senza valore</p>\n",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "separator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIl carattere che verrà usato come separatore tra gli elementi del breadcrumb\n",
                    "description": "<p>Il carattere che verrà usato come separatore tra gli elementi del breadcrumb</p>\n",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_dark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<BreadcrumbItemComponent>",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "undefined, {descendants: true}"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_separator",
                    "defaultValue": "DEFAULT_SEPARATOR",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_subscription",
                    "defaultValue": "Subscription.EMPTY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "id",
                    "defaultValue": "`it-breadcrumb-${identifier++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "_reloadBreadcrumbs",
                    "args": [
                        {
                            "name": "currentItems",
                            "type": "QueryList<BreadcrumbItemComponent>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "currentItems",
                            "type": "QueryList<BreadcrumbItemComponent>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_subscribeToChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Una componente che indica la posizione della pagina corrente all’interno di una gerarchia di navigazione</p>\n",
            "rawdescription": "\n\nUna componente che indica la posizione della pagina corrente all’interno di una gerarchia di navigazione\n",
            "type": "component",
            "sourceCode": "import {\n  Component, Input, ContentChildren, QueryList, forwardRef,\n  AfterContentInit, OnChanges, OnDestroy, SimpleChanges, ChangeDetectionStrategy\n} from '@angular/core';\nimport { BreadcrumbItemComponent } from './breadcrumb-item.component';\nimport { Util } from '../util/util';\nimport { Subscription } from 'rxjs';\n\nconst DEFAULT_SEPARATOR = '/';\nlet identifier = 0;\n\n/**\n * Una componente che indica la posizione della pagina corrente all’interno di una gerarchia di navigazione\n */\n@Component({\n  selector: 'it-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  styleUrls: ['./breadcrumb.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbComponent implements AfterContentInit, OnChanges, OnDestroy {\n  id = `it-breadcrumb-${identifier++}`;\n\n  /**\n   * Indica che il breadcrumb utilizza il tema di colorazione scura.\n   * Accetta una espressione booleana o può essere usato come attributo senza valore\n   */\n  @Input()\n  get dark(): boolean { return this._dark; }\n  set dark(value: boolean) { \n    this._dark = Util.coerceBooleanProperty(value); \n  }\n  private _dark = false;\n\n  /**\n   * Il carattere che verrà usato come separatore tra gli elementi del breadcrumb\n   */\n  @Input()\n  get separator(): string { return this._separator; }\n  set separator(value: string) { this._separator = value ? value : DEFAULT_SEPARATOR; }\n  private _separator = DEFAULT_SEPARATOR;\n\n  @ContentChildren(forwardRef(() => BreadcrumbItemComponent), { descendants: true })\n  private _items: QueryList<BreadcrumbItemComponent>;\n\n  @Input() \n  customClass: string = '';\n\n  @Input() \n  ariaLabel: string = 'breadcrumb';\n\n  get breadcrumbClass() {\n    return 'breadcrumb ' + (this.customClass ?? '') + (this._dark ? ' dark' : '');\n  }\n\n  private _subscription = Subscription.EMPTY;\n\n  ngAfterContentInit() {\n    this._reloadBreadcrumbs(this._items);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['separator']) {\n      if (!changes['separator'].firstChange) {\n        this._reloadBreadcrumbs(this._items);\n      }\n    } else if (changes['dark']) {\n      this._reloadBreadcrumbs(this._items);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n\n  private _reloadBreadcrumbs(currentItems: QueryList<BreadcrumbItemComponent>) {\n    currentItems.forEach(item => {\n      item.separator = this.separator;\n      item.isLast = (item === currentItems.last);\n      item.iconColor = item.iconColor || (this._dark ? 'white' : 'primary');\n    });\n\n    this._subscribeToChanges();\n  }\n\n\n  private _subscribeToChanges() {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n\n    this._subscription = this._items.changes.subscribe(items => {\n      this._reloadBreadcrumbs(items);\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./breadcrumb.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "AfterContentInit",
                "OnChanges",
                "OnDestroy"
            ],
            "accessors": {
                "dark": {
                    "name": "dark",
                    "setSignature": {
                        "name": "dark",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 30,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "dark",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 29,
                        "rawdescription": "\n\nIndica che il breadcrumb utilizza il tema di colorazione scura.\nAccetta una espressione booleana o può essere usato come attributo senza valore\n",
                        "description": "<p>Indica che il breadcrumb utilizza il tema di colorazione scura.\nAccetta una espressione booleana o può essere usato come attributo senza valore</p>\n"
                    }
                },
                "separator": {
                    "name": "separator",
                    "setSignature": {
                        "name": "separator",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 40,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "separator",
                        "type": "string",
                        "returnType": "string",
                        "line": 39,
                        "rawdescription": "\n\nIl carattere che verrà usato come separatore tra gli elementi del breadcrumb\n",
                        "description": "<p>Il carattere che verrà usato come separatore tra gli elementi del breadcrumb</p>\n"
                    }
                },
                "breadcrumbClass": {
                    "name": "breadcrumbClass",
                    "getSignature": {
                        "name": "breadcrumbClass",
                        "type": "",
                        "returnType": "",
                        "line": 52
                    }
                }
            },
            "templateData": "<nav class=\"breadcrumb-container\" [attr.aria-label]=\"ariaLabel\" [id]=\"id\">\n  <ol [ngClass]=\"breadcrumbClass\">\n    <ng-content></ng-content>\n  </ol>\n</nav>"
        },
        {
            "name": "BreadcrumbItemComponent",
            "id": "component-BreadcrumbItemComponent-0942ea123ea747e6dbed8f5431510e44443868a2305150d7e41f884ef4979005198422b7745caa9dbffd26d1bb062a860481faccf028bda46bee14a5b7dca2cc",
            "file": "projects/design-angular-kit/src/lib/breadcrumb/breadcrumb-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-breadcrumb-item",
            "styleUrls": [
                "./breadcrumb-item.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./breadcrumb-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "customClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLa classe dell'icona da usare prima del testo dell'elemento del breadcrumb\n",
                    "description": "<p>La classe dell&#39;icona da usare prima del testo dell&#39;elemento del breadcrumb</p>\n",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIl link alla pagina verso cui andare al click di questo elemento del breadcrumb\n",
                    "description": "<p>Il link alla pagina verso cui andare al click di questo elemento del breadcrumb</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_iconColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_isLast",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_separator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "id",
                    "defaultValue": "`it-breadcrumb-item-${identifier++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\n\nlet identifier = 0;\n\n@Component({\n  selector: 'it-breadcrumb-item',\n  templateUrl: './breadcrumb-item.component.html',\n  styleUrls: ['./breadcrumb-item.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbItemComponent {\n  id = `it-breadcrumb-item-${identifier++}`;\n\n  constructor(private _cdRef: ChangeDetectorRef, private _elemRef: ElementRef) { }\n\n  /**\n   * Il link alla pagina verso cui andare al click di questo elemento del breadcrumb\n   */\n  @Input()\n  get link(): string { return this._link; }\n  set link(value: string) { this._link = value; }\n  private _link: string;\n\n  /**\n   * La classe dell'icona da usare prima del testo dell'elemento del breadcrumb\n   */\n  @Input()\n  get icon(): string { return this._icon; }\n  set icon(value: string) { this._icon = value; }\n  private _icon: string;\n\n  @Input()\n  get iconColor(): string { return this._iconColor; }\n  set iconColor(value: string) { \n    if(this._iconColor !== value) {\n      this._iconColor = value;\n      this._cdRef.detectChanges();\n    }\n  }\n  private _iconColor: string;\n\n  get separator(): string { return this._separator; }\n  set separator(value: string) { this._separator = value; }\n  private _separator: string;\n\n  get isLast(): boolean { return this._isLast; }\n  set isLast(value: boolean) {\n    this._isLast = value;\n    const breadcrumbItem = this._elemRef.nativeElement.querySelector('.breadcrumb-item');\n    if (this._isLast) {\n      breadcrumbItem.setAttribute('aria-current', 'page');\n    } else {\n      if (breadcrumbItem.hasAttribute('aria-current')) {\n        breadcrumbItem.removeAttribute('aria-current');\n      }\n    }\n    this._cdRef.detectChanges();\n  }\n  private _isLast = false;\n\n  @Input() customClass: string = '';\n\n  get breadcrumbClass() {\n    return 'breadcrumb-item ' + (this.customClass ?? '') + (this.isLast ? ' active' : '');\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./breadcrumb-item.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_cdRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elemRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "_cdRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elemRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "link": {
                    "name": "link",
                    "setSignature": {
                        "name": "link",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 21,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "link",
                        "type": "string",
                        "returnType": "string",
                        "line": 20,
                        "rawdescription": "\n\nIl link alla pagina verso cui andare al click di questo elemento del breadcrumb\n",
                        "description": "<p>Il link alla pagina verso cui andare al click di questo elemento del breadcrumb</p>\n"
                    }
                },
                "icon": {
                    "name": "icon",
                    "setSignature": {
                        "name": "icon",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 29,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "icon",
                        "type": "string",
                        "returnType": "string",
                        "line": 28,
                        "rawdescription": "\n\nLa classe dell'icona da usare prima del testo dell'elemento del breadcrumb\n",
                        "description": "<p>La classe dell&#39;icona da usare prima del testo dell&#39;elemento del breadcrumb</p>\n"
                    }
                },
                "iconColor": {
                    "name": "iconColor",
                    "setSignature": {
                        "name": "iconColor",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 34,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "iconColor",
                        "type": "string",
                        "returnType": "string",
                        "line": 33
                    }
                },
                "separator": {
                    "name": "separator",
                    "setSignature": {
                        "name": "separator",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 43,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "separator",
                        "type": "string",
                        "returnType": "string",
                        "line": 42
                    }
                },
                "isLast": {
                    "name": "isLast",
                    "setSignature": {
                        "name": "isLast",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 47,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "isLast",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 46
                    }
                },
                "breadcrumbClass": {
                    "name": "breadcrumbClass",
                    "getSignature": {
                        "name": "breadcrumbClass",
                        "type": "",
                        "returnType": "",
                        "line": 63
                    }
                }
            },
            "templateData": "<li [class]=\"breadcrumbClass\" [id]=\"id\">\n  <it-icon [icon] = \"icon\" [color] = \"iconColor\"></it-icon>\n\n  <a [href]=\"link\" focusMouse>\n    <ng-content></ng-content>\n  </a> \n  <span class=\"separator\" *ngIf=\"!isLast\">{{separator}}</span>\n</li>\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-b33bd20e7f3b966189a249b332be9d1da05026a377cc7577fd46c42e2193cd356393975572c9331f5f7071a3693952cd101d8c0a8864317011357c4088a68a7a",
            "file": "projects/design-angular-kit/src/lib/checkbox/checkbox.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => CheckboxComponent), multi: true }",
                    "type": "component"
                }
            ],
            "selector": "it-checkbox",
            "styleUrls": [
                "./checkbox.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSe la checkbox è selezionata.\n",
                    "description": "<p>Se la checkbox è selezionata.</p>\n",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSe la checkbox è disabilitata.\n",
                    "description": "<p>Se la checkbox è disabilitata.</p>\n",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "grouped",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "indeterminate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "inline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nL'etichetta della checkbox.\n",
                    "description": "<p>L&#39;etichetta della checkbox.</p>\n",
                    "line": 53,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter<CheckboxChange>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvento emesso quando il valore `checked` della checkbox cambia.\n",
                    "description": "<p>Evento emesso quando il valore <code>checked</code> della checkbox cambia.</p>\n",
                    "line": 109,
                    "type": "EventEmitter<CheckboxChange>"
                },
                {
                    "name": "indeterminateChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 95,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_controlValueAccessorChangeFn",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 116,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_grouped",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_indeterminate",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 93,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_inline",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_inputElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "<p>The native <code>&lt;input type=&quot;checkbox&quot;&gt;</code> element</p>\n",
                    "line": 26,
                    "rawdescription": "\nThe native `<input type=\"checkbox\">` element",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ]
                },
                {
                    "name": "_onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 114,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "focus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "inputId",
                    "defaultValue": "`checkbox-${identifier++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 112
                }
            ],
            "methodsClass": [
                {
                    "name": "_emitChangeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "handleChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Una checkbox con design bootstrap italia. Supporta tutte le funzionalità di una checkbox HTML5,\ned espone una API simile. Una <code>&lt;it-checkbox&gt;</code> può essere checked, unchecked, o disabled.</p>\n",
            "rawdescription": "\n\nUna checkbox con design bootstrap italia. Supporta tutte le funzionalità di una checkbox HTML5,\ned espone una API simile. Una `<it-checkbox>` può essere checked, unchecked, o disabled.\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, ChangeDetectorRef, forwardRef, ChangeDetectionStrategy, ElementRef, ViewChild } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { Util } from '../util/util';\n\nlet identifier = 0;\n\nexport class CheckboxChange {\n  source: CheckboxComponent;\n  checked: boolean;\n}\n\n/**\n * Una checkbox con design bootstrap italia. Supporta tutte le funzionalità di una checkbox HTML5,\n * ed espone una API simile. Una `<it-checkbox>` può essere checked, unchecked, o disabled.\n */\n@Component({\n  selector: 'it-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.css'],\n  providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => CheckboxComponent), multi: true }],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CheckboxComponent implements ControlValueAccessor {\n  \n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /**\n   * Se la checkbox è selezionata.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value !== this.checked) {\n      this._checked = value;\n      if(this._checked) {\n        this.indeterminate = false;    \n      }\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked = false;\n\n  @Input()\n  get grouped(): boolean { return this._grouped; }\n  set grouped(value: boolean) { this._grouped = Util.coerceBooleanProperty(value); }\n  private _grouped = false;\n  \n  /**\n   * L'etichetta della checkbox.\n   */\n  @Input()\n  label: string;\n\n  /**\n   * Se la checkbox è disabilitata.\n   */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    if (value !== this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled = false;\n\n  @Input()\n  get inline(): boolean { return this._inline; }\n  set inline(value: boolean) { this._inline = Util.coerceBooleanProperty(value); }\n  private _inline = false;\n\n\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) { \n    const newValue = Util.coerceBooleanProperty(value); \n    const changed = this._indeterminate !== newValue;\n    if(changed) {\n      this._indeterminate = newValue;\n      this.indeterminateChange.emit(this._indeterminate);\n      \n      if(this._indeterminate) {\n        queueMicrotask(() => {\n          this.checked = false;\n          this._emitChangeEvent();\n        });\n    \n      }\n      \n    }\n  }\n  private _indeterminate = false;\n\n  @Output() indeterminateChange = new EventEmitter<boolean>();\n\n  focus = false;\n  onFocus() {\n    this.focus = true;\n  }\n\n  onBlur() {\n    this.focus = false;\n  }\n  \n  /**\n   * Evento emesso quando il valore `checked` della checkbox cambia.\n   */\n  @Output() readonly change: EventEmitter<CheckboxChange> =\n    new EventEmitter<CheckboxChange>();\n\n  inputId = `checkbox-${identifier++}`;\n\n  private _onTouched: () => any = () => {};\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => { };\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef\n  ) { }\n\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  handleChange(event: Event) {\n    event.stopPropagation();\n    if (!this.disabled) {\n      if(!this.indeterminate) {\n        this._toggle();\n      } else {\n        this.indeterminate = false;\n        // reset proprietà \"checked\" per prevenire il comportamento di default dell'elemento HTML\n        this._inputElement.nativeElement.checked = this.checked;\n      }\n      this._emitChangeEvent();\n    }\n  }\n\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  private _emitChangeEvent() {\n    const event = new CheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./checkbox.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 116,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "checked": {
                    "name": "checked",
                    "setSignature": {
                        "name": "checked",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 33,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "checked",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 32,
                        "rawdescription": "\n\nSe la checkbox è selezionata.\n",
                        "description": "<p>Se la checkbox è selezionata.</p>\n"
                    }
                },
                "grouped": {
                    "name": "grouped",
                    "setSignature": {
                        "name": "grouped",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 46,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "grouped",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 45
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 60,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 59,
                        "rawdescription": "\n\nSe la checkbox è disabilitata.\n",
                        "description": "<p>Se la checkbox è disabilitata.</p>\n"
                    }
                },
                "inline": {
                    "name": "inline",
                    "setSignature": {
                        "name": "inline",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 70,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "inline",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 69
                    }
                },
                "indeterminate": {
                    "name": "indeterminate",
                    "setSignature": {
                        "name": "indeterminate",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 76,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "indeterminate",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 75
                    }
                }
            },
            "templateData": "<div class=\"form-check\" [class.form-check-group] = \"grouped\" [class.form-check-inline] = \"inline\" >\n  <input #input type=\"checkbox\"\n    [id]=\"inputId\"\n    [class.focus--mouse] = \"focus\"\n    [class.semi-checked] = \"indeterminate\"\n    [checked]=\"checked\"\n    [disabled]=\"disabled\"\n    (change)=\"handleChange($event)\"\n    (focus)=\"onFocus()\"\n    (blur)=\"onBlur()\"\n    >\n  <label\n    [attr.for]=\"inputId\" *ngIf = \"label\">{{label}}</label>\n  \n  <ng-content></ng-content>\n</div>"
        },
        {
            "name": "DropdownComponent",
            "id": "component-DropdownComponent-1805079f801cf13275ec80dd59a22e5d9d92e60632a03a6ea8ed943853d7dcad506eb6ded1cb2ea430727bc9d35ddf8f426720da5e7e302a267585b504c696c1",
            "file": "projects/design-angular-kit/src/lib/dropdown/dropdown.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-dropdown",
            "styleUrls": [
                "./dropdown.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./dropdown.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoUpdateMenuItemsIconColor",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 121,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIl colore del pulsante che attiva il dropdown.\nPuò assumere i valori primary, secondary, danger, warning, info, warning, success, light e dark\n",
                    "description": "<p>Il colore del pulsante che attiva il dropdown.\nPuò assumere i valori primary, secondary, danger, warning, info, warning, success, light e dark</p>\n",
                    "line": 75,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "dark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSe presente indica che il dropdown utilizza il tema di colorazione scura.\nAccetta una espressione booleana o può essere usato come attributo senza valore\n",
                    "description": "<p>Se presente indica che il dropdown utilizza il tema di colorazione scura.\nAccetta una espressione booleana o può essere usato come attributo senza valore</p>\n",
                    "line": 52,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "expandIcon",
                    "defaultValue": "\"it-expand\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "expandIconPosition",
                    "defaultValue": "'end'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "\"start\" | \"end\"",
                    "decorators": []
                },
                {
                    "name": "fullWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSe presente indica che le voci del dropdown si sviluppano orizzontalmente.\nAccetta una espressione booleana o può essere usato come attributo senza valore\n",
                    "description": "<p>Se presente indica che le voci del dropdown si sviluppano orizzontalmente.\nAccetta una espressione booleana o può essere usato come attributo senza valore</p>\n",
                    "line": 66,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIl testo presente sul pulsante che attiva il dropdown\n",
                    "description": "<p>Il testo presente sul pulsante che attiva il dropdown</p>\n",
                    "line": 89,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "menuHeading",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "menuPlacement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "DropdownMenuPlacement",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClose",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvento che viene lanciato ogni volta che il dropdown viene chiuso\n",
                    "description": "<p>Evento che viene lanciato ogni volta che il dropdown viene chiuso</p>\n",
                    "line": 106,
                    "type": "EventEmitter<DropdownComponent>"
                },
                {
                    "name": "onOpen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvento che viene lanciato ogni volta che il dropdown viene aperto\n",
                    "description": "<p>Evento che viene lanciato ogni volta che il dropdown viene aperto</p>\n",
                    "line": 98,
                    "type": "EventEmitter<DropdownComponent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_color",
                    "defaultValue": "DEFAULT_COLOR",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_dark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_fullWidth",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_menuPlacement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DropdownMenuPlacement",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_onClose",
                    "defaultValue": "new EventEmitter<DropdownComponent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 108,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_onOpen",
                    "defaultValue": "new EventEmitter<DropdownComponent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 100,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "id",
                    "defaultValue": "`dropdown-${identifier++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "menuItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<DropdownItemComponent>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "DropdownItemComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onOpenChange",
                    "args": [
                        {
                            "name": "isOpen",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isOpen",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateMenuItemsIconColor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Componente usata per attivare o disattivare overlay contestuali per visualizzare elenchi di link e altro ancora con questi menù a tendina</p>\n",
            "rawdescription": "\n\nComponente usata per attivare o disattivare overlay contestuali per visualizzare elenchi di link e altro ancora con questi menù a tendina\n",
            "type": "component",
            "sourceCode": "import {\n  Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ViewEncapsulation, ContentChildren, QueryList\n} from '@angular/core';\nimport { Util } from '../util/util';\nimport { ThemeColor } from '../models/ThemeColor';\nimport { DropdownItemComponent } from './dropdown-item.component';\nimport { IconColorEnum } from '../enums/icons.enum';\n\nlet identifier = 0;\n\nconst DEFAULT_COLOR = 'dropdown';\nexport type DropdownMenuPlacement = 'bottom-start' | 'top-start' | 'left-start' | 'right-start';\n\n/**\n * Componente usata per attivare o disattivare overlay contestuali per visualizzare elenchi di link e altro ancora con questi menù a tendina\n */\n@Component({\n  selector: 'it-dropdown',\n  templateUrl: './dropdown.component.html',\n  styleUrls: ['./dropdown.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class DropdownComponent {\n  id = `dropdown-${identifier++}`;\n\n  @ContentChildren(DropdownItemComponent) menuItems: QueryList<DropdownItemComponent>;\n\n\n  @Input() menuHeading: string  = \"\";\n  @Input() expandIcon: string | null = \"it-expand\";\n  @Input() expandIconPosition: 'start' | 'end' = 'end';\n\n  private _menuPlacement: DropdownMenuPlacement;\n  get menuPlacement() {\n    return this._menuPlacement;\n  }\n  @Input() set menuPlacement(value : DropdownMenuPlacement) {\n    if(value === 'left-start') {\n      this.expandIconPosition = 'start';\n    } else if (value === 'right-start') {\n      this.expandIconPosition = 'end';\n    }\n    this._menuPlacement = value;\n  }\n\n  /**\n   * Se presente indica che il dropdown utilizza il tema di colorazione scura.\n   * Accetta una espressione booleana o può essere usato come attributo senza valore\n   */\n  @Input()\n  get dark(): boolean { return this._dark; }\n  set dark(value: boolean) { \n    this._dark = Util.coerceBooleanProperty(value); \n    if(this.autoUpdateMenuItemsIconColor) {\n      this.updateMenuItemsIconColor();\n    }\n  }\n  private _dark = false;\n\n  /**\n   * Se presente indica che le voci del dropdown si sviluppano orizzontalmente.\n   * Accetta una espressione booleana o può essere usato come attributo senza valore\n   */\n  @Input()\n  get fullWidth(): boolean { return this._fullWidth; }\n  set fullWidth(value: boolean) { this._fullWidth = Util.coerceBooleanProperty(value); }\n  private _fullWidth = false;\n\n  /**\n   * Il colore del pulsante che attiva il dropdown.\n   * Può assumere i valori primary, secondary, danger, warning, info, warning, success, light e dark\n   */\n  @Input()\n  get color(): any { return this._color; }\n  set color(value: any) {\n    if (ThemeColor.is(value)) {\n      this._color = value;\n    } else {\n      this._color = DEFAULT_COLOR;\n    }\n  }\n  private _color = DEFAULT_COLOR;\n\n  /**\n   * Il testo presente sul pulsante che attiva il dropdown\n   */\n  @Input()\n  get label(): string { return this._label; }\n  set label(value: string) { this._label = value; }\n  private _label = '';\n\n\n  /**\n   * Evento che viene lanciato ogni volta che il dropdown viene aperto\n   */\n  @Output()\n  get onOpen(): EventEmitter<DropdownComponent> { return this._onOpen; }\n  set onOpen(value: EventEmitter<DropdownComponent>) { this._onOpen = value; }\n  private _onOpen = new EventEmitter<DropdownComponent>();\n\n  /**\n  * Evento che viene lanciato ogni volta che il dropdown viene chiuso\n  */\n  @Output()\n  get onClose(): EventEmitter<DropdownComponent> { return this._onClose; }\n  set onClose(value: EventEmitter<DropdownComponent>) { this._onClose = value; }\n  private _onClose = new EventEmitter<DropdownComponent>();\n\n  public isOpen: boolean = false;\n\n  onOpenChange(isOpen: boolean) {\n    this.isOpen = isOpen;\n    if(this.isOpen) {\n      this.onOpen.emit();\n    } else {\n      this.onClose.emit();\n    }\n  }\n\n  @Input() autoUpdateMenuItemsIconColor: boolean = true;\n  private updateMenuItemsIconColor() {\n    this.menuItems?.forEach(item => {\n      item.iconColor = this._dark ? IconColorEnum.light : IconColorEnum.primary;\n    });\n  }\n\n  get isDropend(): boolean {\n    return this._menuPlacement === 'right-start';\n  }\n\n  get isDropstart(): boolean {\n    return this._menuPlacement === 'left-start';\n  }\n\n  get isDropup(): boolean {\n    return this._menuPlacement === 'top-start';\n  }\n\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".dropup .dropdown-toggle::after {\n    display: none;\n}\n\n.dropup .dropdown-toggle .icon-expand, .dropup .btn-dropdown .icon-expand {\n    transform: scaleY(-1);\n}\n\n.dropup .btn-dropdown[aria-expanded=true] .icon-expand, .dropup .dropdown-toggle[aria-expanded=true] .icon-expand {\n    transform: scaleY(1);\n}",
                    "styleUrl": "./dropdown.component.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "menuPlacement": {
                    "name": "menuPlacement",
                    "setSignature": {
                        "name": "menuPlacement",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "DropdownMenuPlacement",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 38,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "DropdownMenuPlacement",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "menuPlacement",
                        "type": "",
                        "returnType": "",
                        "line": 35
                    }
                },
                "dark": {
                    "name": "dark",
                    "setSignature": {
                        "name": "dark",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 53,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "dark",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 52,
                        "rawdescription": "\n\nSe presente indica che il dropdown utilizza il tema di colorazione scura.\nAccetta una espressione booleana o può essere usato come attributo senza valore\n",
                        "description": "<p>Se presente indica che il dropdown utilizza il tema di colorazione scura.\nAccetta una espressione booleana o può essere usato come attributo senza valore</p>\n"
                    }
                },
                "fullWidth": {
                    "name": "fullWidth",
                    "setSignature": {
                        "name": "fullWidth",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 67,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "fullWidth",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 66,
                        "rawdescription": "\n\nSe presente indica che le voci del dropdown si sviluppano orizzontalmente.\nAccetta una espressione booleana o può essere usato come attributo senza valore\n",
                        "description": "<p>Se presente indica che le voci del dropdown si sviluppano orizzontalmente.\nAccetta una espressione booleana o può essere usato come attributo senza valore</p>\n"
                    }
                },
                "color": {
                    "name": "color",
                    "setSignature": {
                        "name": "color",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 76,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "color",
                        "type": "any",
                        "returnType": "any",
                        "line": 75,
                        "rawdescription": "\n\nIl colore del pulsante che attiva il dropdown.\nPuò assumere i valori primary, secondary, danger, warning, info, warning, success, light e dark\n",
                        "description": "<p>Il colore del pulsante che attiva il dropdown.\nPuò assumere i valori primary, secondary, danger, warning, info, warning, success, light e dark</p>\n"
                    }
                },
                "label": {
                    "name": "label",
                    "setSignature": {
                        "name": "label",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 90,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "label",
                        "type": "string",
                        "returnType": "string",
                        "line": 89,
                        "rawdescription": "\n\nIl testo presente sul pulsante che attiva il dropdown\n",
                        "description": "<p>Il testo presente sul pulsante che attiva il dropdown</p>\n"
                    }
                },
                "onOpen": {
                    "name": "onOpen",
                    "setSignature": {
                        "name": "onOpen",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "EventEmitter<DropdownComponent>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 99,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "EventEmitter<DropdownComponent>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "onOpen",
                        "type": "",
                        "returnType": "EventEmitter<DropdownComponent>",
                        "line": 98,
                        "rawdescription": "\n\nEvento che viene lanciato ogni volta che il dropdown viene aperto\n",
                        "description": "<p>Evento che viene lanciato ogni volta che il dropdown viene aperto</p>\n"
                    }
                },
                "onClose": {
                    "name": "onClose",
                    "setSignature": {
                        "name": "onClose",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "EventEmitter<DropdownComponent>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 107,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "EventEmitter<DropdownComponent>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "onClose",
                        "type": "",
                        "returnType": "EventEmitter<DropdownComponent>",
                        "line": 106,
                        "rawdescription": "\n\nEvento che viene lanciato ogni volta che il dropdown viene chiuso\n",
                        "description": "<p>Evento che viene lanciato ogni volta che il dropdown viene chiuso</p>\n"
                    }
                },
                "isDropend": {
                    "name": "isDropend",
                    "getSignature": {
                        "name": "isDropend",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 128
                    }
                },
                "isDropstart": {
                    "name": "isDropstart",
                    "getSignature": {
                        "name": "isDropstart",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 132
                    }
                },
                "isDropup": {
                    "name": "isDropup",
                    "getSignature": {
                        "name": "isDropup",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 136
                    }
                }
            },
            "templateData": "<div  itDropdown (openChange)=\"onOpenChange($event)\"  \n      [placement]=\"menuPlacement\"\n      [class.dropstart] = \"isDropstart\"\n      [class.dropend] = \"isDropend\"\n      [class.dropup] = \"isDropup\">\n  <button class=\"dropdown-toggle\" [itButton]=\"color\" itDropdownToggle id=\"dropdownMenuButton\" aria-haspopup=\"true\">\n    <it-icon *ngIf = \"expandIcon && expandIconPosition === 'start'\" [icon]=\"expandIcon\" [expand]=\"true\"> </it-icon>\n    {{label}}\n    <it-icon *ngIf = \"expandIcon && expandIconPosition === 'end'\" [icon]=\"expandIcon\" [expand]=\"true\"> </it-icon>\n  </button>\n  <div itDropdownMenu aria-labelledby=\"dropdownMenuButton\" [class.dark]=\"dark\" [class.full-width]=\"fullWidth\">\n    <div class=\"link-list-wrapper\">\n      <div class=\"link-list-heading\" *ngIf = \"menuHeading\">{{menuHeading}}</div>\n      <ul class=\"link-list\">\n        <ng-content></ng-content>\n      </ul>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "DropdownDividerComponent",
            "id": "component-DropdownDividerComponent-4324a0c98074ea8313b1a70b861bdac85739338121619ab919e6fd6b4b2a07e2a1d5df72d07797e662f2fd493f14db7fafa6d884bbc8dc6573c6de337a16f8c4",
            "file": "projects/design-angular-kit/src/lib/dropdown/dropdown-divider.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-dropdown-divider",
            "styleUrls": [
                "./dropdown-divider.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./dropdown-divider.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'it-dropdown-divider',\n  templateUrl: './dropdown-divider.component.html',\n  styleUrls: ['./dropdown-divider.component.css']\n})\nexport class DropdownDividerComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dropdown-divider.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<li>\n  <span class=\"divider\"></span>\n</li>"
        },
        {
            "name": "DropdownItemComponent",
            "id": "component-DropdownItemComponent-01aa774920cf705f5d7d3c547b3b8288f34464f9653bef3cb4e0879668df75e0ba2cdfb76aa13d2ad53a80b7ac677772bf72807f27b7a907845ad41c9c8c45f3",
            "file": "projects/design-angular-kit/src/lib/dropdown/dropdown-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-dropdown-item",
            "styleUrls": [
                "./dropdown-item.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./dropdown-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSe presente indica che l'elemento viene renderizzato come elemento attivo.\nAccetta una espressione booleana o può essere usato come attributo senza valore\n",
                    "description": "<p>Se presente indica che l&#39;elemento viene renderizzato come elemento attivo.\nAccetta una espressione booleana o può essere usato come attributo senza valore</p>\n",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSe presente indica che l'elemento è disabilitato.\nAccetta una espressione booleana o può essere usato come attributo senza valore\n",
                    "description": "<p>Se presente indica che l&#39;elemento è disabilitato.\nAccetta una espressione booleana o può essere usato come attributo senza valore</p>\n",
                    "line": 41,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLa classe dell'icona da usare prima o dopo del testo dell'elemento del dropdown\n",
                    "description": "<p>La classe dell&#39;icona da usare prima o dopo del testo dell&#39;elemento del dropdown</p>\n",
                    "line": 60,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "IconColorEnum",
                    "decorators": []
                },
                {
                    "name": "iconPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLa posizione dell'icona rispetto al testo dell'elemento del dropdown.\nPuò assumere valori right o left.\n",
                    "description": "<p>La posizione dell&#39;icona rispetto al testo dell&#39;elemento del dropdown.\nPuò assumere valori right o left.</p>\n",
                    "line": 69,
                    "type": "HorizontalAlign",
                    "decorators": []
                },
                {
                    "name": "large",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSe presente indica che il testo dell'elemento viene renderizzato più grande.\nAccetta una espressione booleana o può essere usato come attributo senza valore\n",
                    "description": "<p>Se presente indica che il testo dell&#39;elemento viene renderizzato più grande.\nAccetta una espressione booleana o può essere usato come attributo senza valore</p>\n",
                    "line": 52,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIl link alla pagina verso cui andare al click sull'elemento del dropdown\n",
                    "description": "<p>Il link alla pagina verso cui andare al click sull&#39;elemento del dropdown</p>\n",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_active",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_icon",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_iconColor",
                    "defaultValue": "IconColorEnum.primary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_iconPosition",
                    "defaultValue": "HorizontalAlign.right",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_large",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_link",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "id",
                    "defaultValue": "`dropdown-item-${identifier++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Componente usata per visualizzare una voce di menù all&#39;interno di una dropdown</p>\n",
            "rawdescription": "\n\nComponente usata per visualizzare una voce di menù all'interno di una dropdown\n",
            "type": "component",
            "sourceCode": "import { Component, Input} from '@angular/core';\nimport { IconColorEnum } from '../enums/icons.enum';\nimport { HorizontalAlign, HORIZONTAL_ALIGN } from '../models/Alignment';\nimport { Util } from '../util/util';\n\nlet identifier = 0;\n\n/**\n * Componente usata per visualizzare una voce di menù all'interno di una dropdown\n */\n@Component({\n  selector: 'it-dropdown-item',\n  templateUrl: './dropdown-item.component.html',\n  styleUrls: ['./dropdown-item.component.css']\n})\nexport class DropdownItemComponent {\n  id = `dropdown-item-${identifier++}`;\n\n  /**\n   * Il link alla pagina verso cui andare al click sull'elemento del dropdown\n   */\n  @Input()\n  get link(): string { return !this.disabled ? this._link : ''; }\n  set link(value: string) { this._link = value; }\n  private _link = '';\n\n  /**\n   * Se presente indica che l'elemento viene renderizzato come elemento attivo.\n   * Accetta una espressione booleana o può essere usato come attributo senza valore\n   */\n  @Input()\n  get active(): boolean { return this._active; }\n  set active(value: boolean) { this._active = Util.coerceBooleanProperty(value); }\n  private _active = false;\n\n  /**\n   * Se presente indica che l'elemento è disabilitato.\n   * Accetta una espressione booleana o può essere usato come attributo senza valore\n   */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = Util.coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  /**\n   * Se presente indica che il testo dell'elemento viene renderizzato più grande.\n   * Accetta una espressione booleana o può essere usato come attributo senza valore\n   */\n  @Input()\n  get large(): boolean { return this._large; }\n  set large(value: boolean) { this._large = Util.coerceBooleanProperty(value); }\n  private _large = false;\n\n  /**\n   * La classe dell'icona da usare prima o dopo del testo dell'elemento del dropdown\n   */\n  @Input()\n  get icon(): string { return this._icon; }\n  set icon(value: string) { this._icon = value; }\n  private _icon = undefined;\n\n  /**\n   * La posizione dell'icona rispetto al testo dell'elemento del dropdown.\n   * Può assumere valori right o left.\n   */\n  @Input()\n  get iconPosition(): HorizontalAlign { return this._iconPosition; }\n  set iconPosition(value: any) {\n    if (HORIZONTAL_ALIGN.is(value)) {\n      this._iconPosition = value as HorizontalAlign;\n    } else {\n      this._iconPosition = HorizontalAlign.right;\n    }\n  }\n  private _iconPosition = HorizontalAlign.right;\n\n\n  @Input()\n  get iconColor(): IconColorEnum { return this._iconColor; }\n  set iconColor(value: IconColorEnum) { this._iconColor = value; }\n  private _iconColor = IconColorEnum.primary;\n\n  get dropdownItemClass() {\n    return `list-item ${this.iconPosition}-icon`;\n  }\n\n  get iconClass() {\n    return `${this.icon} ${this.iconPosition}`;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".disabled-item-link {\n    pointer-events: none;\n}",
                    "styleUrl": "./dropdown-item.component.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "link": {
                    "name": "link",
                    "setSignature": {
                        "name": "link",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 24,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "link",
                        "type": "string",
                        "returnType": "string",
                        "line": 23,
                        "rawdescription": "\n\nIl link alla pagina verso cui andare al click sull'elemento del dropdown\n",
                        "description": "<p>Il link alla pagina verso cui andare al click sull&#39;elemento del dropdown</p>\n"
                    }
                },
                "active": {
                    "name": "active",
                    "setSignature": {
                        "name": "active",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 33,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "active",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 32,
                        "rawdescription": "\n\nSe presente indica che l'elemento viene renderizzato come elemento attivo.\nAccetta una espressione booleana o può essere usato come attributo senza valore\n",
                        "description": "<p>Se presente indica che l&#39;elemento viene renderizzato come elemento attivo.\nAccetta una espressione booleana o può essere usato come attributo senza valore</p>\n"
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 42,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 41,
                        "rawdescription": "\n\nSe presente indica che l'elemento è disabilitato.\nAccetta una espressione booleana o può essere usato come attributo senza valore\n",
                        "description": "<p>Se presente indica che l&#39;elemento è disabilitato.\nAccetta una espressione booleana o può essere usato come attributo senza valore</p>\n"
                    }
                },
                "large": {
                    "name": "large",
                    "setSignature": {
                        "name": "large",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 53,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "large",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 52,
                        "rawdescription": "\n\nSe presente indica che il testo dell'elemento viene renderizzato più grande.\nAccetta una espressione booleana o può essere usato come attributo senza valore\n",
                        "description": "<p>Se presente indica che il testo dell&#39;elemento viene renderizzato più grande.\nAccetta una espressione booleana o può essere usato come attributo senza valore</p>\n"
                    }
                },
                "icon": {
                    "name": "icon",
                    "setSignature": {
                        "name": "icon",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 61,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "icon",
                        "type": "string",
                        "returnType": "string",
                        "line": 60,
                        "rawdescription": "\n\nLa classe dell'icona da usare prima o dopo del testo dell'elemento del dropdown\n",
                        "description": "<p>La classe dell&#39;icona da usare prima o dopo del testo dell&#39;elemento del dropdown</p>\n"
                    }
                },
                "iconPosition": {
                    "name": "iconPosition",
                    "setSignature": {
                        "name": "iconPosition",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 70,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "iconPosition",
                        "type": "",
                        "returnType": "HorizontalAlign",
                        "line": 69,
                        "rawdescription": "\n\nLa posizione dell'icona rispetto al testo dell'elemento del dropdown.\nPuò assumere valori right o left.\n",
                        "description": "<p>La posizione dell&#39;icona rispetto al testo dell&#39;elemento del dropdown.\nPuò assumere valori right o left.</p>\n"
                    }
                },
                "iconColor": {
                    "name": "iconColor",
                    "setSignature": {
                        "name": "iconColor",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "IconColorEnum",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 82,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "IconColorEnum",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "iconColor",
                        "type": "",
                        "returnType": "IconColorEnum",
                        "line": 81
                    }
                },
                "dropdownItemClass": {
                    "name": "dropdownItemClass",
                    "getSignature": {
                        "name": "dropdownItemClass",
                        "type": "",
                        "returnType": "",
                        "line": 85
                    }
                },
                "iconClass": {
                    "name": "iconClass",
                    "getSignature": {
                        "name": "iconClass",
                        "type": "",
                        "returnType": "",
                        "line": 89
                    }
                }
            },
            "templateData": "<li [id]=\"id\">\n  <a itDropdownItem focusMouse\n    [attr.href]=\"link\"\n    [attr.tabindex]=\"this.disabled ? -1 : 0\"\n    [class]=\"dropdownItemClass\"\n    [ngClass]=\"{\n      'large' : large, \n      'active' : active,\n      'disabled' : disabled,\n      'disabled-item-link' : disabled,\n      'left-icon': iconPosition === 'left',\n      'right-icon': iconPosition === 'right'\n    }\">\n    <span>\n      <ng-content></ng-content>\n    </span>\n    <it-icon *ngIf = \"icon\" [icon]=\"icon\" [position]=\"iconPosition\" [color] = \"iconColor\"></it-icon>\n  </a>\n</li>"
        },
        {
            "name": "FormInputComponent",
            "id": "component-FormInputComponent-345511f33d2b07621a8d756c4d4db99314b334b0858223f836bc2d0c01315f2b3562a61bf970411188879a57606b55cf51c04f6c8d7ff0b472dde522e0cfdd8d",
            "file": "projects/design-angular-kit/src/lib/form-input/form-input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FormInputComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "it-input",
            "styleUrls": [
                "./form-input.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./form-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "adaptive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpzionale.\nNel caso di input numerico, indica se il campo si deve ridimensionare automaticamente a seconda del valore contenuto in esso.\nAccetta una espressione booleana o può essere usato come attributo senza valore\n",
                    "description": "<p>Opzionale.\nNel caso di input numerico, indica se il campo si deve ridimensionare automaticamente a seconda del valore contenuto in esso.\nAccetta una espressione booleana o può essere usato come attributo senza valore</p>\n",
                    "line": 282,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "autoCompleteData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpzionale.\nDisponibile solo se il type è search.\nIndica la lista di elementi ricercabili su cui basare il sistema di autocompletamento della input\n",
                    "description": "<p>Opzionale.\nDisponibile solo se il type è search.\nIndica la lista di elementi ricercabili su cui basare il sistema di autocompletamento della input</p>\n",
                    "line": 309,
                    "type": "Array<AutoCompleteItem>",
                    "decorators": []
                },
                {
                    "name": "autocompleteWrapperSize",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDimensione dell'input di autocomplete. Di default ha dimensione standard.\n",
                    "description": "<p>Dimensione dell&#39;input di autocomplete. Di default ha dimensione standard.</p>\n",
                    "line": 116,
                    "type": "\"big\" | \"default\"",
                    "decorators": []
                },
                {
                    "name": "capsLockActiveLabel",
                    "defaultValue": "'CAPS LOCK inserito'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLa label da mostrare in caso sia attivo il CAPS LOCK\n",
                    "description": "<p>La label da mostrare in caso sia attivo il CAPS LOCK</p>\n",
                    "line": 339,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "currency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpzionale.\nNel caso di input numerico, indica se il campo è una valuta.\nAccetta una espressione booleana o può essere usato come attributo senza valore\n",
                    "description": "<p>Opzionale.\nNel caso di input numerico, indica se il campo è una valuta.\nAccetta una espressione booleana o può essere usato come attributo senza valore</p>\n",
                    "line": 262,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disableCapsLockAlert",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpzionale.\nIndica se disabilitare l'avviso di CAPS LOCK attivo\nAccetta una espressione booleana o può essere usato come attributo senza valore\n",
                    "description": "<p>Opzionale.\nIndica se disabilitare l&#39;avviso di CAPS LOCK attivo\nAccetta una espressione booleana o può essere usato come attributo senza valore</p>\n",
                    "line": 327,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpzionale.\nIndica se il campo in questione è disabilitato.\nAccetta una espressione booleana o può essere usato come attributo senza valore\n",
                    "description": "<p>Opzionale.\nIndica se il campo in questione è disabilitato.\nAccetta una espressione booleana o può essere usato come attributo senza valore</p>\n",
                    "line": 252,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "enablePasswordStrengthMeter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpzionale. Indica se abilitare il controllo sulla sicurezza della password\n",
                    "description": "<p>Opzionale. Indica se abilitare il controllo sulla sicurezza della password</p>\n",
                    "line": 104,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica l'icona da visualizzare a sinistra del campo di input\n",
                    "description": "<p>Indica l&#39;icona da visualizzare a sinistra del campo di input</p>\n",
                    "line": 242,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica l'id dell'elemento HTML\n",
                    "description": "<p>Indica l&#39;id dell&#39;elemento HTML</p>\n",
                    "line": 132,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica il valore della label da visualizzare\n",
                    "description": "<p>Indica il valore della label da visualizzare</p>\n",
                    "line": 182,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "labelVisuallyHidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica se la label dell'input deve essere visualizzata dall'utente o solamente visibile per lo screen reader\n",
                    "description": "<p>Indica se la label dell&#39;input deve essere visualizzata dall&#39;utente o solamente visibile per lo screen reader</p>\n",
                    "line": 190,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica il valore che avrà l'attributo HTML \"max\" per l'input di tipo number\n",
                    "description": "<p>Indica il valore che avrà l&#39;attributo HTML &quot;max&quot; per l&#39;input di tipo number</p>\n",
                    "line": 207,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica il valore che avrà l'attributo HTML \"min\" per l'input di tipo number\n",
                    "description": "<p>Indica il valore che avrà l&#39;attributo HTML &quot;min&quot; per l&#39;input di tipo number</p>\n",
                    "line": 199,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica l'attributo name del componente HTML\n",
                    "description": "<p>Indica l&#39;attributo name del componente HTML</p>\n",
                    "line": 144,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "note",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica il testo di aiuto sotto la input\n",
                    "description": "<p>Indica il testo di aiuto sotto la input</p>\n",
                    "line": 224,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "passwordStrengthMeterConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 120,
                    "type": "PasswordStrengthMeterConfig",
                    "decorators": []
                },
                {
                    "name": "percentage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpzionale.\nNel caso di input numerico, indica se il campo è una percentuale.\nAccetta una espressione booleana o può essere usato come attributo senza valore\n",
                    "description": "<p>Opzionale.\nNel caso di input numerico, indica se il campo è una percentuale.\nAccetta una espressione booleana o può essere usato come attributo senza valore</p>\n",
                    "line": 272,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica il testo presente nel campo vuoto. Nel caso sia già presente la label, il placeholder non verrà mostrato\n",
                    "description": "<p>Indica il testo presente nel campo vuoto. Nel caso sia già presente la label, il placeholder non verrà mostrato</p>\n",
                    "line": 232,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpzionale.\nIndica se il campo in questione è di sola lettura.\nAccetta una espressione booleana o può essere usato come attributo senza valore\n",
                    "description": "<p>Opzionale.\nIndica se il campo in questione è di sola lettura.\nAccetta una espressione booleana o può essere usato come attributo senza valore</p>\n",
                    "line": 292,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "readonlyPlainText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpzionale. Indica se mostrare gli input readonly nella forma stilizzata come testo normale\n",
                    "description": "<p>Opzionale. Indica se mostrare gli input readonly nella forma stilizzata come testo normale</p>\n",
                    "line": 95,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "step",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica il valore che avrà l'attributo HTML \"step\" per l'input di tipo number\n",
                    "description": "<p>Indica il valore che avrà l&#39;attributo HTML &quot;step&quot; per l&#39;input di tipo number</p>\n",
                    "line": 215,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica il tipo di campo. Puo' assumere i valori text, email, password e number\n",
                    "description": "<p>Indica il tipo di campo. Puo&#39; assumere i valori text, email, password e number</p>\n",
                    "line": 156,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter<FormInputChange>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvento emesso quando il valore dell'input cambia.\nGli eventi di change sono emessi soltanto quando il valore cambia a causa dell'interazione dell'utente\ncon il campo d'input.\n",
                    "description": "<p>Evento emesso quando il valore dell&#39;input cambia.\nGli eventi di change sono emessi soltanto quando il valore cambia a causa dell&#39;interazione dell&#39;utente\ncon il campo d&#39;input.</p>\n",
                    "line": 319,
                    "type": "EventEmitter<FormInputChange>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_adaptive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 284,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_autoCompleteData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<AutoCompleteItem>",
                    "optional": false,
                    "description": "",
                    "line": 311,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_controlValueAccessorChangeFn",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 378,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_currency",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 264,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_disableCapsLockAlert",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 329,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 254,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_enablePasswordStrengthMeter",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 106,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_formInputPasswordUtils",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormInputPasswordUtils",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 244,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_id",
                    "defaultValue": "`form-input-${identifier++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 138,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_inputElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'inputElement', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_isInitialized",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 377,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_isLabelActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 356,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_isPasswordMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 365,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_isPasswordVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 374,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 184,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_labelVisuallyHidden",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 192,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 209,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 201,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 150,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_note",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 226,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 379,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_passwordStrengthMeterConfig",
                    "defaultValue": "FormInputPasswordUtils.DEFAULT_CONFIG",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PasswordStrengthMeterConfig",
                    "optional": false,
                    "description": "",
                    "line": 118,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_percentage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 274,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 236,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_prefixChildren",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ItPrefixDirective>",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "ItPrefixDirective, {descendants: true}"
                        }
                    ]
                },
                {
                    "name": "_readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 294,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_readonlyPlainText",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_step",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 217,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_suffixChildren",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ItSuffixDirective>",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "ItSuffixDirective, {descendants: true}"
                        }
                    ]
                },
                {
                    "name": "_textPrefixChildren",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ItTextPrefixDirective>",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "ItTextPrefixDirective, {descendants: true}"
                        }
                    ]
                },
                {
                    "name": "_textSuffixChildren",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ItTextSuffixDirective>",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "ItTextSuffixDirective, {descendants: true}"
                        }
                    ]
                },
                {
                    "name": "_type",
                    "defaultValue": "INPUT_TYPES.TEXT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 176,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "focus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Indica se è stato effettuato il focus sul campo di input</p>\n",
                    "line": 382,
                    "rawdescription": "\nIndica se è stato effettuato il focus sul campo di input"
                },
                {
                    "name": "INPUT_TYPES",
                    "defaultValue": "INPUT_TYPES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "isCapsLockActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Indica se è attivo il CAPS LOCK</p>\n",
                    "line": 334,
                    "rawdescription": "\n\nIndica se è attivo il CAPS LOCK\n"
                },
                {
                    "name": "passwordScore",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Punteggio di sicurezza calcolato in base alla password immessa se enablePasswordStrengthMeter ha valore true</p>\n",
                    "line": 111,
                    "rawdescription": "\n\nPunteggio di sicurezza calcolato in base alla password immessa se enablePasswordStrengthMeter ha valore true\n"
                },
                {
                    "name": "showAutocompletion",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 376
                }
            ],
            "methodsClass": [
                {
                    "name": "_emitChangeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 384,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "autocompleteItemTrackByValueFn",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "AutoCompleteItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 551,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "AutoCompleteItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "decrementNumberValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 571,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDecrementa il valore dell'input numerico di tanto quanto vale lo step\n",
                    "description": "<p>Decrementa il valore dell&#39;input numerico di tanto quanto vale lo step</p>\n"
                },
                {
                    "name": "getRelatedEntries",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 469,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "incrementNumberValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 559,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIncrementa il valore dell'input numerico di tanto quanto vale lo step\n",
                    "description": "<p>Incrementa il valore dell&#39;input numerico di tanto quanto vale lo step</p>\n"
                },
                {
                    "name": "isAutocompletable",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 490,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 419,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 390,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 452,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 431,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEntryClick",
                    "args": [
                        {
                            "name": "entry",
                            "type": "AutoCompleteItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 498,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entry",
                            "type": "AutoCompleteItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 447,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onInput",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 436,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onKeyUp",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 546,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:click', ['$event']"
                        },
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:keydown', ['$event']"
                        },
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:keyup', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "recalculatePasswordStrength",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 522,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRicalcola il punteggio di sicurezza in base al valore corrente\n",
                    "description": "<p>Ricalcola il punteggio di sicurezza in base al valore corrente</p>\n"
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 408,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 412,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 396,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:click",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 546
                },
                {
                    "name": "window:keydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 546
                },
                {
                    "name": "window:keyup",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 546
                }
            ],
            "description": "<p>Elementi e stili per la creazione di input accessibili e responsivi.</p>\n",
            "rawdescription": "\n\nElementi e stili per la creazione di input accessibili e responsivi.\n",
            "type": "component",
            "sourceCode": "import {\n  Component, Input, ChangeDetectionStrategy, forwardRef,\n  AfterContentInit, Output, EventEmitter, ChangeDetectorRef, ViewChild, ElementRef, ContentChildren, QueryList, AfterContentChecked, OnInit, HostListener\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { merge } from 'rxjs';\nimport { InputType, INPUT_TYPES } from '../models/InputType';\nimport { Util } from '../util/util';\nimport { FormInputPasswordUtils } from './form-input-password.utils';\nimport { ItPrefixDirective } from './it-prefix.directive';\nimport { ItSuffixDirective } from './it-suffix.directive';\nimport { ItTextPrefixDirective } from './it-text-prefix.directive';\nimport { ItTextSuffixDirective } from './it-text-suffix.directive';\n\nlet identifier = 0;\n\nexport class FormInputChange {\n  constructor(\n    public source: FormInputComponent,\n    public value: any\n  ) { }\n}\n\nexport interface PasswordStrengthMeterConfig {\n  /** Testo per il punteggio di forza della password minimo */\n  shortPass: string,\n  /** Testo per punteggio di forza della password basso\t */\n  badPass: string,\n  /** Testo per punteggio di forza della password buono\t */\n  goodPass: string,\n  /** Testo per il punteggio di forza della password massimo\t */\n  strongPass: string,\n  /** Testo di aiuto */\n  enterPass: string,\n  /** Testo per avvertire che il CAPS LOCK è inserito\t */\n  alertCaps: string,\n  /** Lunghezza minima per il calcolo della forza della password (soglia password molto debole)\t */\n  showText: boolean,\n  /** Attiva/disattiva la visibilità dei messaggi di errore\t */\n  minimumLength: number,\n}\n\n\n/**\n * Elemento disponibile per l'autocompletamento del it-form-input\n */\nexport interface AutoCompleteItem {\n  /** Valore voce di autocompletamento */\n  value: string;\n  /** Opzionale. Path in cui ricercare l'immagine dell'avatar da posizionare a sinistra della voce di autocompletamento */\n  avatarSrcPath?: string;\n  /** Opzionale. Testo in alternativa dell'avatar per accessibilità */\n  avatarAltText?: string;\n  /** Opzionale. Icona posizionata a sinistra della voce di autocompletamento */\n  icon?: string;\n  /** Opzionale. Label posizionata a destra della voce di autocompletamento */\n  label?: string;\n  /** Opzionale. Link relativo all'elemento */\n  link?: string\n}\n\n/**\n * Elementi e stili per la creazione di input accessibili e responsivi.\n */\n@Component({\n  selector: 'it-input',\n  templateUrl: './form-input.component.html',\n  styleUrls: ['./form-input.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => FormInputComponent),\n    multi: true\n  }]\n})\nexport class FormInputComponent implements OnInit, AfterContentInit, ControlValueAccessor {\n\n  private _formInputPasswordUtils: FormInputPasswordUtils;\n\n  @ContentChildren(ItPrefixDirective, {descendants: true}) _prefixChildren: QueryList<ItPrefixDirective>;\n  @ContentChildren(ItTextPrefixDirective, {descendants: true}) _textPrefixChildren: QueryList<ItTextPrefixDirective>;\n\n  @ContentChildren(ItSuffixDirective, {descendants: true}) _suffixChildren: QueryList<ItSuffixDirective>;\n  @ContentChildren(ItTextSuffixDirective, {descendants: true}) _textSuffixChildren: QueryList<ItTextSuffixDirective>;\n\n  INPUT_TYPES = INPUT_TYPES;\n\n  @ViewChild('inputElement', { static: false })\n  private _inputElement: ElementRef;\n\n  /**\n   * Opzionale. Indica se mostrare gli input readonly nella forma stilizzata come testo normale\n   */\n  @Input()\n  get readonlyPlainText(): boolean { return this._readonlyPlainText; }\n  set readonlyPlainText(value: boolean) { this._readonlyPlainText = Util.coerceBooleanProperty(value); }\n  private _readonlyPlainText: boolean = false;\n\n\n  /**\n   * Opzionale. Indica se abilitare il controllo sulla sicurezza della password\n   */\n  @Input()\n  get enablePasswordStrengthMeter(): boolean { return this._enablePasswordStrengthMeter; }\n  set enablePasswordStrengthMeter(value: boolean) { this._enablePasswordStrengthMeter = Util.coerceBooleanProperty(value); }\n  private _enablePasswordStrengthMeter: boolean = false;\n\n  /**\n   * Punteggio di sicurezza calcolato in base alla password immessa se enablePasswordStrengthMeter ha valore true\n   */\n  passwordScore: number = 0;\n\n  /**\n   * Dimensione dell'input di autocomplete. Di default ha dimensione standard.\n   */\n  @Input() autocompleteWrapperSize: 'big' | 'default' = 'default';\n\n  private _passwordStrengthMeterConfig: PasswordStrengthMeterConfig = FormInputPasswordUtils.DEFAULT_CONFIG;\n\n  @Input() set passwordStrengthMeterConfig(newConfig: PasswordStrengthMeterConfig) {\n    this._passwordStrengthMeterConfig = {...this._passwordStrengthMeterConfig, ...newConfig};\n  }\n\n  get passwordStrengthMeterConfig(): PasswordStrengthMeterConfig {\n    return this._passwordStrengthMeterConfig;\n  }\n\n  /**\n   * Indica l'id dell'elemento HTML\n   */\n  @Input()\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    this._id = value;\n  }\n  private _id = `form-input-${identifier++}`;\n\n  /**\n   * Indica l'attributo name del componente HTML\n   */\n  @Input()\n  get name(): string {\n    return this._name;\n  }\n  set name(value: string) {\n    this._name = value;\n  }\n  private _name: string;\n\n  /**\n   * Indica il tipo di campo. Puo' assumere i valori text, email, password e number\n   */\n  @Input()\n  get type(): string {\n    return this._type;\n  }\n  set type(value: string) {\n    if (InputType.is(value)) {\n      if (value === INPUT_TYPES.NUMBER) {\n        if (isNaN(Number(this.value))) {\n          this.value = '';\n          this.onChange();\n        }\n      }\n      this._type = value;\n    } else {\n      this._type = INPUT_TYPES.TEXT;\n    }\n\n    this._isPasswordMode = this._type === INPUT_TYPES.PASSWORD;\n    this._isPasswordVisible = false;\n    this.showAutocompletion = false;\n  }\n  private _type = INPUT_TYPES.TEXT;\n\n  /**\n   * Indica il valore della label da visualizzare\n   */\n  @Input()\n  get label(): string { return this._label; }\n  set label(value: string) { this._label = value; }\n  private _label: string;\n\n  /**\n   * Indica se la label dell'input deve essere visualizzata dall'utente o solamente visibile per lo screen reader\n   */\n  @Input()\n  get labelVisuallyHidden(): boolean { return this._labelVisuallyHidden; }\n  set labelVisuallyHidden(value: boolean) { this._labelVisuallyHidden = value; }\n  private _labelVisuallyHidden: boolean = false;\n\n\n  /**\n   * Indica il valore che avrà l'attributo HTML \"min\" per l'input di tipo number\n   */\n  @Input()\n  get min(): number { return this._min; }\n  set min(value: number) { this._min = Util.coerceNumberProperty(value); }\n  private _min: number;\n   \n  /**\n   * Indica il valore che avrà l'attributo HTML \"max\" per l'input di tipo number\n   */\n  @Input()\n  get max(): number { return this._max; }\n  set max(value: number) { this._max = Util.coerceNumberProperty(value); }\n  private _max: number;\n\n  /**\n   * Indica il valore che avrà l'attributo HTML \"step\" per l'input di tipo number\n   */\n  @Input()\n  get step(): number { return this._step; }\n  set step(value: number) { this._step = Util.coerceNumberProperty(value); }\n  private _step: number = 1;\n\n\n  /**\n   * Indica il testo di aiuto sotto la input\n   */\n  @Input()\n  get note(): string { return this._note; }\n  set note(value: string) { this._note = value; }\n  private _note: string;\n\n  /**\n   * Indica il testo presente nel campo vuoto. Nel caso sia già presente la label, il placeholder non verrà mostrato\n   */\n  @Input()\n  get placeholder(): string {\n    return this._placeholder || '';\n  }\n  set placeholder(value: string) { this._placeholder = value; }\n  private _placeholder: string;\n\n  /**\n   * Indica l'icona da visualizzare a sinistra del campo di input\n   */\n  @Input()\n  get icon(): string { return this._icon; }\n  set icon(value: string) { this._icon = value; }\n  private _icon: string;\n\n  /**\n   * Opzionale.\n   * Indica se il campo in questione è disabilitato.\n   * Accetta una espressione booleana o può essere usato come attributo senza valore\n   */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) { this._disabled = Util.coerceBooleanProperty(value); }\n  private _disabled = false;\n\n   /**\n   * Opzionale.\n   * Nel caso di input numerico, indica se il campo è una valuta.\n   * Accetta una espressione booleana o può essere usato come attributo senza valore\n   */\n  @Input()\n  get currency(): boolean { return this._currency; }\n  set currency(value: boolean) { this._currency = Util.coerceBooleanProperty(value); }\n  private _currency = false;\n\n   /**\n   * Opzionale.\n   * Nel caso di input numerico, indica se il campo è una percentuale.\n   * Accetta una espressione booleana o può essere usato come attributo senza valore\n   */\n  @Input()\n  get percentage(): boolean { return this._percentage; }\n  set percentage(value: boolean) { this._percentage = Util.coerceBooleanProperty(value); }\n  private _percentage = false;\n\n  /**\n   * Opzionale.\n   * Nel caso di input numerico, indica se il campo si deve ridimensionare automaticamente a seconda del valore contenuto in esso.\n   * Accetta una espressione booleana o può essere usato come attributo senza valore\n   */\n  @Input()\n  get adaptive(): boolean { return this._adaptive; }\n  set adaptive(value: boolean) { this._adaptive = Util.coerceBooleanProperty(value); }\n  private _adaptive = false;\n\n  /**\n   * Opzionale.\n   * Indica se il campo in questione è di sola lettura.\n   * Accetta una espressione booleana o può essere usato come attributo senza valore\n   */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = Util.coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  get value(): any { return this._inputElement?.nativeElement?.value; }\n  set value(value: any) { \n    if(this._inputElement) {\n      this._inputElement.nativeElement.value = value;\n    } \n  }\n\n  /**\n   * Opzionale.\n   * Disponibile solo se il type è search.\n   * Indica la lista di elementi ricercabili su cui basare il sistema di autocompletamento della input\n   */\n  @Input()\n  get autoCompleteData(): Array<AutoCompleteItem> { return this._autoCompleteData; }\n  set autoCompleteData(value: Array<AutoCompleteItem>) { this._autoCompleteData = value; }\n  private _autoCompleteData: Array<AutoCompleteItem>;\n\n  /**\n   * Evento emesso quando il valore dell'input cambia.\n   * Gli eventi di change sono emessi soltanto quando il valore cambia a causa dell'interazione dell'utente\n   * con il campo d'input.\n   */\n  @Output()\n  readonly change: EventEmitter<FormInputChange> = new EventEmitter<FormInputChange>();\n\n  /**\n   * Opzionale.\n   * Indica se disabilitare l'avviso di CAPS LOCK attivo\n   * Accetta una espressione booleana o può essere usato come attributo senza valore\n   */\n  @Input()\n  get disableCapsLockAlert(): boolean { return this._disableCapsLockAlert; }\n  set disableCapsLockAlert(value: boolean) { this._disableCapsLockAlert = Util.coerceBooleanProperty(value); }\n  private _disableCapsLockAlert = false;\n\n  /**\n   * Indica se è attivo il CAPS LOCK\n   */\n  isCapsLockActive = false;\n\n  /**\n   * La label da mostrare in caso sia attivo il CAPS LOCK\n   */\n  @Input() capsLockActiveLabel = 'CAPS LOCK inserito';\n\n  get isLabelActive() {\n    return this._isLabelActive;\n  }\n  set isLabelActive(value: boolean) {\n    const newValue = Util.coerceBooleanProperty(value);\n   \n    // In alcuni casi la label deve essere sempre posizionata sopra l'input per evitare sovrapposizioni \n    // di testo, come in caso di presenza del placeholder o per l'input di tipo \"date\" o \"time\"\n    if(newValue || (!this.value && !this.placeholder && this.type !== INPUT_TYPES.TIME && \n                    this.type !== INPUT_TYPES.DATE && this.type !== INPUT_TYPES.NUMBER)) {\n      this._isLabelActive = newValue;\n    } else {\n      this._isLabelActive = true;\n    }\n  }\n  private _isLabelActive: boolean;\n\n\n  get isPasswordMode() {\n    return this._isPasswordMode;\n  }\n  set isPasswordMode(value: boolean) {\n    this._isPasswordMode = Util.coerceBooleanProperty(value);\n  }\n  private _isPasswordMode = false;\n\n  get isPasswordVisible() {\n    return this._isPasswordVisible;\n  }\n  set isPasswordVisible(value: boolean) {\n    this._isPasswordVisible = Util.coerceBooleanProperty(value);\n    this._type = this._isPasswordVisible ? INPUT_TYPES.TEXT : INPUT_TYPES.PASSWORD;\n  }\n  private _isPasswordVisible = false;\n\n  showAutocompletion = false;\n  private _isInitialized = false;\n  private _controlValueAccessorChangeFn: (value: any) => void = () => { };\n  private _onTouched: () => any = () => { };\n\n  /** Indica se è stato effettuato il focus sul campo di input */\n  focus: boolean = false;\n\n  private _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new FormInputChange(this, this.value));\n    }\n  }\n\n  ngOnInit(): void {\n    this.isLabelActive = false;\n    this._formInputPasswordUtils = new FormInputPasswordUtils(this.passwordStrengthMeterConfig);\n  }\n\n\n  writeValue(value: any): void {\n    this.value = value;\n    if (this.value) {\n      this.isLabelActive = true;\n    }\n\n    this.onChange();\n    if (this._isInitialized) {\n      this._changeDetector.detectChanges();\n    }\n  }\n\n  registerOnChange(fn: (value: any) => void): void {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n\n  ngAfterContentInit(): void {\n    this._isInitialized = true;\n\n    // Run change detection if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes,\n          this._textPrefixChildren.changes, this._textSuffixChildren.changes\n    ).subscribe(() => {\n      this._changeDetector.markForCheck();\n    });\n    \n  }\n\n  onChange() {\n    this._emitChangeEvent();\n    this._controlValueAccessorChangeFn(this.value);\n  }\n\n  onInput() {\n    if(this.isPasswordMode && this._enablePasswordStrengthMeter) {\n      this.recalculatePasswordStrength();\n    }\n\n    this.showAutocompletion = this._type === INPUT_TYPES.SEARCH && this.isAutocompletable() && this.value;\n   \n    this._emitChangeEvent();\n    this._controlValueAccessorChangeFn(this.value);\n  }\n\n  onFocus() {\n    this.focus = true;\n    this.isLabelActive = true;\n  }\n\n  onBlur() {\n    this.focus = false;\n    const inputValue: string = this.value;\n    if (!inputValue || inputValue.length === 0) {\n     \n      this.isLabelActive = false;\n      \n      if (this.type === INPUT_TYPES.NUMBER) {\n        this.value = '';\n      }\n    }\n  }\n\n  get noteId() {\n    return `${this.id}-note`;\n  }\n\n  getRelatedEntries() {\n    if (this.value) {\n      const lowercaseValue = this.value.toLowerCase();\n      const lowercaseData = this._autoCompleteData.filter((item) => item.value).map(item => {\n        return { ...item, original : item.value, lowercase : item.value.toLowerCase() };\n      });\n\n      const relatedEntries = [];\n      lowercaseData.forEach(lowercaseEntry => {\n        const matching = (lowercaseEntry.lowercase).includes(lowercaseValue);\n        if (matching) {\n          relatedEntries.push(lowercaseEntry);\n        }\n      });\n\n      return relatedEntries;\n    } else {\n      return [];\n    }\n  }\n\n  isAutocompletable() {\n    if (this._autoCompleteData && this._type === INPUT_TYPES.SEARCH) {\n      return this._autoCompleteData.length > 0;\n    } else {\n      return false;\n    }\n  }\n\n  onEntryClick(entry: AutoCompleteItem, event: Event) {\n    // Se non è stato definito un link associato all'elemento dell'autocomplete, probabilmente il desiderata \n    // non è effettuare la navigazione al default '#', pertanto in tal caso meglio annullare la navigazione.\n    if(!entry.link) {\n      event.preventDefault();\n    }\n    this.value = entry.value;\n    this.showAutocompletion = false;\n    this.onChange();\n  }\n\n  /**\n   * indica se il campo di input è composto da altri elementi accessori come \n   * icone o bottoni da posizionare adiacenti al campo di input\n   */\n  get isInputGroup(): boolean {\n    return  this._textPrefixChildren.length > 0 || this._prefixChildren.length > 0 || !!this.icon \n            || this._suffixChildren.length > 0 || this._textSuffixChildren.length > 0;\n  }\n\n\n  /**\n   * Ricalcola il punteggio di sicurezza in base al valore corrente\n   */\n  recalculatePasswordStrength(): void {\n    this.passwordScore = this._formInputPasswordUtils.calculateScore(this.value);\n  }\n  \n\n  get passwordScoreText(): string {\n    return this._formInputPasswordUtils.scoreText(this.passwordScore);\n  }\n\n  get passwordScoreColor(): string {\n    return this._formInputPasswordUtils.scoreColor(this.passwordScore);\n  }\n\n  get valueLength(): number {\n    if(!this.value) {\n      return 0;\n    }\n    return (this.value as string | number).toString().length;\n  }\n \n\n  @HostListener('window:click', ['$event'])\n  @HostListener('window:keydown', ['$event'])\n  @HostListener('window:keyup', ['$event'])\n  onKeyUp(event: KeyboardEvent): void {\n    this.isCapsLockActive = event.getModifierState && event.getModifierState('CapsLock');\n  }\n\n\n  autocompleteItemTrackByValueFn(index: number, item: AutoCompleteItem) {\n    return item.value;\n  }\n\n\n  /**\n   * Incrementa il valore dell'input numerico di tanto quanto vale lo step\n   */\n  incrementNumberValue(): void {\n    if(this.type === INPUT_TYPES.NUMBER) {\n      const tempValue = +this.value + this.step;\n      if(this.max === undefined || tempValue <= this.max) {\n        this.value = tempValue;\n      }\n    }\n  }\n\n  /**\n   * Decrementa il valore dell'input numerico di tanto quanto vale lo step\n   */\n  decrementNumberValue(): void {\n    if(this.type === INPUT_TYPES.NUMBER ) {\n      const tempValue = +this.value - this.step;\n      if(this.min === undefined || tempValue >= this.min) {\n        this.value = tempValue;\n      }\n    }\n  }\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "label {\n    pointer-events: none;\n}",
                    "styleUrl": "./form-input.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 414,
                "jsdoctags": [
                    {
                        "name": "_changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterContentInit",
                "ControlValueAccessor"
            ],
            "accessors": {
                "readonlyPlainText": {
                    "name": "readonlyPlainText",
                    "setSignature": {
                        "name": "readonlyPlainText",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 96,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "readonlyPlainText",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 95,
                        "rawdescription": "\n\nOpzionale. Indica se mostrare gli input readonly nella forma stilizzata come testo normale\n",
                        "description": "<p>Opzionale. Indica se mostrare gli input readonly nella forma stilizzata come testo normale</p>\n"
                    }
                },
                "enablePasswordStrengthMeter": {
                    "name": "enablePasswordStrengthMeter",
                    "setSignature": {
                        "name": "enablePasswordStrengthMeter",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 105,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "enablePasswordStrengthMeter",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 104,
                        "rawdescription": "\n\nOpzionale. Indica se abilitare il controllo sulla sicurezza della password\n",
                        "description": "<p>Opzionale. Indica se abilitare il controllo sulla sicurezza della password</p>\n"
                    }
                },
                "passwordStrengthMeterConfig": {
                    "name": "passwordStrengthMeterConfig",
                    "setSignature": {
                        "name": "passwordStrengthMeterConfig",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "newConfig",
                                "type": "PasswordStrengthMeterConfig",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 120,
                        "jsdoctags": [
                            {
                                "name": "newConfig",
                                "type": "PasswordStrengthMeterConfig",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "passwordStrengthMeterConfig",
                        "type": "",
                        "returnType": "PasswordStrengthMeterConfig",
                        "line": 124
                    }
                },
                "id": {
                    "name": "id",
                    "setSignature": {
                        "name": "id",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 135,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "id",
                        "type": "string",
                        "returnType": "string",
                        "line": 132,
                        "rawdescription": "\n\nIndica l'id dell'elemento HTML\n",
                        "description": "<p>Indica l&#39;id dell&#39;elemento HTML</p>\n"
                    }
                },
                "name": {
                    "name": "name",
                    "setSignature": {
                        "name": "name",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 147,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "name",
                        "type": "string",
                        "returnType": "string",
                        "line": 144,
                        "rawdescription": "\n\nIndica l'attributo name del componente HTML\n",
                        "description": "<p>Indica l&#39;attributo name del componente HTML</p>\n"
                    }
                },
                "type": {
                    "name": "type",
                    "setSignature": {
                        "name": "type",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 159,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "type",
                        "type": "string",
                        "returnType": "string",
                        "line": 156,
                        "rawdescription": "\n\nIndica il tipo di campo. Puo' assumere i valori text, email, password e number\n",
                        "description": "<p>Indica il tipo di campo. Puo&#39; assumere i valori text, email, password e number</p>\n"
                    }
                },
                "label": {
                    "name": "label",
                    "setSignature": {
                        "name": "label",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 183,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "label",
                        "type": "string",
                        "returnType": "string",
                        "line": 182,
                        "rawdescription": "\n\nIndica il valore della label da visualizzare\n",
                        "description": "<p>Indica il valore della label da visualizzare</p>\n"
                    }
                },
                "labelVisuallyHidden": {
                    "name": "labelVisuallyHidden",
                    "setSignature": {
                        "name": "labelVisuallyHidden",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 191,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "labelVisuallyHidden",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 190,
                        "rawdescription": "\n\nIndica se la label dell'input deve essere visualizzata dall'utente o solamente visibile per lo screen reader\n",
                        "description": "<p>Indica se la label dell&#39;input deve essere visualizzata dall&#39;utente o solamente visibile per lo screen reader</p>\n"
                    }
                },
                "min": {
                    "name": "min",
                    "setSignature": {
                        "name": "min",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 200,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "min",
                        "type": "number",
                        "returnType": "number",
                        "line": 199,
                        "rawdescription": "\n\nIndica il valore che avrà l'attributo HTML \"min\" per l'input di tipo number\n",
                        "description": "<p>Indica il valore che avrà l&#39;attributo HTML &quot;min&quot; per l&#39;input di tipo number</p>\n"
                    }
                },
                "max": {
                    "name": "max",
                    "setSignature": {
                        "name": "max",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 208,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "max",
                        "type": "number",
                        "returnType": "number",
                        "line": 207,
                        "rawdescription": "\n\nIndica il valore che avrà l'attributo HTML \"max\" per l'input di tipo number\n",
                        "description": "<p>Indica il valore che avrà l&#39;attributo HTML &quot;max&quot; per l&#39;input di tipo number</p>\n"
                    }
                },
                "step": {
                    "name": "step",
                    "setSignature": {
                        "name": "step",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 216,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "step",
                        "type": "number",
                        "returnType": "number",
                        "line": 215,
                        "rawdescription": "\n\nIndica il valore che avrà l'attributo HTML \"step\" per l'input di tipo number\n",
                        "description": "<p>Indica il valore che avrà l&#39;attributo HTML &quot;step&quot; per l&#39;input di tipo number</p>\n"
                    }
                },
                "note": {
                    "name": "note",
                    "setSignature": {
                        "name": "note",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 225,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "note",
                        "type": "string",
                        "returnType": "string",
                        "line": 224,
                        "rawdescription": "\n\nIndica il testo di aiuto sotto la input\n",
                        "description": "<p>Indica il testo di aiuto sotto la input</p>\n"
                    }
                },
                "placeholder": {
                    "name": "placeholder",
                    "setSignature": {
                        "name": "placeholder",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 235,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "placeholder",
                        "type": "string",
                        "returnType": "string",
                        "line": 232,
                        "rawdescription": "\n\nIndica il testo presente nel campo vuoto. Nel caso sia già presente la label, il placeholder non verrà mostrato\n",
                        "description": "<p>Indica il testo presente nel campo vuoto. Nel caso sia già presente la label, il placeholder non verrà mostrato</p>\n"
                    }
                },
                "icon": {
                    "name": "icon",
                    "setSignature": {
                        "name": "icon",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 243,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "icon",
                        "type": "string",
                        "returnType": "string",
                        "line": 242,
                        "rawdescription": "\n\nIndica l'icona da visualizzare a sinistra del campo di input\n",
                        "description": "<p>Indica l&#39;icona da visualizzare a sinistra del campo di input</p>\n"
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 253,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 252,
                        "rawdescription": "\n\nOpzionale.\nIndica se il campo in questione è disabilitato.\nAccetta una espressione booleana o può essere usato come attributo senza valore\n",
                        "description": "<p>Opzionale.\nIndica se il campo in questione è disabilitato.\nAccetta una espressione booleana o può essere usato come attributo senza valore</p>\n"
                    }
                },
                "currency": {
                    "name": "currency",
                    "setSignature": {
                        "name": "currency",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 263,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "currency",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 262,
                        "rawdescription": "\n\nOpzionale.\nNel caso di input numerico, indica se il campo è una valuta.\nAccetta una espressione booleana o può essere usato come attributo senza valore\n",
                        "description": "<p>Opzionale.\nNel caso di input numerico, indica se il campo è una valuta.\nAccetta una espressione booleana o può essere usato come attributo senza valore</p>\n"
                    }
                },
                "percentage": {
                    "name": "percentage",
                    "setSignature": {
                        "name": "percentage",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 273,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "percentage",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 272,
                        "rawdescription": "\n\nOpzionale.\nNel caso di input numerico, indica se il campo è una percentuale.\nAccetta una espressione booleana o può essere usato come attributo senza valore\n",
                        "description": "<p>Opzionale.\nNel caso di input numerico, indica se il campo è una percentuale.\nAccetta una espressione booleana o può essere usato come attributo senza valore</p>\n"
                    }
                },
                "adaptive": {
                    "name": "adaptive",
                    "setSignature": {
                        "name": "adaptive",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 283,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "adaptive",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 282,
                        "rawdescription": "\n\nOpzionale.\nNel caso di input numerico, indica se il campo si deve ridimensionare automaticamente a seconda del valore contenuto in esso.\nAccetta una espressione booleana o può essere usato come attributo senza valore\n",
                        "description": "<p>Opzionale.\nNel caso di input numerico, indica se il campo si deve ridimensionare automaticamente a seconda del valore contenuto in esso.\nAccetta una espressione booleana o può essere usato come attributo senza valore</p>\n"
                    }
                },
                "readonly": {
                    "name": "readonly",
                    "setSignature": {
                        "name": "readonly",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 293,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "readonly",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 292,
                        "rawdescription": "\n\nOpzionale.\nIndica se il campo in questione è di sola lettura.\nAccetta una espressione booleana o può essere usato come attributo senza valore\n",
                        "description": "<p>Opzionale.\nIndica se il campo in questione è di sola lettura.\nAccetta una espressione booleana o può essere usato come attributo senza valore</p>\n"
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 297,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "any",
                        "returnType": "any",
                        "line": 296
                    }
                },
                "autoCompleteData": {
                    "name": "autoCompleteData",
                    "setSignature": {
                        "name": "autoCompleteData",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "Array<AutoCompleteItem>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 310,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "Array<AutoCompleteItem>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "autoCompleteData",
                        "type": "",
                        "returnType": "Array<AutoCompleteItem>",
                        "line": 309,
                        "rawdescription": "\n\nOpzionale.\nDisponibile solo se il type è search.\nIndica la lista di elementi ricercabili su cui basare il sistema di autocompletamento della input\n",
                        "description": "<p>Opzionale.\nDisponibile solo se il type è search.\nIndica la lista di elementi ricercabili su cui basare il sistema di autocompletamento della input</p>\n"
                    }
                },
                "disableCapsLockAlert": {
                    "name": "disableCapsLockAlert",
                    "setSignature": {
                        "name": "disableCapsLockAlert",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 328,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disableCapsLockAlert",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 327,
                        "rawdescription": "\n\nOpzionale.\nIndica se disabilitare l'avviso di CAPS LOCK attivo\nAccetta una espressione booleana o può essere usato come attributo senza valore\n",
                        "description": "<p>Opzionale.\nIndica se disabilitare l&#39;avviso di CAPS LOCK attivo\nAccetta una espressione booleana o può essere usato come attributo senza valore</p>\n"
                    }
                },
                "isLabelActive": {
                    "name": "isLabelActive",
                    "setSignature": {
                        "name": "isLabelActive",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 344,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "isLabelActive",
                        "type": "",
                        "returnType": "",
                        "line": 341
                    }
                },
                "isPasswordMode": {
                    "name": "isPasswordMode",
                    "setSignature": {
                        "name": "isPasswordMode",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 362,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "isPasswordMode",
                        "type": "",
                        "returnType": "",
                        "line": 359
                    }
                },
                "isPasswordVisible": {
                    "name": "isPasswordVisible",
                    "setSignature": {
                        "name": "isPasswordVisible",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 370,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "isPasswordVisible",
                        "type": "",
                        "returnType": "",
                        "line": 367
                    }
                },
                "noteId": {
                    "name": "noteId",
                    "getSignature": {
                        "name": "noteId",
                        "type": "",
                        "returnType": "",
                        "line": 465
                    }
                },
                "isInputGroup": {
                    "name": "isInputGroup",
                    "getSignature": {
                        "name": "isInputGroup",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 513,
                        "rawdescription": "\n\nindica se il campo di input è composto da altri elementi accessori come\nicone o bottoni da posizionare adiacenti al campo di input\n",
                        "description": "<p>indica se il campo di input è composto da altri elementi accessori come\nicone o bottoni da posizionare adiacenti al campo di input</p>\n"
                    }
                },
                "passwordScoreText": {
                    "name": "passwordScoreText",
                    "getSignature": {
                        "name": "passwordScoreText",
                        "type": "string",
                        "returnType": "string",
                        "line": 527
                    }
                },
                "passwordScoreColor": {
                    "name": "passwordScoreColor",
                    "getSignature": {
                        "name": "passwordScoreColor",
                        "type": "string",
                        "returnType": "string",
                        "line": 531
                    }
                },
                "valueLength": {
                    "name": "valueLength",
                    "getSignature": {
                        "name": "valueLength",
                        "type": "number",
                        "returnType": "number",
                        "line": 535
                    }
                }
            },
            "templateData": "<div class=\"form-group\" [class.autocomplete-wrapper-big]=\"autocompleteWrapperSize === 'big'\">\n  <div class=\"input-group\" *ngIf = \"isInputGroup; else formInputWithLabel\">\n      <ng-container *ngIf=\"_textPrefixChildren.length || _prefixChildren.length || icon\">\n        <div class=\"input-group-prepend\">\n\n          <!-- Gli elementi figli di \"it-input\" con la direttiva \"itTextPrefix\"  -->\n          <ng-container *ngIf=\"_textPrefixChildren.length || icon\">\n\n            <div class=\"input-group-text\" >\n              <ng-container *ngIf=\"icon\">\n                <it-icon [icon] = \"icon\" size=\"icon-sm\"></it-icon>\n              </ng-container>\n\n              <ng-container *ngIf=\"_textPrefixChildren.length\">\n                <ng-content select = \"[itTextPrefix]\"></ng-content>\n              </ng-container>\n            </div>\n          </ng-container>\n         \n          <ng-container *ngIf=\"_prefixChildren.length\">\n            <!-- Gli elementi figli di \"it-input\" con la direttiva \"itPrefix\"  -->\n            <ng-content select = \"[itPrefix]\"></ng-content>\n          </ng-container>\n        </div>\n      </ng-container>\n\n      <ng-container [ngTemplateOutlet]=\"formInputWithLabel\"></ng-container>\n\n      <ng-container *ngIf=\"_suffixChildren.length || _textSuffixChildren.length\">\n        <div  class=\"input-group-append\">\n          <!-- Gli elementi figli di \"it-input\" con la direttiva \"itTextSuffix\"  -->\n          <ng-container *ngIf=\"_textSuffixChildren.length\">\n            <div class=\"input-group-text\" >\n              <ng-content select = \"[itTextSuffix]\"></ng-content>\n            </div>\n          </ng-container>\n         \n          <ng-container *ngIf=\"_suffixChildren.length\">\n            <!-- Gli elementi figli di \"it-input\" con la direttiva \"itSuffix\"  -->\n            <ng-content select = \"[itSuffix]\"></ng-content>\n          </ng-container>\n        </div>\n      </ng-container>\n      \n    \n  </div>\n\n\n\n  <ng-template #formInput>\n      <input #inputElement\n        (focus)=\"onFocus()\"\n        (blur)=\"onBlur()\"\n        (change)=\"onChange()\"\n        (input)=\"onInput()\"\n        [type]=\"type\"\n        [id]=\"id\"\n        [min]=\"min\"\n        [max]=\"max\"\n        [step]=\"step\"\n        [class.focus--mouse]=\"focus\"\n        [class.input-password]=\"isPasswordMode\"\n        [attr.name]=\"name\"\n        [disabled]=\"disabled\"\n        [readonly]=\"readonly\"\n        [placeholder]=\"placeholder\"\n        [style.width]=\"adaptive && valueLength ? 'calc(44px + ' + valueLength + 'ch)' : null\"\n        [ngClass]=\"{\n          'form-control' : (!readonly || !readonlyPlainText) && type !== INPUT_TYPES.NUMBER,\n          'form-control-plaintext' : readonly && readonlyPlainText,\n          'autocomplete' : isAutocompletable()\n        }\"\n      [attr.aria-describedby]=\"note ? noteId : undefined\"/>  \n  </ng-template>\n\n\n\n  <ng-template #formInputWithLabel>\n      <label  [attr.for]=\"id\" *ngIf=\"label\" \n              [class.visually-hidden]=\"labelVisuallyHidden\"\n              [class.input-number-label]=\"type === INPUT_TYPES.NUMBER\"\n              [class.active] = \"isLabelActive && !labelVisuallyHidden\" >\n        {{label}}\n      </label>\n    \n      <!-- INIZIO gestione input di tipo NUMBER -->\n\n      <ng-container *ngIf=\"type === INPUT_TYPES.NUMBER; else formInput\">\n        <span class=\"input-number\" \n              [class.input-number-adaptive]=\"adaptive\"\n              [class.input-number-currency]=\"currency\" \n              [class.input-number-percentage]=\"percentage\">\n\n          <ng-container [ngTemplateOutlet]=\"formInput\"></ng-container>\n\n          <button class=\"input-number-add\" (click)=\"incrementNumberValue()\" focusMouse>\n            <span class=\"visually-hidden\">Aumenta valore di {{step}} Euro</span>\n          </button>\n          <button class=\"input-number-sub\" (click)=\"decrementNumberValue()\" focusMouse>\n            <span class=\"visually-hidden\">Diminuisci valore di {{step}} Euro</span>\n          </button>\n        </span>\n      </ng-container>\n\n    <!-- FINE gestione input di tipo NUMBER -->\n\n  </ng-template>\n\n  <small [id]=\"noteId\" class=\"form-text\" *ngIf=\"note\">\n    {{note}}\n  </small>\n\n\n  <!-- INIZIO gestione input di tipo PASSWORD -->\n\n  <ng-container *ngIf=\"isPasswordMode\">\n    <!-- Icona dell'occhio per la vedere/nascondere la password -->\n    <span \n      class = \"password-icon\"\n      aria-hidden=\"true\"\n      (click)=\"isPasswordVisible = !isPasswordVisible\">\n      <it-icon [icon]=\"'it-password-' + (isPasswordVisible ? 'invisible' : 'visible')\" size=\"icon-sm\" color=\"default\"></it-icon>\n    </span>\n\n    <!-- Indicatore di sicurezza della password -->\n    <div class=\"password-strength-meter\" *ngIf=\"isPasswordMode && enablePasswordStrengthMeter\">\n      <small class=\"form-text\" \n        [ngClass] = \"['text-' + passwordScoreColor]\"\n        *ngIf = \"passwordStrengthMeterConfig.showText\">{{ passwordScoreText }}\n      </small>\n      <div class=\"password-meter progress rounded-0 position-absolute\">\n        <div class=\"row position-absolute w-100 m-0\">\n          <div class=\"col-3 border-start border-end border-white\"></div>\n          <div class=\"col-3 border-start border-end border-white\"></div>\n          <div class=\"col-3 border-start border-end border-white\"></div>\n          <div class=\"col-3 border-start border-end border-white\"></div>\n        </div>\n\n        <div class=\"progress-bar\" \n          [class]=\"['bg-' + passwordScoreColor]\"\n          role=\"progressbar\" [attr.aria-valuenow]=\"passwordScore >= 0 ? passwordScore : 0\" aria-valuemin=\"0\" aria-valuemax=\"100\" [style.width.%]=\"passwordScore >= 0 ? passwordScore : 0\">\n        </div>\n      </div>\n    </div>\n\n  </ng-container>\n\n <!-- FINE gestione input di tipo PASSWORD -->\n\n\n\n\n  <!-- Avviso CAPS LOCK Attivo -->\n  <small *ngIf=\"isCapsLockActive && !disableCapsLockAlert && type !== INPUT_TYPES.NUMBER\" class=\"password-caps form-text text-warning position-absolute bg-white w-100\">{{capsLockActiveLabel}}</small>\n\n\n\n  <!-- INIZIO gestione AUTOCOMPLETAMENTO -->\n\n\n  <!-- Icona lente per autocompletamento -->\n  <span class=\"autocomplete-icon\" aria-hidden=\"true\" *ngIf=\"isAutocompletable()\">\n    <it-icon icon = \"it-search\" size=\"icon-sm\" color=\"default\"></it-icon>\n  </span>\n\n\n  <!-- Lista di autocompletamento -->\n  <ul class=\"autocomplete-list\" *ngIf=\"isAutocompletable()\"  [class.autocomplete-list-show]=\"showAutocompletion\">\n    <li *ngFor=\"let entry of getRelatedEntries(); trackBy: autocompleteItemTrackByValueFn\" (click)=\"onEntryClick(entry, $event)\">\n      <a [href]=\"entry.link\" >\n        <ng-container *ngTemplateOutlet=\"autocompleteItemTemplate\"></ng-container>\n      </a>\n      <ng-template #autocompleteItemTemplate>\n        <div class=\"avatar size-sm\" *ngIf=\"entry.avatarSrcPath\">\n          <img [src]=\"entry.avatarSrcPath\" [alt]=\"entry.avatarAltText\">\n        </div>\n        <it-icon *ngIf=\"entry.icon\" [icon]=\"entry.icon\" size=\"icon-sm\"></it-icon>\n        <span class=\"autocomplete-list-text\">\n          <span [innerHTML] = \"entry.original | markMatchingText: value\"></span>\n          <em *ngIf=\"entry.label\">{{entry.label}}</em>\n        </span>\n      </ng-template>\n    </li>\n  </ul>\n\n</div>\n\n  <!-- FINE gestione AUTOCOMPLETAMENTO -->"
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-68d5332a22b5d435599e9220cc1a69cb99e1587de94a64670fce7782db540028e8b1530bab129bcaf37a4a27b96caba2adea73cbf90e8472981f6bf21a0043c1",
            "file": "projects/design-angular-kit/src/lib/icon/icon.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-icon",
            "styleUrls": [
                "./icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "IconBackgroundColorEnum",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "IconColorEnum.primary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "IconColorEnum",
                    "decorators": []
                },
                {
                    "name": "expand",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "padded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "position",
                    "defaultValue": "HorizontalAlign.right",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAllineamento orizzontale dell'icona rispetto al contenitor: 'left' | 'right'\n",
                    "description": "<p>Allineamento orizzontale dell&#39;icona rispetto al contenitor: &#39;left&#39; | &#39;right&#39;</p>\n",
                    "line": 55,
                    "type": "HorizontalAlign",
                    "decorators": []
                },
                {
                    "name": "rounded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "roundedColor",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "IconColorEnum",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "IconSizeEnum.default",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "IconSizeEnum",
                    "decorators": []
                },
                {
                    "name": "verticalAlign",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "wai",
                    "defaultValue": "'wai'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_verticalAlign",
                    "defaultValue": "VerticalAlign.middle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VerticalAlign",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ICON_BASE_URL",
                    "defaultValue": "'bootstrap-italia/dist/svg/sprites.svg#'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121,
                        124,
                        144
                    ]
                },
                {
                    "name": "iconName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "svgPath",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 74
                }
            ],
            "methodsClass": [
                {
                    "name": "changeColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "IconColorEnum",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "IconColorEnum",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, Input} from '@angular/core';\nimport {IconBackgroundColorEnum, IconColorEnum, IconSizeEnum} from '../enums/icons.enum';\nimport { HorizontalAlign, VerticalAlign, VERTICAL_ALIGN } from '../models/Alignment';\n\n@Component({\n  selector: 'it-icon',\n  templateUrl: './icon.component.html',\n  styleUrls: ['./icon.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class IconComponent  {\n\n  private static readonly ICON_BASE_URL = 'bootstrap-italia/dist/svg/sprites.svg#';\n\n  constructor(private _cdr: ChangeDetectorRef) { }\n\n  changeColor(color: IconColorEnum) {\n    if(this.color !== color) {\n      this.color = color;\n      this._cdr.markForCheck();\n    }\n  }\n\n  @Input() rounded: boolean = false;\n  @Input() roundedColor: IconColorEnum = null;\n\n  get roundedColorClass(): string {\n    return this.roundedColor ? ' rounded-' + this.roundedColor : '';\n  }\n\n\n  @Input() set icon(newIcon: string) {\n    if(newIcon) {\n      this.svgPath = IconComponent.ICON_BASE_URL + newIcon;\n      this.iconName = newIcon;\n    } else {\n      this.svgPath = null;\n    }\n  }\n\n  protected iconName: string = '';\n\n  @Input() wai = 'wai';\n\n  @Input() size: IconSizeEnum = IconSizeEnum.default;\n  @Input() color: IconColorEnum = IconColorEnum.primary;\n  @Input() bgColor: IconBackgroundColorEnum = null;\n\n  @Input() padded = false;\n  @Input() expand = false;\n\n  /**\n   * Allineamento orizzontale dell'icona rispetto al contenitor: 'left' | 'right'\n   */\n  @Input() position: HorizontalAlign = HorizontalAlign.right;\n\n  private _verticalAlign: VerticalAlign =  VerticalAlign.middle;\n\n  /**\n   * Allineamento verticale dell'icona rispetto al contenitore: 'top' | 'middle' | 'bottom'\n   */\n  get verticalAlign() {\n    return this._verticalAlign;\n  }\n\n  @Input() set verticalAlign(value: any) {\n    if (VERTICAL_ALIGN.is(value)) {\n      this._verticalAlign = value as VerticalAlign;\n    } else {\n      this._verticalAlign = VerticalAlign.middle;\n    }\n  }\n\n  svgPath: string = null;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./icon.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "roundedColorClass": {
                    "name": "roundedColorClass",
                    "getSignature": {
                        "name": "roundedColorClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 27
                    }
                },
                "icon": {
                    "name": "icon",
                    "setSignature": {
                        "name": "icon",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "newIcon",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 32,
                        "jsdoctags": [
                            {
                                "name": "newIcon",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "verticalAlign": {
                    "name": "verticalAlign",
                    "setSignature": {
                        "name": "verticalAlign",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 66,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "verticalAlign",
                        "type": "",
                        "returnType": "",
                        "line": 62,
                        "rawdescription": "\n\nAllineamento verticale dell'icona rispetto al contenitore: 'top' | 'middle' | 'bottom'\n",
                        "description": "<p>Allineamento verticale dell&#39;icona rispetto al contenitore: &#39;top&#39; | &#39;middle&#39; | &#39;bottom&#39;</p>\n"
                    }
                }
            },
            "templateData": "<ng-container *ngIf = \"iconName && svgPath\">\n  <ng-container *ngIf = \"rounded; else svgIcon\">\n    <span [class] = \"'rounded-icon' + roundedColorClass\">\n      <ng-container *ngTemplateOutlet=\"svgIcon\"></ng-container>\n    </span>\n  </ng-container>\n</ng-container>\n<ng-template #svgIcon>\n  <svg\n  class=\"icon {{iconName}} {{size}} icon-{{color}} {{ bgColor ? 'bg-' + bgColor : '' }} {{position}} align-{{verticalAlign}}\" \n  [class.icon-expand]=\"expand\" [class.icon-padded]=\"padded\">\n\n  <use [attr.xlink:href]=\"svgPath\" [attr.href]=\"svgPath\"></use>\n</svg> \n</ng-template>"
        },
        {
            "name": "ItCollapseGroupComponent",
            "id": "component-ItCollapseGroupComponent-15836b497fdabd8371cc9dde25f706bb4d2f47cf13ea395b3b9f714336db3b359c824f9772893f5cb0bdb775b78e9daa51270533d9554c91ed6c934996eb43b5",
            "file": "projects/design-angular-kit/src/lib/collapse/collapse-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-collapse-group",
            "styleUrls": [
                "./collapse-group.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./collapse-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "accordion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica se gli item del gruppo sono mutuamente richiudibili (o accordion)\n",
                    "description": "<p>Indica se gli item del gruppo sono mutuamente richiudibili (o accordion)</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_accordion",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ItCollapseItemComponent>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "undefined, {descendants: true}"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "id",
                    "defaultValue": "`collapse-group-${identifier++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "simpleChanges",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "simpleChanges",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "target",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event.target']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "target",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event.target"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ContentChildren, forwardRef, QueryList,\n  Input, HostListener, SimpleChanges, OnChanges } from '@angular/core';\nimport { ItCollapseItemComponent } from './collapse-item.component';\nimport { Util } from '../util/util';\n\nlet identifier = 0;\n\n@Component({\n  selector: 'it-collapse-group',\n  templateUrl: './collapse-group.component.html',\n  styleUrls: ['./collapse-group.component.css']\n})\nexport class ItCollapseGroupComponent implements OnChanges {\n  id = `collapse-group-${identifier++}`;\n\n  /**\n   * Indica se gli item del gruppo sono mutuamente richiudibili (o accordion)\n   */\n  @Input()\n  get accordion(): boolean { return this._accordion; }\n  set accordion(value: boolean) { this._accordion = Util.coerceBooleanProperty(value); }\n  private _accordion = false;\n\n  @ContentChildren(forwardRef(() => ItCollapseItemComponent), { descendants: true })\n  private _items: QueryList<ItCollapseItemComponent>; // tslint:disable-line\n\n  @HostListener('click', ['$event.target'])\n  onClick(target) {\n    if (this.accordion) {\n      const items = this._items.toArray();\n      items.forEach(currentItem => {\n        const isTargetPartOfItem = (currentItem.elementRef.nativeElement as HTMLElement).contains(target);\n        if (!isTargetPartOfItem) {\n          if (!currentItem.directive.isCollapsed) {\n            currentItem.directive.toggle();\n          }\n        }\n      });\n    }\n  }\n\n  ngOnChanges(simpleChanges: SimpleChanges) {\n    if (simpleChanges['accordion']) {\n      const isAccordion = simpleChanges['accordion'].currentValue;\n      if (isAccordion) {\n        const items = this._items.toArray();\n        items.forEach(currentItem => {\n          if (!currentItem.directive.isCollapsed) {\n            currentItem.directive.toggle();\n          }\n        });\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./collapse-group.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "accordion": {
                    "name": "accordion",
                    "setSignature": {
                        "name": "accordion",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 21,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "accordion",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 20,
                        "rawdescription": "\n\nIndica se gli item del gruppo sono mutuamente richiudibili (o accordion)\n",
                        "description": "<p>Indica se gli item del gruppo sono mutuamente richiudibili (o accordion)</p>\n"
                    }
                }
            },
            "templateData": "<div [id]=\"id\" class=\"collapse-div\" role=\"tablist\">\n  <ng-content></ng-content>\n</div>"
        },
        {
            "name": "ItCollapseItemComponent",
            "id": "component-ItCollapseItemComponent-328f505a440487d78deb3bda6ecc8ee34dcbb236583055702dd2b65409c0b5c145cabca18643c1b9bba893398d5f8807ef82cf59c57ebc2e6a35944538e4ed52",
            "file": "projects/design-angular-kit/src/lib/collapse/collapse-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-collapse-item",
            "styleUrls": [
                "./collapse-item.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./collapse-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTesto del bottone di apertura/chiusura del collapse item\n",
                    "description": "<p>Testo del bottone di apertura/chiusura del collapse item</p>\n",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvento da emettere quando il collapse è nascosto\n",
                    "description": "<p>Evento da emettere quando il collapse è nascosto</p>\n",
                    "line": 53,
                    "type": "EventEmitter<ItCollapseItemComponent>"
                },
                {
                    "name": "hide",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvento da emettere quando il collapse sta per essere nascosto\n",
                    "description": "<p>Evento da emettere quando il collapse sta per essere nascosto</p>\n",
                    "line": 45,
                    "type": "EventEmitter<ItCollapseItemComponent>"
                },
                {
                    "name": "show",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvento da emettere quando il collapse sta per essere mostrato\n",
                    "description": "<p>Evento da emettere quando il collapse sta per essere mostrato</p>\n",
                    "line": 29,
                    "type": "EventEmitter<ItCollapseItemComponent>"
                },
                {
                    "name": "shown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvento da emettere quando il collapse è mostrato\n",
                    "description": "<p>Evento da emettere quando il collapse è mostrato</p>\n",
                    "line": 37,
                    "type": "EventEmitter<ItCollapseItemComponent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_hiddenEvent",
                    "defaultValue": "new EventEmitter<ItCollapseItemComponent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_hideEvent",
                    "defaultValue": "new EventEmitter<ItCollapseItemComponent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_showEvent",
                    "defaultValue": "new EventEmitter<ItCollapseItemComponent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_shownEvent",
                    "defaultValue": "new EventEmitter<ItCollapseItemComponent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "directive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItCollapseDirective",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "ItCollapseDirective, {static: true}"
                        }
                    ],
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "headingId",
                    "defaultValue": "`${this.id}-heading`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "id",
                    "defaultValue": "`collapse-item-${identifier++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "hidden",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "shown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewChild, ElementRef, Output, EventEmitter } from '@angular/core';\nimport { ItCollapseDirective } from './collapse.directive';\n\nlet identifier = 0;\n\n@Component({\n  selector: 'it-collapse-item',\n  templateUrl: './collapse-item.component.html',\n  styleUrls: ['./collapse-item.component.css']\n})\nexport class ItCollapseItemComponent {\n  @ViewChild(ItCollapseDirective, { static: true }) readonly directive: ItCollapseDirective;\n\n  id = `collapse-item-${identifier++}`;\n  headingId = `${this.id}-heading`;\n\n  /**\n   * Testo del bottone di apertura/chiusura del collapse item\n   */\n  @Input()\n  get header(): string { return this._header; }\n  set header(value: string) { this._header = value; }\n  private _header;\n\n  /**\n   * Evento da emettere quando il collapse sta per essere mostrato\n   */\n  @Output('show')\n  get showEvent(): EventEmitter<ItCollapseItemComponent> { return this._showEvent; }\n  set showEvent(value: EventEmitter<ItCollapseItemComponent>) { this._showEvent = value; }\n  private _showEvent = new EventEmitter<ItCollapseItemComponent>();\n\n  /**\n   * Evento da emettere quando il collapse è mostrato\n   */\n  @Output('shown')\n  get shownEvent(): EventEmitter<ItCollapseItemComponent> { return this._shownEvent; }\n  set shownEvent(value: EventEmitter<ItCollapseItemComponent>) { this._shownEvent = value; }\n  private _shownEvent = new EventEmitter<ItCollapseItemComponent>();\n\n  /**\n   * Evento da emettere quando il collapse sta per essere nascosto\n   */\n  @Output('hide')\n  get hideEvent(): EventEmitter<ItCollapseItemComponent> { return this._hideEvent; }\n  set hideEvent(value: EventEmitter<ItCollapseItemComponent>) { this._hideEvent = value; }\n  private _hideEvent = new EventEmitter<ItCollapseItemComponent>();\n\n  /**\n   * Evento da emettere quando il collapse è nascosto\n   */\n  @Output('hidden')\n  get hiddenEvent(): EventEmitter<ItCollapseItemComponent> { return this._hiddenEvent; }\n  set hiddenEvent(value: EventEmitter<ItCollapseItemComponent>) { this._hiddenEvent = value; }\n  private _hiddenEvent = new EventEmitter<ItCollapseItemComponent>();\n\n  show() {\n    this.showEvent.emit(this);\n  }\n\n  hide() {\n    this.hideEvent.emit(this);\n  }\n\n  shown() {\n    this.shownEvent.emit(this);\n  }\n\n  hidden() {\n    this.hiddenEvent.emit(this);\n  }\n\n  constructor(readonly elementRef: ElementRef) { }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./collapse-item.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 71,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "header": {
                    "name": "header",
                    "setSignature": {
                        "name": "header",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 22,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "header",
                        "type": "string",
                        "returnType": "string",
                        "line": 21,
                        "rawdescription": "\n\nTesto del bottone di apertura/chiusura del collapse item\n",
                        "description": "<p>Testo del bottone di apertura/chiusura del collapse item</p>\n"
                    }
                },
                "showEvent": {
                    "name": "showEvent",
                    "setSignature": {
                        "name": "showEvent",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "EventEmitter<ItCollapseItemComponent>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 30,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "EventEmitter<ItCollapseItemComponent>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "showEvent",
                        "type": "",
                        "returnType": "EventEmitter<ItCollapseItemComponent>",
                        "line": 29,
                        "rawdescription": "\n\nEvento da emettere quando il collapse sta per essere mostrato\n",
                        "description": "<p>Evento da emettere quando il collapse sta per essere mostrato</p>\n"
                    }
                },
                "shownEvent": {
                    "name": "shownEvent",
                    "setSignature": {
                        "name": "shownEvent",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "EventEmitter<ItCollapseItemComponent>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 38,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "EventEmitter<ItCollapseItemComponent>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "shownEvent",
                        "type": "",
                        "returnType": "EventEmitter<ItCollapseItemComponent>",
                        "line": 37,
                        "rawdescription": "\n\nEvento da emettere quando il collapse è mostrato\n",
                        "description": "<p>Evento da emettere quando il collapse è mostrato</p>\n"
                    }
                },
                "hideEvent": {
                    "name": "hideEvent",
                    "setSignature": {
                        "name": "hideEvent",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "EventEmitter<ItCollapseItemComponent>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 46,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "EventEmitter<ItCollapseItemComponent>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "hideEvent",
                        "type": "",
                        "returnType": "EventEmitter<ItCollapseItemComponent>",
                        "line": 45,
                        "rawdescription": "\n\nEvento da emettere quando il collapse sta per essere nascosto\n",
                        "description": "<p>Evento da emettere quando il collapse sta per essere nascosto</p>\n"
                    }
                },
                "hiddenEvent": {
                    "name": "hiddenEvent",
                    "setSignature": {
                        "name": "hiddenEvent",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "EventEmitter<ItCollapseItemComponent>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 54,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "EventEmitter<ItCollapseItemComponent>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "hiddenEvent",
                        "type": "",
                        "returnType": "EventEmitter<ItCollapseItemComponent>",
                        "line": 53,
                        "rawdescription": "\n\nEvento da emettere quando il collapse è nascosto\n",
                        "description": "<p>Evento da emettere quando il collapse è nascosto</p>\n"
                    }
                }
            },
            "templateData": "<div class=\"collapse-header\" [id]=\"headingId\">\n  <button #toggleButton focusMouse data-toggle=\"collapse\" [attr.aria-expanded]=\"!collapse.isCollapsed\" [attr.aria-controls]=\"id\" (click)=\"collapse.toggle()\" [ngClass]=\"{'collapsed' : collapse.isCollapsed}\">\n    {{header}}\n  </button>\n</div>\n<div [id]=\"id\" #collapse=\"itCollapse\" itCollapse  (shown)=\"shown()\" (hidden)=\"hidden()\" role=\"tabpanel\" [attr.aria-labelledby]=\"headingId\">\n  <div class=\"collapse-body\">\n    <ng-content></ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "ItTabComponent",
            "id": "component-ItTabComponent-3f446de7ab0dfa677b546cd848c8cbb81a8bf4a4160461b24019beed3b621a8faee8a24671dbd9514d796ff538d4113feb343d05662d04d76b9c75fdf9b7d9e3",
            "file": "projects/design-angular-kit/src/lib/tabs/tab.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "itTab",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-tab",
            "styleUrls": [
                "./tab.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tab.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "aria-label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAria label del tab.",
                    "description": "<p>Aria label del tab.</p>\n",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "aria-labelledby",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRiferimento all'elemento dal quale il tab è etichettato.\nViene resettato se `aria-label` è impostato.\n",
                    "description": "<p>Riferimento all&#39;elemento dal quale il tab è etichettato.\nViene resettato se <code>aria-label</code> è impostato.</p>\n",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSe la tab è disabilitata.",
                    "description": "<p>Se la tab è disabilitata.</p>\n",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLa stringa rappresentante l'icona da utilizzare nel titolo della tab. Es. `it-file`\n",
                    "description": "<p>La stringa rappresentante l&#39;icona da utilizzare nel titolo della tab. Es. <code>it-file</code></p>\n",
                    "line": 52,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nTesto della tab.",
                    "description": "<p>Testo della tab.</p>\n",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_disableChange",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Emette un evento ogni volta che l&#39;attributo disabled cambia</p>\n",
                    "line": 58,
                    "rawdescription": "\nEmette un evento ogni volta che l'attributo disabled cambia",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_implicitContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TemplateRef, {static: true}"
                        }
                    ]
                },
                {
                    "name": "_labelChange",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Emette un evento ogni volta che la label cambia.</p>\n",
                    "line": 55,
                    "rawdescription": "\nEmette un evento ogni volta che la label cambia.",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Se il tab è attivo.</p>\n",
                    "line": 69,
                    "rawdescription": "\n\nSe il tab è attivo.\n"
                },
                {
                    "name": "position",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "<p>La posizione relativa della tab dove 0 rappresenta il centro, i negativi sono a sinistra\ne i positivi sono a destra.</p>\n",
                    "line": 64,
                    "rawdescription": "\n\nLa posizione relativa della tab dove 0 rappresenta il centro, i negativi sono a sinistra\ne i positivi sono a destra.\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Un componente tab con design bootstrap italia. Indica la singola tab di un insieme di tab.\nUtilizzabile con il tag <code>&lt;it-tab&gt;</code> all&#39;interno di un tag <code>&lt;it-tab-group&gt;</code>.</p>\n",
            "rawdescription": "\n\nUn componente tab con design bootstrap italia. Indica la singola tab di un insieme di tab.\nUtilizzabile con il tag `<it-tab>` all'interno di un tag `<it-tab-group>`.\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnDestroy,\n  OnChanges,\n  Input,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Util } from '../util/util';\n\n/**\n * Un componente tab con design bootstrap italia. Indica la singola tab di un insieme di tab.\n * Utilizzabile con il tag `<it-tab>` all'interno di un tag `<it-tab-group>`.\n */\n@Component({\n  selector: 'it-tab',\n  exportAs: 'itTab',\n  templateUrl: './tab.component.html',\n  styleUrls: ['./tab.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class ItTabComponent implements OnChanges, OnDestroy {\n\n  /** Testo della tab. */\n  @Input() label: string = ''; // tslint:disable-line\n\n  /** Aria label del tab. */\n  @Input('aria-label') ariaLabel: string; // tslint:disable-line\n\n  /**\n   * Riferimento all'elemento dal quale il tab è etichettato.\n   * Viene resettato se `aria-label` è impostato.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string; // tslint:disable-line\n\n  /** Se la tab è disabilitata. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = Util.coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  /**\n   * La stringa rappresentante l'icona da utilizzare nel titolo della tab. Es. `it-file`\n   */\n  @Input() icon: string | null = null;\n\n  /** Emette un evento ogni volta che la label cambia. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emette un evento ogni volta che l'attributo disabled cambia */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * La posizione relativa della tab dove 0 rappresenta il centro, i negativi sono a sinistra\n   * e i positivi sono a destra.\n   */\n  position: number | null = null;\n\n  /**\n   * Se il tab è attivo.\n   */\n  isActive = false;\n\n  @ViewChild(TemplateRef, { static: true }) _implicitContent: TemplateRef<any>;\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('label')\n        || changes.hasOwnProperty('ariaLabel')\n        || changes.hasOwnProperty('ariaLabelledby')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./tab.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnChanges",
                "OnDestroy"
            ],
            "accessors": {
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 44,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 43,
                        "rawdescription": "\nSe la tab è disabilitata.",
                        "description": "<p>Se la tab è disabilitata.</p>\n"
                    }
                }
            },
            "templateData": "<ng-template><ng-content></ng-content></ng-template>\n"
        },
        {
            "name": "ItTabGroupComponent",
            "id": "component-ItTabGroupComponent-ea7ecc114ff52ce7982730e28f046104a6fab1a1571d6d790849e446a49cc3b4162d3c22104a6d9e17871de9eef3d3b199f40bf1384962f11ed00fab27b51e7b",
            "file": "projects/design-angular-kit/src/lib/tabs/tab-group.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "itTabGroup",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-tab-group",
            "styleUrls": [
                "./tab-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tab-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSe il tab-group ha un tema scuro\n",
                    "description": "<p>Se il tab-group ha un tema scuro</p>\n",
                    "line": 77,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "pill",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSe le tab sono formattate come pill.",
                    "description": "<p>Se le tab sono formattate come pill.</p>\n",
                    "line": 58,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "selectedIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nL'indice della tab attiva.",
                    "description": "<p>L&#39;indice della tab attiva.</p>\n",
                    "line": 67,
                    "type": "number | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedIndexChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nabilita il supporto al data-binding bidirezionale `[(selectedIndex)]`",
                    "description": "<p>abilita il supporto al data-binding bidirezionale <code>[(selectedIndex)]</code></p>\n",
                    "line": 84,
                    "type": "EventEmitter<number>"
                },
                {
                    "name": "selectedTabChange",
                    "defaultValue": "new EventEmitter<TabChangeEvent>(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nemesso quando la selezione del tab cambia.",
                    "description": "<p>emesso quando la selezione del tab cambia.</p>\n",
                    "line": 87,
                    "type": "EventEmitter<TabChangeEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_dark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_groupId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_indexToSelect",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "<p>L&#39;indice del tab che dovrebbe essere selezionato dopo che il contenuto e&#39; stato controllato</p>\n",
                    "line": 48,
                    "rawdescription": "\nL'indice del tab che dovrebbe essere selezionato dopo che il contenuto e' stato controllato",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_isPill",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_selectedIndex",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_tabLabelSubscription",
                    "defaultValue": "Subscription.EMPTY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Subscription ai cambiamenti alle label dei tab.</p>\n",
                    "line": 54,
                    "rawdescription": "\nSubscription ai cambiamenti alle label dei tab.",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_tabs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ItTabComponent>",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "ItTabComponent"
                        }
                    ]
                },
                {
                    "name": "_tabsSubscription",
                    "defaultValue": "Subscription.EMPTY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Subscription all&#39;aggiunta e rimozione di tab.</p>\n",
                    "line": 51,
                    "rawdescription": "\nSubscription all'aggiunta e rimozione di tab.",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_clampTabIndex",
                    "args": [
                        {
                            "name": "index",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nfissa l'indice tra 0 e la dimensione dei tab.",
                    "description": "<p>fissa l&#39;indice tra 0 e la dimensione dei tab.</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_createChangeEvent",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TabChangeEvent",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_getTabContentId",
                    "args": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nritorna un id univoco per ogni elemento di contenuto del tab",
                    "description": "<p>ritorna un id univoco per ogni elemento di contenuto del tab</p>\n",
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_getTabIndex",
                    "args": [
                        {
                            "name": "tab",
                            "type": "ItTabComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number | null",
                    "typeParameters": [],
                    "line": 211,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nrestituisce il tabIndex del tab.",
                    "description": "<p>restituisce il tabIndex del tab.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "ItTabComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_getTabLabelId",
                    "args": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nritorna un id univoco per ogni label di tab",
                    "description": "<p>ritorna un id univoco per ogni label di tab</p>\n",
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_handleClick",
                    "args": [
                        {
                            "name": "$event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_subscribeToTabLabels",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSottoscrivi a cambiamenti nelle label dei tab. Necessario perchè l'input per la label è sul TabComponent\nmentre il data binding è all'interno di TabGroupComponent. Per fare in modo che il binding sia aggiornato\nbisogna sottoscriversi ai cambiamenti e azionare la change detection in maniera manuale.\n",
                    "description": "<p>Sottoscrivi a cambiamenti nelle label dei tab. Necessario perchè l&#39;input per la label è sul TabComponent\nmentre il data binding è all&#39;interno di TabGroupComponent. Per fare in modo che il binding sia aggiornato\nbisogna sottoscriversi ai cambiamenti e azionare la change detection in maniera manuale.</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "changeTab",
                    "args": [
                        {
                            "name": "newIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterContentChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDopo che il contenuto è controllato, il componente conosce i tab che sono stati definiti\ne qual è l'indice del tab selezionato.\n",
                    "description": "<p>Dopo che il contenuto è controllato, il componente conosce i tab che sono stati definiti\ne qual è l&#39;indice del tab selezionato.</p>\n"
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Un componente tab-group con design bootstrap italia. Utilizzabile con il tag <code>&lt;it-tab-group&gt;</code>.</p>\n<p>Supporta al suo interno tab di base <code>&lt;it-tab&gt;</code> con una label e un contenuto.</p>\n",
            "rawdescription": "\n\nUn componente tab-group con design bootstrap italia. Utilizzabile con il tag `<it-tab-group>`.\n\nSupporta al suo interno tab di base `<it-tab>` con una label e un contenuto.\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  AfterContentInit,\n  ContentChildren,\n  QueryList,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  AfterContentChecked,\n  OnDestroy\n} from '@angular/core';\nimport { Subscription, merge } from 'rxjs';\nimport { Util } from '../util/util';\nimport { ItTabComponent } from './tab.component';\n\n/** Usato per generare ID univoci per ogni componente tab */\nlet nextId = 0;\n\n/** Un change event emesso ai cambi di selezione. */\nexport class TabChangeEvent {\n  /** Indice del tab selezionato. */\n  index: number;\n  /** Riferimento al tab selezionato. */\n  tab: ItTabComponent;\n}\n\n /**\n * Un componente tab-group con design bootstrap italia. Utilizzabile con il tag `<it-tab-group>`.\n *\n * Supporta al suo interno tab di base `<it-tab>` con una label e un contenuto.\n */\n@Component({\n  selector: 'it-tab-group',\n  exportAs: 'itTabGroup',\n  templateUrl: './tab-group.component.html',\n  styleUrls: ['./tab-group.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ItTabGroupComponent implements AfterContentInit, AfterContentChecked, OnDestroy {\n\n  @ContentChildren(ItTabComponent) _tabs: QueryList<ItTabComponent>;\n\n  /** L'indice del tab che dovrebbe essere selezionato dopo che il contenuto e' stato controllato */\n  private _indexToSelect: number | null = 0;\n\n  /** Subscription all'aggiunta e rimozione di tab. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription ai cambiamenti alle label dei tab. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Se le tab sono formattate come pill. */\n  @Input()\n  get pill(): boolean { return this._isPill; }\n  set pill(value) {\n    this._isPill = Util.coerceBooleanProperty(value);\n  }\n  private _isPill = false;\n\n\n  /** L'indice della tab attiva. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = Util.coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /**\n   * Se il tab-group ha un tema scuro\n   */\n  @Input()\n  get dark(): boolean { return this._dark; }\n  set dark(value) {\n    this._dark = Util.coerceBooleanProperty(value);\n  }\n  private _dark = false;\n\n  /** abilita il supporto al data-binding bidirezionale `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** emesso quando la selezione del tab cambia. */\n  @Output() readonly selectedTabChange: EventEmitter<TabChangeEvent> =\n      new EventEmitter<TabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {\n    this._groupId = nextId++;\n  }\n\n  /**\n   * Dopo che il contenuto è controllato, il componente conosce i tab che sono stati definiti\n   * e qual è l'indice del tab selezionato.\n   */\n  ngAfterContentChecked(): void {\n    this.changeTab(this._indexToSelect);\n  }\n\n  changeTab(newIndex: number): void {\n\n    // Non fissare `indexToSelect` immediatamente nel setter perchè può accadere che\n    // il numero di tab cambi prima che avvenga la change detection.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(newIndex);\n\n    // Se il nuovo tab è disabilitato, non fare niente\n    if (this._tabs && this._tabs.length > 0 && this._tabs.toArray()[indexToSelect].disabled) {\n      return;\n    }\n\n    if (this._selectedIndex !== indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emetto questo valore dopo che è partita la change detection\n      // dal momento che il contenuto controllato potrebbe contenere questa variabile\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setta la posizione per ogni tab.\n    this._tabs.forEach((tab: ItTabComponent, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._subscribeToTabLabels();\n\n    // Sottoscrivi al cambiamento nel numero di tab, così da\n    // poter ri-renderizzare il contenuto quando nuove tab vengono aggiunte o rimosse.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Mantieni il tab selezionato precedentemente se un nuovo tab è aggiunto o rimosso e non ci sono\n      // cambiamenti espliciti che selezionino un tab differente.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assegna `_indexToSelect` e `_selectedIndex` in modo da non emettere un change event\n            // per evitare al consumer loop infiniti in alcuni casi limite come ad esempio\n            // se si aggiunge un tab all'interno dell'evento `selectedIndexChange`.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy(): void {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  private _createChangeEvent(index: number): TabChangeEvent {\n    const event = new TabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Sottoscrivi a cambiamenti nelle label dei tab. Necessario perchè l'input per la label è sul TabComponent\n   * mentre il data binding è all'interno di TabGroupComponent. Per fare in modo che il binding sia aggiornato\n   * bisogna sottoscriversi ai cambiamenti e azionare la change detection in maniera manuale.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** fissa l'indice tra 0 e la dimensione dei tab. */\n  private _clampTabIndex(index: number | null): number {\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** ritorna un id univoco per ogni label di tab */\n  _getTabLabelId(i: number): string {\n    return `it-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** ritorna un id univoco per ogni elemento di contenuto del tab */\n  _getTabContentId(i: number): string {\n    return `it-tab-content-${this._groupId}-${i}`;\n  }\n\n  /** restituisce il tabIndex del tab. */\n  _getTabIndex(tab: ItTabComponent, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n\n  _handleClick($event: Event, index: number): void {\n    $event.preventDefault();\n    this.changeTab(index);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./tab-group.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 90,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterContentInit",
                "AfterContentChecked",
                "OnDestroy"
            ],
            "accessors": {
                "pill": {
                    "name": "pill",
                    "setSignature": {
                        "name": "pill",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 59,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "pill",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 58,
                        "rawdescription": "\nSe le tab sono formattate come pill.",
                        "description": "<p>Se le tab sono formattate come pill.</p>\n"
                    }
                },
                "selectedIndex": {
                    "name": "selectedIndex",
                    "setSignature": {
                        "name": "selectedIndex",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 68,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "selectedIndex",
                        "type": "",
                        "returnType": "number | null",
                        "line": 67,
                        "rawdescription": "\nL'indice della tab attiva.",
                        "description": "<p>L&#39;indice della tab attiva.</p>\n"
                    }
                },
                "dark": {
                    "name": "dark",
                    "setSignature": {
                        "name": "dark",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 78,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "dark",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 77,
                        "rawdescription": "\n\nSe il tab-group ha un tema scuro\n",
                        "description": "<p>Se il tab-group ha un tema scuro</p>\n"
                    }
                }
            },
            "templateData": "<ul class=\"nav\" [ngClass]=\"{'nav-dark': dark, 'nav-tabs': !pill, 'nav-pills mb-3': pill}\" role=\"tablist\">\n\n  <li class=\"nav-item\" *ngFor=\"let tab of _tabs; let i = index\">\n    <a\n    focusMouse\n      href=\"#\"\n      role=\"tab\"\n      [attr.aria-controls]=\"_getTabContentId(i)\"\n      [attr.aria-selected]=\"selectedIndex == i\"\n      [attr.aria-label]=\"tab.ariaLabel || null\"\n      [attr.aria-labelledby]=\"(!tab.ariaLabel && tab.ariaLabelledby) ? tab.ariaLabelledby : null\"\n      [ngClass]=\"{ 'nav-link': true, 'active': selectedIndex == i, 'disabled': tab.disabled }\"\n      [id]=\"_getTabLabelId(i)\"\n      (click)=\"_handleClick($event, i)\"\n      >\n      <i *ngIf=\"tab.icon\" class=\"it-ico-lg d-block text-center\" [ngClass]=\"tab.icon\"></i>\n      {{tab.label}}\n    </a>\n  </li>\n</ul>\n<div class=\"tab-content\">\n  <ng-container *ngFor=\"let tab of _tabs; let i = index\">\n    <div\n      [ngClass]=\"{ 'tab-pane p-3': true, 'show active': selectedIndex == i }\"\n      [id]=\"_getTabContentId(i)\"\n      role=\"tabpanel\"\n      [attr.aria-labelledby]=\"_getTabLabelId(i)\">\n      <ng-container *ngTemplateOutlet=\"tab._implicitContent\"></ng-container>\n    </div>\n  </ng-container>\n</div>\n"
        },
        {
            "name": "ProgressBarComponent",
            "id": "component-ProgressBarComponent-19c816131c4878aa5b3f850f0f17ee5a414cd7a6f941aa0f8a95ad2f34ae0a69568059f15dffa09c51b18b718fa7105596941ebde7159372d4248adbb065f1dd",
            "file": "projects/design-angular-kit/src/lib/progress-bar/progress-bar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-progress-bar",
            "styleUrls": [
                "./progress-bar.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./progress-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIl colore della barra di avanzamento.\n",
                    "description": "<p>Il colore della barra di avanzamento.</p>\n",
                    "line": 79,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "indeterminate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "indeterminateHiddenText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nL'etichetta della barra di avanzamento.\n",
                    "description": "<p>L&#39;etichetta della barra di avanzamento.</p>\n",
                    "line": 61,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIl valore massimo della barra di avanzamento.\n",
                    "description": "<p>Il valore massimo della barra di avanzamento.</p>\n",
                    "line": 45,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIl valore minimo della barra di avanzamento.\n",
                    "description": "<p>Il valore minimo della barra di avanzamento.</p>\n",
                    "line": 37,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nL'attuale valore della barra di avanzamento.\n",
                    "description": "<p>L&#39;attuale valore della barra di avanzamento.</p>\n",
                    "line": 53,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_color",
                    "defaultValue": "THEME_COLORS.PRIMARY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_indeterminate",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_indeterminateHiddenText",
                    "defaultValue": "\"In elaborazione...\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_label",
                    "defaultValue": "ProgressBarComponent.PROGRESS_BAR_DEFAULT_LABEL",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_max",
                    "defaultValue": "ProgressBarComponent.PROGRESS_BAR_DEFAULT_MAX",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_min",
                    "defaultValue": "ProgressBarComponent.PROGRESS_BAR_DEFAULT_MIN",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_value",
                    "defaultValue": "ProgressBarComponent.PROGRESS_BAR_DEFAULT_VALUE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "PROGRESS_BAR_DEFAULT_LABEL",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "PROGRESS_BAR_DEFAULT_MAX",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "PROGRESS_BAR_DEFAULT_MIN",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "PROGRESS_BAR_DEFAULT_VALUE",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "progressbarId",
                    "defaultValue": "`it-progress-bar-${progressbarId++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "pgStyle",
                    "args": [],
                    "optional": false,
                    "returnType": "{ width: string; }",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "valuePercentage",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Una barra di avanzamento con design bootstrap italia.</p>\n",
            "rawdescription": "\n\nUna barra di avanzamento con design bootstrap italia.\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ThemeColor, THEME_COLORS } from '../models/ThemeColor';\nimport { Util } from '../util/util';\n\nlet progressbarId = 0;\n\n/**\n * Una barra di avanzamento con design bootstrap italia.\n */\n@Component({\n  selector: 'it-progress-bar',\n  templateUrl: './progress-bar.component.html',\n  styleUrls: ['./progress-bar.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ProgressBarComponent {\n\n  public static readonly PROGRESS_BAR_DEFAULT_MIN = 0;\n  public static readonly PROGRESS_BAR_DEFAULT_MAX = 100;\n  public static readonly PROGRESS_BAR_DEFAULT_VALUE = 0;\n  public static readonly PROGRESS_BAR_DEFAULT_LABEL = '';\n\n  progressbarId = `it-progress-bar-${progressbarId++}`;\n\n  /**\n   * Il valore minimo della barra di avanzamento.\n   */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) { this._min = Math.round(v); }\n  private _min = ProgressBarComponent.PROGRESS_BAR_DEFAULT_MIN;\n\n  /**\n   * Il valore massimo della barra di avanzamento.\n   */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) { this._max = Math.round(v); }\n  private _max = ProgressBarComponent.PROGRESS_BAR_DEFAULT_MAX;\n\n  /**\n   * L'attuale valore della barra di avanzamento.\n   */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = Math.min(Math.max(v, this._min), this._max); }\n  private _value = ProgressBarComponent.PROGRESS_BAR_DEFAULT_VALUE;\n\n  /**\n   * L'etichetta della barra di avanzamento.\n   */\n  @Input()\n  get label(): string { return this._label; }\n  set label(v: string) { this._label = v; }\n  private _label = ProgressBarComponent.PROGRESS_BAR_DEFAULT_LABEL;\n\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) { this._indeterminate = Util.coerceBooleanProperty(value); }\n  private _indeterminate = false;\n\n  @Input()\n  get indeterminateHiddenText(): string { return this._indeterminateHiddenText; }\n  set indeterminateHiddenText(v: string) { this._indeterminateHiddenText = v; }\n  private _indeterminateHiddenText = \"In elaborazione...\";\n\n  /**\n   * Il colore della barra di avanzamento.\n   */\n  @Input()\n  get color(): any {\n    return this._color;\n  }\n  set color(value: any) {\n    if (ThemeColor.is(value)) {\n      this._color = value;\n    } else {\n      this._color = THEME_COLORS.PRIMARY;\n    }\n  }\n  private _color = THEME_COLORS.PRIMARY;\n\n  valuePercentage(): number {\n    return ((this.value - this.min) * 100) / (this.max - this.min);\n  }\n\n  pgStyle() {\n    return this.indeterminate ? null : { 'width' : this.valuePercentage() + '%' };\n  }\n\n\n  get progressBarClass(): Set<string> {\n    const progressbarClass = new Set<string>();\n    progressbarClass.add('progress-bar');\n    if (this.color) {\n      progressbarClass.add(`bg-${this.color}`);\n    }\n\n    return progressbarClass;\n  }\n\n\n  constructor() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./progress-bar.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 108
            },
            "accessors": {
                "min": {
                    "name": "min",
                    "setSignature": {
                        "name": "min",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 38,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "min",
                        "type": "number",
                        "returnType": "number",
                        "line": 37,
                        "rawdescription": "\n\nIl valore minimo della barra di avanzamento.\n",
                        "description": "<p>Il valore minimo della barra di avanzamento.</p>\n"
                    }
                },
                "max": {
                    "name": "max",
                    "setSignature": {
                        "name": "max",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 46,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "max",
                        "type": "number",
                        "returnType": "number",
                        "line": 45,
                        "rawdescription": "\n\nIl valore massimo della barra di avanzamento.\n",
                        "description": "<p>Il valore massimo della barra di avanzamento.</p>\n"
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 54,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "number",
                        "returnType": "number",
                        "line": 53,
                        "rawdescription": "\n\nL'attuale valore della barra di avanzamento.\n",
                        "description": "<p>L&#39;attuale valore della barra di avanzamento.</p>\n"
                    }
                },
                "label": {
                    "name": "label",
                    "setSignature": {
                        "name": "label",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 62,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "label",
                        "type": "string",
                        "returnType": "string",
                        "line": 61,
                        "rawdescription": "\n\nL'etichetta della barra di avanzamento.\n",
                        "description": "<p>L&#39;etichetta della barra di avanzamento.</p>\n"
                    }
                },
                "indeterminate": {
                    "name": "indeterminate",
                    "setSignature": {
                        "name": "indeterminate",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 67,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "indeterminate",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 66
                    }
                },
                "indeterminateHiddenText": {
                    "name": "indeterminateHiddenText",
                    "setSignature": {
                        "name": "indeterminateHiddenText",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 72,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "indeterminateHiddenText",
                        "type": "string",
                        "returnType": "string",
                        "line": 71
                    }
                },
                "color": {
                    "name": "color",
                    "setSignature": {
                        "name": "color",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 82,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "color",
                        "type": "any",
                        "returnType": "any",
                        "line": 79,
                        "rawdescription": "\n\nIl colore della barra di avanzamento.\n",
                        "description": "<p>Il colore della barra di avanzamento.</p>\n"
                    }
                },
                "progressBarClass": {
                    "name": "progressBarClass",
                    "getSignature": {
                        "name": "progressBarClass",
                        "type": "",
                        "returnType": "Set<string>",
                        "line": 100
                    }
                }
            },
            "templateData": "<ng-container *ngIf = \"label; else progressBarEl\">\n  <div class=\"progress-bar-wrapper\">\n    <div class=\"progress-bar-label\"><span class=\"visually-hidden\">Progresso </span>{{label}}</div>\n    <ng-container *ngTemplateOutlet=\"progressBarEl\"></ng-container>\n  </div>\n</ng-container>\n\n<ng-template #progressBarEl>\n  <div class=\"progress\" [class.progress-indeterminate] = \"indeterminate\">\n    <span class=\"visually-hidden\" *ngIf=\"indeterminate && indeterminateHiddenText\">{{indeterminateHiddenText}}</span>\n    <div role=\"progressbar\" [id]=\"progressbarId\" \n      [ngClass]=\"progressBarClass\" \n      [ngStyle]=\"pgStyle()\"\n      [attr.aria-valuenow]=\"value\" [attr.aria-valuemin]=\"min\" [attr.aria-valuemax]=\"max\" >\n    </div>\n  </div>\n</ng-template>"
        },
        {
            "name": "RadioButtonComponent",
            "id": "component-RadioButtonComponent-ab0a8ebae66165b1788d514410994e34c024aadca082a8b4fac18d45934ef0a733ce5c7acbd3ddab8f85fe3cc6987731487de0fe7542e693f6142f86b40281c1",
            "file": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "itRadioButton",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-radio-button",
            "styleUrls": [
                "./radio.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./radio.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nse il radio button è checked.",
                    "description": "<p>se il radio button è checked.</p>\n",
                    "line": 215,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSe il radio button è disabled.",
                    "description": "<p>Se il radio button è disabled.</p>\n",
                    "line": 253,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nL'etichetta delradio button.",
                    "description": "<p>L&#39;etichetta delradio button.</p>\n",
                    "line": 211,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAttributo 'name' usato per raggruppare i radio button per un'unica selezione.",
                    "description": "<p>Attributo &#39;name&#39; usato per raggruppare i radio button per un&#39;unica selezione.</p>\n",
                    "line": 207,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIl valore di questo radio button.",
                    "description": "<p>Il valore di questo radio button.</p>\n",
                    "line": 236,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter<RadioChange>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvento emesso quando il valore `checked` del radio button cambia.\n",
                    "description": "<p>Evento emesso quando il valore <code>checked</code> del radio button cambia.</p>\n",
                    "line": 267,
                    "type": "EventEmitter<RadioChange>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Se il radio button è checked.</p>\n",
                    "line": 273,
                    "rawdescription": "\nSe il radio button è checked.",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Se il radio button è disabled.</p>\n",
                    "line": 276,
                    "rawdescription": "\nSe il radio button è disabled.",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_removeUniqueSelectionListener",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 281,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_value",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>il valore assegnato al radio button.</p>\n",
                    "line": 279,
                    "rawdescription": "\nil valore assegnato al radio button.",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "id",
                    "defaultValue": "`radio-${identifier++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 204
                },
                {
                    "name": "radioGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RadioGroupDirective",
                    "optional": false,
                    "description": "<p>Il radio group padre. Può essere presente o meno.</p>\n",
                    "line": 270,
                    "rawdescription": "\nIl radio group padre. Può essere presente o meno."
                }
            ],
            "methodsClass": [
                {
                    "name": "_emitChangeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 318,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_markForCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 301,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSegna il radio button come da controllare per la change detection.\n",
                    "description": "<p>Segna il radio button come da controllare per la change detection.</p>\n"
                },
                {
                    "name": "_onInputChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 322,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 314,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 305,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Un radio button con design bootstrap italia. Supporta tutte le funzionalità di una radio HTML5,\ned espone una API simile. Una <code>&lt;it-radio-button&gt;</code> può essere checked, unchecked, o disabled.</p>\n",
            "rawdescription": "\n\nUn radio button con design bootstrap italia. Supporta tutte le funzionalità di una radio HTML5,\ned espone una API simile. Una `<it-radio-button>` può essere checked, unchecked, o disabled.\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  forwardRef,\n  ChangeDetectionStrategy,\n  AfterContentInit,\n  Directive,\n  ContentChildren,\n  QueryList,\n  OnInit,\n  OnDestroy,\n  Optional,\n  HostBinding\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { UniqueSelectionDispatcher } from './unique-selection-dispatcher';\n\nlet identifier = 0;\n\nfunction _coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n\nexport class RadioChange {\n  constructor(\n    public source: RadioButtonComponent,\n    public value: any\n  ) { }\n}\n\n@Directive({\n  selector: 'it-radio-group', // tslint:disable-line\n  exportAs: 'itRadioGroup',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioGroupDirective),\n    multi: true\n  }]\n})\nexport class RadioGroupDirective implements AfterContentInit, ControlValueAccessor {\n\n  @HostBinding('attr.role') role = 'radiogroup';\n\n  /**\n   * Il valore selezionato per il gruppo. Dovrebbe essere uguale al valore del radio button selezionato se\n   * *esiste* un radio button con un valore corrispondente. Se *non esiste* un radio button corrispondente\n   * questo valore persiste ed è applicato nel caso in cui un nuovo radio button viene aggiunto con il valore\n   * corrispondente.\n   */\n  private _value: any = null;\n\n  /** L'attributo HTML name da applicare ai radio button in questo gruppo */\n  private _name = `it-radio-group-${identifier++}`;\n\n  /** Il radio button attualmente selezionato. */\n  private _selected: RadioButtonComponent | null = null;\n\n  /** se `value` è stato settato al suo valore iniziale. */\n  private _isInitialized = false;\n\n  /** Se il radio group è disabilitato. */\n  private _disabled = false;\n\n\n\n  /**\n   * Evento emesso quando il valore del gruppo cambia.\n   * Gli eventi di change sono emessi soltanto quando il valore cambia a causa dell'interazione dell'utente\n   * con il radio button (stesso comportamento di `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<RadioChange> = new EventEmitter<RadioChange>();\n\n  /** radio buttons figli. */\n  @ContentChildren(forwardRef(() => RadioButtonComponent), { descendants: true }) _radios: QueryList<RadioButtonComponent>; // tslint:disable-line\n\n  /** Il metodo da chiamare per aggiornare ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => { };\n\n  onTouched: () => any = () => { };\n\n  /** Nome del gruppo di radio button. Tutti i radio button all'interno del gruppo avranno questo nome. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Valore del radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Il radio button selezionato. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: RadioButtonComponent | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Se il gruppo è disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = _coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef\n  ) { }\n\n  /**\n   * Inizializza le proprietà quando il contenuto dei figliè disponibile.\n   * Questo permette di propagare gli attributi rilevanti ai radio buttons associati.\n   */\n  ngAfterContentInit(): void {\n    this._isInitialized = true;\n  }\n\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Aggiorna il radio button `selected` a seconda del suo _value. */\n  private _updateSelectedRadioFromValue(): void {\n    this._selected = null;\n    this._radios.forEach(radio => {\n      radio.checked = this.value === radio.value;\n      if (radio.checked) {\n        this._selected = radio;\n      }\n    });\n  }\n\n  /** Invia l'evento change con la selezione corrente e il valore del gruppo. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new RadioChange(this._selected, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  writeValue(value: any): void {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  registerOnChange(fn: (value: any) => void): void {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n}\n\n/**\n * Un radio button con design bootstrap italia. Supporta tutte le funzionalità di una radio HTML5,\n * ed espone una API simile. Una `<it-radio-button>` può essere checked, unchecked, o disabled.\n */\n@Component({\n  selector: 'it-radio-button',\n  templateUrl: './radio.component.html',\n  styleUrls: ['./radio.component.scss'],\n  exportAs: 'itRadioButton',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RadioButtonComponent implements OnInit, OnDestroy {\n\n  id = `radio-${identifier++}`;\n\n  /** Attributo 'name' usato per raggruppare i radio button per un'unica selezione. */\n  @Input() name: string;\n\n  /** L'etichetta delradio button. */\n  @Input()\n  label: string;\n\n  /** se il radio button è checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = _coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Il valore di questo radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Se il radio button è disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = !!value;\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /**\n   * Evento emesso quando il valore `checked` del radio button cambia.\n   */\n  @Output() readonly change: EventEmitter<RadioChange> = new EventEmitter<RadioChange>();\n\n  /** Il radio group padre. Può essere presente o meno. */\n  radioGroup: RadioGroupDirective;\n\n  /** Se il radio button è checked. */\n  private _checked = false;\n\n  /** Se il radio button è disabled. */\n  private _disabled: boolean;\n\n  /** il valore assegnato al radio button. */\n  private _value: any = null;\n\n  private _removeUniqueSelectionListener: () => void = () => { };\n\n  constructor(\n    @Optional() radioGroup: RadioGroupDirective,\n    private _changeDetector: ChangeDetectorRef,\n    private _radioDispatcher: UniqueSelectionDispatcher\n  ) {\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /**\n   * Segna il radio button come da controllare per la change detection.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit(): void {\n    if (this.radioGroup) {\n      // Se il radio button è all'interno di un gruppo, determina se deve essere selezionato\n      this.checked = this.radioGroup.value === this._value;\n      // Copia il `name` del radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngOnDestroy() {\n    this._removeUniqueSelectionListener();\n  }\n\n  private _emitChangeEvent(): void {\n    this.change.emit(new RadioChange(this, this._value));\n  }\n\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./radio.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "radioGroup",
                        "type": "RadioGroupDirective",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_radioDispatcher",
                        "type": "UniqueSelectionDispatcher",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 281,
                "jsdoctags": [
                    {
                        "name": "radioGroup",
                        "type": "RadioGroupDirective",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_radioDispatcher",
                        "type": "UniqueSelectionDispatcher",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "checked": {
                    "name": "checked",
                    "setSignature": {
                        "name": "checked",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 216,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "checked",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 215,
                        "rawdescription": "\nse il radio button è checked.",
                        "description": "<p>se il radio button è checked.</p>\n"
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 237,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "any",
                        "returnType": "any",
                        "line": 236,
                        "rawdescription": "\nIl valore di questo radio button.",
                        "description": "<p>Il valore di questo radio button.</p>\n"
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 256,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 253,
                        "rawdescription": "\nSe il radio button è disabled.",
                        "description": "<p>Se il radio button è disabled.</p>\n"
                    }
                }
            },
            "templateData": "<div class=\"form-check\">\n  <input type=\"radio\"\n    focusMouse\n    [id]=\"id\"\n    [checked]=\"checked\"\n    [disabled]=\"disabled\"\n    [attr.name]=\"name\"\n    (change)=\"_onInputChange($event)\">\n  <label\n    [attr.for]=\"id\">{{label}}</label>\n</div>\n"
        },
        {
            "name": "ToggleComponent",
            "id": "component-ToggleComponent-1373773a1ec1ce2b67d2ffc98987acf20689643bd4191d56039cf3391d0b26f5501107cdaa83b9f21c4101c7aabeeaaf025161216d4c7633c1fb227da1477f7c",
            "file": "projects/design-angular-kit/src/lib/toggle/toggle.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ToggleComponent), multi: true }",
                    "type": "component"
                }
            ],
            "selector": "it-toggle",
            "styleUrls": [
                "./toggle.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./toggle.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSe la toggle è selezionata.\n",
                    "description": "<p>Se la toggle è selezionata.</p>\n",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSe la toggle è disabilitata.\n",
                    "description": "<p>Se la toggle è disabilitata.</p>\n",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nL'etichetta della toggle.\n",
                    "description": "<p>L&#39;etichetta della toggle.</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter<ToggleChange>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvento emesso quando il valore `checked` della toggle cambia.\n",
                    "description": "<p>Evento emesso quando il valore <code>checked</code> della toggle cambia.</p>\n",
                    "line": 58,
                    "type": "EventEmitter<ToggleChange>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_controlValueAccessorChangeFn",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "inputId",
                    "defaultValue": "`toggle-${identifier++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                }
            ],
            "methodsClass": [
                {
                    "name": "_emitChangeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "handleChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Una toggle con design bootstrap italia. Supporta tutte le funzionalità di una checkbox HTML5,\ned espone una API simile. Una <code>&lt;it-toggle&gt;</code> può essere checked, unchecked, o disabled.</p>\n",
            "rawdescription": "\n\nUna toggle con design bootstrap italia. Supporta tutte le funzionalità di una checkbox HTML5,\ned espone una API simile. Una `<it-toggle>` può essere checked, unchecked, o disabled.\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, ChangeDetectorRef, forwardRef, ChangeDetectionStrategy } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nlet identifier = 0;\n\nexport class ToggleChange {\n  source: ToggleComponent;\n  checked: boolean;\n}\n\n/**\n * Una toggle con design bootstrap italia. Supporta tutte le funzionalità di una checkbox HTML5,\n * ed espone una API simile. Una `<it-toggle>` può essere checked, unchecked, o disabled.\n */\n@Component({\n  selector: 'it-toggle',\n  templateUrl: './toggle.component.html',\n  styleUrls: ['./toggle.component.css'],\n  providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ToggleComponent), multi: true }],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ToggleComponent implements ControlValueAccessor {\n  /**\n   * Se la toggle è selezionata.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value !== this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked = false;\n\n  /**\n   * L'etichetta della toggle.\n   */\n  @Input()\n  label: string;\n\n  /**\n   * Se la toggle è disabilitata.\n   */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    if (value !== this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled = false;\n\n  /**\n   * Evento emesso quando il valore `checked` della toggle cambia.\n   */\n  @Output() readonly change: EventEmitter<ToggleChange> =\n    new EventEmitter<ToggleChange>();\n\n    inputId = `toggle-${identifier++}`;\n\n  private _onTouched: () => any = () => {};\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => { };\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef\n  ) { }\n\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  handleChange(event: Event) {\n    event.stopPropagation();\n    if (!this.disabled) {\n      this._toggle();\n      this._emitChangeEvent();\n    }\n  }\n\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  private _emitChangeEvent() {\n    const event = new ToggleChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./toggle.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "checked": {
                    "name": "checked",
                    "setSignature": {
                        "name": "checked",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 28,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "checked",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 27,
                        "rawdescription": "\n\nSe la toggle è selezionata.\n",
                        "description": "<p>Se la toggle è selezionata.</p>\n"
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 47,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 46,
                        "rawdescription": "\n\nSe la toggle è disabilitata.\n",
                        "description": "<p>Se la toggle è disabilitata.</p>\n"
                    }
                }
            },
            "templateData": "<div class=\"form-check\">\n  <div class=\"toggles\">\n    <label [attr.for]=inputId>\n      {{label}}\n      <input type=checkbox\n        focusMouse\n        [id]=inputId\n        [checked]=checked\n        [disabled]=disabled\n        (change)=handleChange($event)>\n      <span class=\"lever\"></span>\n    </label>\n  </div>\n</div>"
        }
    ],
    "modules": [
        {
            "name": "DesignAngularKitModule",
            "id": "module-DesignAngularKitModule-84b716a05d5a4fd814f3d5c449523d02f9c9f207f21721c2acf936e2cbb5a4dc42e8a77a8f622d464a738c1ead367bcb4f94287dee725c81d9ee89169e46b459",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-angular-kit/src/lib/design-angular-kit.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { CheckboxComponent } from './checkbox/checkbox.component';\nimport { ProgressBarComponent } from './progress-bar/progress-bar.component';\nimport { RadioButtonComponent, RadioGroupDirective } from './radio/radio.component';\nimport { ToggleComponent } from './toggle/toggle.component';\nimport { BadgeDirective } from './badge/badge.directive';\nimport { FormInputComponent } from './form-input/form-input.component';\nimport { BreadcrumbComponent } from './breadcrumb/breadcrumb.component';\nimport { BreadcrumbItemComponent } from './breadcrumb/breadcrumb-item.component';\nimport { ItPrefixDirective } from './form-input/it-prefix.directive';\nimport { ItSuffixDirective } from './form-input/it-suffix.directive';\nimport { ItTextPrefixDirective } from './form-input/it-text-prefix.directive';\nimport { ItTextSuffixDirective } from './form-input/it-text-suffix.directive';\nimport { ItPopoverModule } from './popover/popover.module';\nimport { ItTooltipModule } from './tooltip/tooltip.module';\nimport { ItCollapseModule } from './collapse/collapse.module';\nimport { ItDropdownModule } from './dropdown/dropdown.module';\nimport { ItIconModule } from './icon/icon.module';\nimport { ItButtonModule } from './button/button.module';\nimport { ItTabsModule } from './tabs/tabs.module';\nimport { MarkMatchingTextPipe } from './form-input/mark-matching-text.pipe';\nimport { ItUtilsModule } from './util/utils.module';\n\n@NgModule({\n    imports: [\n        \n        CommonModule,\n        ItUtilsModule,\n        FormsModule,\n        ItPopoverModule,\n        ItTooltipModule,\n        ItCollapseModule,\n        ItDropdownModule,\n        ItIconModule,\n        ItButtonModule,\n        ItTabsModule,\n    ],\n    declarations: [\n        CheckboxComponent,\n        ToggleComponent,\n        RadioGroupDirective,\n        RadioButtonComponent,\n        BadgeDirective,\n        ProgressBarComponent,\n        FormInputComponent,\n        BreadcrumbComponent,\n        BreadcrumbItemComponent,\n        ItPrefixDirective,\n        ItSuffixDirective,\n        ItTextPrefixDirective,\n        ItTextSuffixDirective,\n        MarkMatchingTextPipe\n    ],\n    exports: [\n        CheckboxComponent,\n        ToggleComponent,\n        RadioGroupDirective,\n        RadioButtonComponent,\n        BadgeDirective,\n        ProgressBarComponent,\n        ItButtonModule,\n        FormInputComponent,\n        BreadcrumbComponent,\n        BreadcrumbItemComponent,\n        ItIconModule,\n        ItPrefixDirective,\n        ItSuffixDirective,\n        ItTextPrefixDirective,\n        ItTextSuffixDirective,\n        ItPopoverModule,\n        ItTooltipModule,\n        ItCollapseModule,\n        ItDropdownModule,\n        ItUtilsModule\n    ]\n})\nexport class DesignAngularKitModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BadgeDirective"
                        },
                        {
                            "name": "BreadcrumbComponent"
                        },
                        {
                            "name": "BreadcrumbItemComponent"
                        },
                        {
                            "name": "CheckboxComponent"
                        },
                        {
                            "name": "FormInputComponent"
                        },
                        {
                            "name": "ItPrefixDirective"
                        },
                        {
                            "name": "ItSuffixDirective"
                        },
                        {
                            "name": "ItTextPrefixDirective"
                        },
                        {
                            "name": "ItTextSuffixDirective"
                        },
                        {
                            "name": "MarkMatchingTextPipe"
                        },
                        {
                            "name": "ProgressBarComponent"
                        },
                        {
                            "name": "RadioButtonComponent"
                        },
                        {
                            "name": "RadioGroupDirective"
                        },
                        {
                            "name": "ToggleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ItButtonModule"
                        },
                        {
                            "name": "ItCollapseModule"
                        },
                        {
                            "name": "ItDropdownModule"
                        },
                        {
                            "name": "ItIconModule"
                        },
                        {
                            "name": "ItPopoverModule"
                        },
                        {
                            "name": "ItTabsModule"
                        },
                        {
                            "name": "ItTooltipModule"
                        },
                        {
                            "name": "ItUtilsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BadgeDirective"
                        },
                        {
                            "name": "BreadcrumbComponent"
                        },
                        {
                            "name": "BreadcrumbItemComponent"
                        },
                        {
                            "name": "CheckboxComponent"
                        },
                        {
                            "name": "FormInputComponent"
                        },
                        {
                            "name": "ItButtonModule"
                        },
                        {
                            "name": "ItCollapseModule"
                        },
                        {
                            "name": "ItDropdownModule"
                        },
                        {
                            "name": "ItIconModule"
                        },
                        {
                            "name": "ItPopoverModule"
                        },
                        {
                            "name": "ItPrefixDirective"
                        },
                        {
                            "name": "ItSuffixDirective"
                        },
                        {
                            "name": "ItTextPrefixDirective"
                        },
                        {
                            "name": "ItTextSuffixDirective"
                        },
                        {
                            "name": "ItTooltipModule"
                        },
                        {
                            "name": "ItUtilsModule"
                        },
                        {
                            "name": "ProgressBarComponent"
                        },
                        {
                            "name": "RadioButtonComponent"
                        },
                        {
                            "name": "RadioGroupDirective"
                        },
                        {
                            "name": "ToggleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ItButtonModule",
            "id": "module-ItButtonModule-307524f98b98acf463d0ec90587ae63042d1b1535e4f65ca1bb0eba16fb9bd37f165a3a664f1d813473f4120e0e353e03834f6de5a7f16b3fe5d06228a98ae90",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-angular-kit/src/lib/button/button.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\nimport { ItIconModule } from \"../icon/icon.module\";\nimport { ItButtonDirective } from \"./button.directive\";\n\n@NgModule({\n    declarations: [ItButtonDirective],\n    imports: [ItIconModule],\n    exports: [ItButtonDirective]\n})\nexport class ItButtonModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ItButtonDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ItIconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ItButtonDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ItCollapseModule",
            "id": "module-ItCollapseModule-4deef7f5b3348b790f8e20299f4c5625f75285f8ab3efd26fe68bfc0e255eaf85759e7995b007fea01e57d1e71849c65004943f557baa9f3935371307779c663",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-angular-kit/src/lib/collapse/collapse.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { NgbCollapseModule } from \"@ng-bootstrap/ng-bootstrap\";\nimport { ItUtilsModule } from \"../util/utils.module\";\nimport { ItCollapseGroupComponent } from \"./collapse-group.component\";\nimport { ItCollapseItemComponent } from \"./collapse-item.component\";\nimport { ItCollapseDirective } from \"./collapse.directive\";\n\n@NgModule({\n    imports: [CommonModule, NgbCollapseModule, ItUtilsModule],\n    declarations: [ItCollapseDirective, ItCollapseItemComponent, ItCollapseGroupComponent],\n    exports: [ItCollapseDirective, ItCollapseItemComponent, ItCollapseGroupComponent],\n})\nexport class ItCollapseModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ItCollapseDirective"
                        },
                        {
                            "name": "ItCollapseGroupComponent"
                        },
                        {
                            "name": "ItCollapseItemComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ItUtilsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ItCollapseDirective"
                        },
                        {
                            "name": "ItCollapseGroupComponent"
                        },
                        {
                            "name": "ItCollapseItemComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ItDropdownModule",
            "id": "module-ItDropdownModule-1f0aea4e47570ba0ede4636ba8d240afb2b0fc9e4d314b1221c1da19de8dadc81957a1b5a6d07d510c92d837606a8898117f9e12ba18d228b482a7573b7b20a8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-angular-kit/src/lib/dropdown/dropdown.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { NgbDropdownModule } from \"@ng-bootstrap/ng-bootstrap\";\nimport { ItButtonModule } from \"../button/button.module\";\nimport { ItIconModule } from \"../icon/icon.module\";\nimport { ItUtilsModule } from \"../util/utils.module\";\nimport { DropdownDividerComponent } from \"./dropdown-divider.component\";\nimport { DropdownItemComponent } from \"./dropdown-item.component\";\nimport { DropdownComponent } from \"./dropdown.component\";\nimport { ItDropdown, ItDropdownAnchor, ItDropdownItem, ItDropdownMenu, ItDropdownToggle, ItNavbar } from \"./dropdown.directive\";\n\n@NgModule({\n    declarations: [DropdownComponent, DropdownDividerComponent, DropdownItemComponent, ItDropdown, ItNavbar, ItDropdownMenu, ItDropdownAnchor, ItDropdownToggle, ItDropdownItem],\n    imports: [CommonModule, NgbDropdownModule, ItIconModule, ItButtonModule, ItUtilsModule],\n    exports: [DropdownComponent, DropdownDividerComponent, DropdownItemComponent, ItDropdown, ItNavbar, ItDropdownMenu, ItDropdownAnchor, ItDropdownToggle, ItDropdownItem]\n})\nexport class ItDropdownModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DropdownComponent"
                        },
                        {
                            "name": "DropdownDividerComponent"
                        },
                        {
                            "name": "DropdownItemComponent"
                        },
                        {
                            "name": "ItDropdown"
                        },
                        {
                            "name": "ItDropdownAnchor"
                        },
                        {
                            "name": "ItDropdownItem"
                        },
                        {
                            "name": "ItDropdownMenu"
                        },
                        {
                            "name": "ItDropdownToggle"
                        },
                        {
                            "name": "ItNavbar"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ItButtonModule"
                        },
                        {
                            "name": "ItIconModule"
                        },
                        {
                            "name": "ItUtilsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DropdownComponent"
                        },
                        {
                            "name": "DropdownDividerComponent"
                        },
                        {
                            "name": "DropdownItemComponent"
                        },
                        {
                            "name": "ItDropdown"
                        },
                        {
                            "name": "ItDropdownAnchor"
                        },
                        {
                            "name": "ItDropdownItem"
                        },
                        {
                            "name": "ItDropdownMenu"
                        },
                        {
                            "name": "ItDropdownToggle"
                        },
                        {
                            "name": "ItNavbar"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ItIconModule",
            "id": "module-ItIconModule-a424b4c737ee59bcfc629dc088ebb4137d7ed4f3101817b9b72c697239a4a2fe418fc6169a44879b1f2204ae10a3afa5b10b969597f1b30c6382062a7b13c641",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-angular-kit/src/lib/icon/icon.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { IconComponent } from \"./icon.component\";\n\n@NgModule({\n    imports: [CommonModule],\n    declarations: [IconComponent],\n    exports: [IconComponent]\n})\nexport class ItIconModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IconComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IconComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ItPopoverModule",
            "id": "module-ItPopoverModule-3172edb2d6c3aafc419cd47dd9264ea7cc760add44b0907057d15b4f91eca71082bca0c3837487591cf0559849554f26b072a6bb32ecd06a221a554eebcf9fe0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-angular-kit/src/lib/popover/popover.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { NgbPopoverModule } from \"@ng-bootstrap/ng-bootstrap\";\nimport { ItPopover } from \"./popover.directive\";\n\n@NgModule({\n    declarations: [ItPopover],\n    exports: [ItPopover],\n    imports: [CommonModule, NgbPopoverModule]\n})\nexport class ItPopoverModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ItPopover"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ItPopover"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ItTabsModule",
            "id": "module-ItTabsModule-471feb0dab5c438b5bc3188df039737e449651f1d6d3805fd0bf74d83e880072b27cd4d7a24a624d318ff10443f4535232917645c4b7dba27127218f2fdc5692",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-angular-kit/src/lib/tabs/tabs.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { ItUtilsModule } from \"../util/utils.module\";\nimport { ItTabGroupComponent } from \"./tab-group.component\";\nimport { ItTabComponent } from \"./tab.component\";\n\n@NgModule({\n    declarations: [ItTabComponent, ItTabGroupComponent],\n    exports: [ItTabComponent, ItTabGroupComponent],\n    imports: [CommonModule, ItUtilsModule]\n})\nexport class ItTabsModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ItTabComponent"
                        },
                        {
                            "name": "ItTabGroupComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ItUtilsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ItTabComponent"
                        },
                        {
                            "name": "ItTabGroupComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ItTooltipModule",
            "id": "module-ItTooltipModule-dac421e43b524663cc56599bd361a04892cdb121bd071f9a27a02a85ace7d411955510679b97b30fc09882a584d8709131d0b7d126bb1b242ea141084a82a17e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-angular-kit/src/lib/tooltip/tooltip.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { NgbTooltipModule } from \"@ng-bootstrap/ng-bootstrap\";\nimport { ItTooltip } from \"./tooltip.directive\";\n\n@NgModule({\n    declarations: [ItTooltip],\n    exports: [ItTooltip],\n    imports: [CommonModule, NgbTooltipModule]\n})\nexport class ItTooltipModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ItTooltip"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ItTooltip"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ItUtilsModule",
            "id": "module-ItUtilsModule-11778ee4540ee285b02f5e971d7d82a72b72846092913c7be90185bd00dbc37733384876106f556988980092f74a23e0e7cbf907526cfa6e2e4a0c867da3c80e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-angular-kit/src/lib/util/utils.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\nimport { FocusMouseDirective } from \"./focus-mouse.directive\";\n\n\n@NgModule({\n    declarations: [FocusMouseDirective],\n    exports: [FocusMouseDirective]\n})\nexport class ItUtilsModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FocusMouseDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FocusMouseDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "BUTTON_SIZES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/ButtonSize.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  LG: LG,\n  SM: SM,\n  XS: XS,\n}"
            },
            {
                "name": "ButtonSize",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/ButtonSize.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "t.keyof({\n  lg: null,\n  sm: null,\n  xs: null,\n})"
            },
            {
                "name": "CLICK",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'click'"
            },
            {
                "name": "DANGER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'danger'"
            },
            {
                "name": "DARK",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'dark'"
            },
            {
                "name": "DATE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/InputType.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'date'"
            },
            {
                "name": "DEFAULT_COLOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/dropdown/dropdown.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'dropdown'"
            },
            {
                "name": "DEFAULT_SEPARATOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/breadcrumb/breadcrumb.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/'"
            },
            {
                "name": "EMAIL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/InputType.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'email'"
            },
            {
                "name": "FOCUS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'focus'"
            },
            {
                "name": "HORIZONTAL_ALIGN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/Alignment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "t.keyof(HorizontalAlign)"
            },
            {
                "name": "HOVER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'hover'"
            },
            {
                "name": "identifier",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/breadcrumb/breadcrumb-item.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "identifier",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/breadcrumb/breadcrumb.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "identifier",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/checkbox/checkbox.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "identifier",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/collapse/collapse-group.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "identifier",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/collapse/collapse-item.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "identifier",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/dropdown/dropdown-item.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "identifier",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/dropdown/dropdown.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "identifier",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/form-input/form-input.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "identifier",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "identifier",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/toggle/toggle.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "INFO",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'info'"
            },
            {
                "name": "INPUT_TYPES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/InputType.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  TEXT: TEXT,\n  EMAIL: EMAIL,\n  PASSWORD: PASSWORD,\n  NUMBER: NUMBER,\n  SEARCH: SEARCH,\n  TIME: TIME,\n  DATE: DATE\n}"
            },
            {
                "name": "InputType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/InputType.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "t.keyof({\n  text: null,\n  email: null,\n  password: null,\n  number: null,\n  time: null,\n  search: null,\n  date: null,\n  radio: null,\n  checkbox: null,\n  textarea: null,\n  button: null,\n  reset: null,  \n  submit: null,\n  'datetime-local': null,\n  hidden: null,\n  image: null,\n  month: null,\n  range: null,\n  tel: null,\n  url: null,\n  week: null,\n  datetime: null,\n  color: null,\n  file: null\n})"
            },
            {
                "name": "INTERACTION_TRIGGERS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  CLICK: CLICK,\n  FOCUS: FOCUS,\n  HOVER: HOVER,\n}"
            },
            {
                "name": "InteractionTrigger",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "t.keyof({\n  click: null,\n  focus: null,\n  hover: null,\n})"
            },
            {
                "name": "LG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/ButtonSize.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'lg'"
            },
            {
                "name": "LIGHT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'light'"
            },
            {
                "name": "nextId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/tabs/tab-group.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0",
                "rawdescription": "Usato per generare ID univoci per ogni componente tab",
                "description": "<p>Usato per generare ID univoci per ogni componente tab</p>\n"
            },
            {
                "name": "NUMBER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/InputType.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'number'"
            },
            {
                "name": "PASSWORD",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/InputType.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'password'"
            },
            {
                "name": "POPOVER_TRIGGERS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  CLICK: CLICK,\n  FOCUS: FOCUS,\n}"
            },
            {
                "name": "PopoverTrigger",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "t.keyof({\n  click: null,\n  focus: null,\n})"
            },
            {
                "name": "PRIMARY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'primary'"
            },
            {
                "name": "progressbarId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/progress-bar/progress-bar.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "SEARCH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/InputType.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'search'"
            },
            {
                "name": "SECONDARY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'secondary'"
            },
            {
                "name": "SM",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/ButtonSize.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'sm'"
            },
            {
                "name": "SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'success'"
            },
            {
                "name": "TEXT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/InputType.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'text'"
            },
            {
                "name": "THEME_COLORS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  PRIMARY: PRIMARY,\n  SECONDARY: SECONDARY,\n  DANGER: DANGER,\n  WARNING: WARNING,\n  INFO: INFO,\n  SUCCESS: SUCCESS,\n  LIGHT: LIGHT,\n  DARK: DARK\n}"
            },
            {
                "name": "ThemeColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "t.keyof({\n  primary: null,\n  secondary: null,\n  danger: null,\n  warning: null,\n  info: null,\n  success: null,\n  light: null,\n  dark: null,\n})"
            },
            {
                "name": "TIME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/InputType.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'time'"
            },
            {
                "name": "VERTICAL_ALIGN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/Alignment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "t.keyof(VerticalAlign)"
            },
            {
                "name": "WARNING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'warning'"
            },
            {
                "name": "XS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/ButtonSize.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'xs'"
            }
        ],
        "functions": [
            {
                "name": "_coerceBooleanProperty",
                "file": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "DropdownMenuPlacement",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"bottom-start\" | \"top-start\" | \"left-start\" | \"right-start\"",
                "file": "projects/design-angular-kit/src/lib/dropdown/dropdown.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "UniqueSelectionDispatcherListener",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/design-angular-kit/src/lib/radio/unique-selection-dispatcher.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            }
        ],
        "enumerations": [
            {
                "name": "HorizontalAlign",
                "childs": [
                    {
                        "name": "left",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "left"
                    },
                    {
                        "name": "right",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "right"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/design-angular-kit/src/lib/models/Alignment.ts"
            },
            {
                "name": "IconBackgroundColorEnum",
                "childs": [
                    {
                        "name": "light",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "light"
                    },
                    {
                        "name": "dark",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dark"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/design-angular-kit/src/lib/enums/icons.enum.ts"
            },
            {
                "name": "IconColorEnum",
                "childs": [
                    {
                        "name": "default",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "default"
                    },
                    {
                        "name": "primary",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "primary"
                    },
                    {
                        "name": "secondary",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "secondary"
                    },
                    {
                        "name": "info",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "info"
                    },
                    {
                        "name": "success",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "success"
                    },
                    {
                        "name": "warning",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "warning"
                    },
                    {
                        "name": "danger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "danger"
                    },
                    {
                        "name": "disable",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "disable"
                    },
                    {
                        "name": "light",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "light"
                    },
                    {
                        "name": "white",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "white"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/design-angular-kit/src/lib/enums/icons.enum.ts"
            },
            {
                "name": "IconSizeEnum",
                "childs": [
                    {
                        "name": "sx",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "icon-xs"
                    },
                    {
                        "name": "sm",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "icon-sm"
                    },
                    {
                        "name": "lg",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "icon-lg"
                    },
                    {
                        "name": "xl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "icon-xl"
                    },
                    {
                        "name": "default",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/design-angular-kit/src/lib/enums/icons.enum.ts"
            },
            {
                "name": "VerticalAlign",
                "childs": [
                    {
                        "name": "top",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "top"
                    },
                    {
                        "name": "middle",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "middle"
                    },
                    {
                        "name": "bottom",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "bottom"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/design-angular-kit/src/lib/models/Alignment.ts"
            }
        ],
        "groupedVariables": {
            "projects/design-angular-kit/src/lib/models/ButtonSize.ts": [
                {
                    "name": "BUTTON_SIZES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/ButtonSize.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  LG: LG,\n  SM: SM,\n  XS: XS,\n}"
                },
                {
                    "name": "ButtonSize",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/ButtonSize.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "t.keyof({\n  lg: null,\n  sm: null,\n  xs: null,\n})"
                },
                {
                    "name": "LG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/ButtonSize.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'lg'"
                },
                {
                    "name": "SM",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/ButtonSize.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'sm'"
                },
                {
                    "name": "XS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/ButtonSize.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'xs'"
                }
            ],
            "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts": [
                {
                    "name": "CLICK",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'click'"
                },
                {
                    "name": "FOCUS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'focus'"
                },
                {
                    "name": "HOVER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'hover'"
                },
                {
                    "name": "INTERACTION_TRIGGERS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  CLICK: CLICK,\n  FOCUS: FOCUS,\n  HOVER: HOVER,\n}"
                },
                {
                    "name": "InteractionTrigger",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "t.keyof({\n  click: null,\n  focus: null,\n  hover: null,\n})"
                },
                {
                    "name": "POPOVER_TRIGGERS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  CLICK: CLICK,\n  FOCUS: FOCUS,\n}"
                },
                {
                    "name": "PopoverTrigger",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "t.keyof({\n  click: null,\n  focus: null,\n})"
                }
            ],
            "projects/design-angular-kit/src/lib/models/ThemeColor.ts": [
                {
                    "name": "DANGER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'danger'"
                },
                {
                    "name": "DARK",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'dark'"
                },
                {
                    "name": "INFO",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'info'"
                },
                {
                    "name": "LIGHT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'light'"
                },
                {
                    "name": "PRIMARY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'primary'"
                },
                {
                    "name": "SECONDARY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'secondary'"
                },
                {
                    "name": "SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'success'"
                },
                {
                    "name": "THEME_COLORS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  PRIMARY: PRIMARY,\n  SECONDARY: SECONDARY,\n  DANGER: DANGER,\n  WARNING: WARNING,\n  INFO: INFO,\n  SUCCESS: SUCCESS,\n  LIGHT: LIGHT,\n  DARK: DARK\n}"
                },
                {
                    "name": "ThemeColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "t.keyof({\n  primary: null,\n  secondary: null,\n  danger: null,\n  warning: null,\n  info: null,\n  success: null,\n  light: null,\n  dark: null,\n})"
                },
                {
                    "name": "WARNING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'warning'"
                }
            ],
            "projects/design-angular-kit/src/lib/models/InputType.ts": [
                {
                    "name": "DATE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/InputType.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'date'"
                },
                {
                    "name": "EMAIL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/InputType.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'email'"
                },
                {
                    "name": "INPUT_TYPES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/InputType.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  TEXT: TEXT,\n  EMAIL: EMAIL,\n  PASSWORD: PASSWORD,\n  NUMBER: NUMBER,\n  SEARCH: SEARCH,\n  TIME: TIME,\n  DATE: DATE\n}"
                },
                {
                    "name": "InputType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/InputType.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "t.keyof({\n  text: null,\n  email: null,\n  password: null,\n  number: null,\n  time: null,\n  search: null,\n  date: null,\n  radio: null,\n  checkbox: null,\n  textarea: null,\n  button: null,\n  reset: null,  \n  submit: null,\n  'datetime-local': null,\n  hidden: null,\n  image: null,\n  month: null,\n  range: null,\n  tel: null,\n  url: null,\n  week: null,\n  datetime: null,\n  color: null,\n  file: null\n})"
                },
                {
                    "name": "NUMBER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/InputType.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'number'"
                },
                {
                    "name": "PASSWORD",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/InputType.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'password'"
                },
                {
                    "name": "SEARCH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/InputType.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'search'"
                },
                {
                    "name": "TEXT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/InputType.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'text'"
                },
                {
                    "name": "TIME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/InputType.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'time'"
                }
            ],
            "projects/design-angular-kit/src/lib/dropdown/dropdown.component.ts": [
                {
                    "name": "DEFAULT_COLOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/dropdown/dropdown.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'dropdown'"
                },
                {
                    "name": "identifier",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/dropdown/dropdown.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "projects/design-angular-kit/src/lib/breadcrumb/breadcrumb.component.ts": [
                {
                    "name": "DEFAULT_SEPARATOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/breadcrumb/breadcrumb.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/'"
                },
                {
                    "name": "identifier",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/breadcrumb/breadcrumb.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "projects/design-angular-kit/src/lib/models/Alignment.ts": [
                {
                    "name": "HORIZONTAL_ALIGN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/Alignment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "t.keyof(HorizontalAlign)"
                },
                {
                    "name": "VERTICAL_ALIGN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/Alignment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "t.keyof(VerticalAlign)"
                }
            ],
            "projects/design-angular-kit/src/lib/breadcrumb/breadcrumb-item.component.ts": [
                {
                    "name": "identifier",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/breadcrumb/breadcrumb-item.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "projects/design-angular-kit/src/lib/checkbox/checkbox.component.ts": [
                {
                    "name": "identifier",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/checkbox/checkbox.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "projects/design-angular-kit/src/lib/collapse/collapse-group.component.ts": [
                {
                    "name": "identifier",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/collapse/collapse-group.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "projects/design-angular-kit/src/lib/collapse/collapse-item.component.ts": [
                {
                    "name": "identifier",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/collapse/collapse-item.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "projects/design-angular-kit/src/lib/dropdown/dropdown-item.component.ts": [
                {
                    "name": "identifier",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/dropdown/dropdown-item.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "projects/design-angular-kit/src/lib/form-input/form-input.component.ts": [
                {
                    "name": "identifier",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/form-input/form-input.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "projects/design-angular-kit/src/lib/radio/radio.component.ts": [
                {
                    "name": "identifier",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "projects/design-angular-kit/src/lib/toggle/toggle.component.ts": [
                {
                    "name": "identifier",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/toggle/toggle.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "projects/design-angular-kit/src/lib/tabs/tab-group.component.ts": [
                {
                    "name": "nextId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/tabs/tab-group.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0",
                    "rawdescription": "Usato per generare ID univoci per ogni componente tab",
                    "description": "<p>Usato per generare ID univoci per ogni componente tab</p>\n"
                }
            ],
            "projects/design-angular-kit/src/lib/progress-bar/progress-bar.component.ts": [
                {
                    "name": "progressbarId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/progress-bar/progress-bar.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                }
            ]
        },
        "groupedFunctions": {
            "projects/design-angular-kit/src/lib/radio/radio.component.ts": [
                {
                    "name": "_coerceBooleanProperty",
                    "file": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "projects/design-angular-kit/src/lib/models/Alignment.ts": [
                {
                    "name": "HorizontalAlign",
                    "childs": [
                        {
                            "name": "left",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "left"
                        },
                        {
                            "name": "right",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "right"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/design-angular-kit/src/lib/models/Alignment.ts"
                },
                {
                    "name": "VerticalAlign",
                    "childs": [
                        {
                            "name": "top",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "top"
                        },
                        {
                            "name": "middle",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "middle"
                        },
                        {
                            "name": "bottom",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "bottom"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/design-angular-kit/src/lib/models/Alignment.ts"
                }
            ],
            "projects/design-angular-kit/src/lib/enums/icons.enum.ts": [
                {
                    "name": "IconBackgroundColorEnum",
                    "childs": [
                        {
                            "name": "light",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "light"
                        },
                        {
                            "name": "dark",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dark"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/design-angular-kit/src/lib/enums/icons.enum.ts"
                },
                {
                    "name": "IconColorEnum",
                    "childs": [
                        {
                            "name": "default",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "default"
                        },
                        {
                            "name": "primary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "primary"
                        },
                        {
                            "name": "secondary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "secondary"
                        },
                        {
                            "name": "info",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "info"
                        },
                        {
                            "name": "success",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "success"
                        },
                        {
                            "name": "warning",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "warning"
                        },
                        {
                            "name": "danger",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "danger"
                        },
                        {
                            "name": "disable",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "disable"
                        },
                        {
                            "name": "light",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "light"
                        },
                        {
                            "name": "white",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "white"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/design-angular-kit/src/lib/enums/icons.enum.ts"
                },
                {
                    "name": "IconSizeEnum",
                    "childs": [
                        {
                            "name": "sx",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "icon-xs"
                        },
                        {
                            "name": "sm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "icon-sm"
                        },
                        {
                            "name": "lg",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "icon-lg"
                        },
                        {
                            "name": "xl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "icon-xl"
                        },
                        {
                            "name": "default",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/design-angular-kit/src/lib/enums/icons.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/design-angular-kit/src/lib/dropdown/dropdown.component.ts": [
                {
                    "name": "DropdownMenuPlacement",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"bottom-start\" | \"top-start\" | \"left-start\" | \"right-start\"",
                    "file": "projects/design-angular-kit/src/lib/dropdown/dropdown.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/design-angular-kit/src/lib/radio/unique-selection-dispatcher.ts": [
                {
                    "name": "UniqueSelectionDispatcherListener",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/design-angular-kit/src/lib/radio/unique-selection-dispatcher.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 16,
        "status": "low",
        "files": [
            {
                "filePath": "projects/design-angular-kit/src/lib/badge/badge.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BadgeDirective",
                "coveragePercent": 40,
                "coverageCount": "4/10",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/breadcrumb/breadcrumb-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbItemComponent",
                "coveragePercent": 16,
                "coverageCount": "2/12",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/breadcrumb/breadcrumb-item.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "identifier",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/breadcrumb/breadcrumb.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbComponent",
                "coveragePercent": 20,
                "coverageCount": "3/15",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/breadcrumb/breadcrumb.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_SEPARATOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/breadcrumb/breadcrumb.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "identifier",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/button/button.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ItButtonDirective",
                "coveragePercent": 20,
                "coverageCount": "5/24",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 21,
                "coverageCount": "6/28",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/checkbox/checkbox.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CheckboxChange",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/checkbox/checkbox.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "identifier",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/collapse/collapse-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItCollapseGroupComponent",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/collapse/collapse-group.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "identifier",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/collapse/collapse-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItCollapseItemComponent",
                "coveragePercent": 26,
                "coverageCount": "5/19",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/collapse/collapse-item.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "identifier",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/collapse/collapse.config.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ItCollapseConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/collapse/collapse.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ItCollapseDirective",
                "coveragePercent": 25,
                "coverageCount": "2/8",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/dropdown/dropdown-divider.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropdownDividerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/dropdown/dropdown-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropdownItemComponent",
                "coveragePercent": 43,
                "coverageCount": "7/16",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/dropdown/dropdown-item.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "identifier",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/dropdown/dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropdownComponent",
                "coveragePercent": 29,
                "coverageCount": "7/24",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/dropdown/dropdown.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_COLOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/dropdown/dropdown.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "identifier",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/dropdown/dropdown.config.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ItDropdownConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/dropdown/dropdown.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ItDropdown",
                "coveragePercent": 25,
                "coverageCount": "2/8",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/dropdown/dropdown.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ItDropdownAnchor",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/dropdown/dropdown.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ItDropdownItem",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/dropdown/dropdown.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ItDropdownMenu",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/dropdown/dropdown.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ItDropdownToggle",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/dropdown/dropdown.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ItNavbar",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/form-input/form-input-password.utils.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FormInputPasswordUtils",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/form-input/form-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormInputComponent",
                "coveragePercent": 35,
                "coverageCount": "30/85",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/form-input/form-input.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FormInputChange",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/form-input/form-input.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AutoCompleteItem",
                "coveragePercent": 100,
                "coverageCount": "7/7",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/form-input/form-input.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PasswordStrengthMeterConfig",
                "coveragePercent": 88,
                "coverageCount": "8/9",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/form-input/form-input.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "identifier",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/form-input/it-prefix.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ItPrefixDirective",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/form-input/it-suffix.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ItSuffixDirective",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/form-input/it-text-prefix.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ItTextPrefixDirective",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/form-input/it-text-suffix.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ItTextSuffixDirective",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/form-input/mark-matching-text.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "MarkMatchingTextPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 5,
                "coverageCount": "1/18",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/Alignment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HORIZONTAL_ALIGN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/Alignment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VERTICAL_ALIGN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/ButtonSize.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BUTTON_SIZES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/ButtonSize.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ButtonSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/ButtonSize.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/ButtonSize.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SM",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/ButtonSize.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "XS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/InputType.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DATE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/InputType.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EMAIL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/InputType.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INPUT_TYPES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/InputType.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/InputType.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NUMBER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/InputType.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PASSWORD",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/InputType.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SEARCH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/InputType.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TEXT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/InputType.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TIME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CLICK",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FOCUS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HOVER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INTERACTION_TRIGGERS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InteractionTrigger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "POPOVER_TRIGGERS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PopoverTrigger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DANGER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DARK",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INFO",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LIGHT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PRIMARY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SECONDARY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "THEME_COLORS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ThemeColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WARNING",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/popover/popover.config.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ItPopoverConfig",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/popover/popover.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ItPopover",
                "coveragePercent": 40,
                "coverageCount": "2/5",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressBarComponent",
                "coveragePercent": 26,
                "coverageCount": "6/23",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/progress-bar/progress-bar.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "progressbarId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadioButtonComponent",
                "coveragePercent": 63,
                "coverageCount": "12/19",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "RadioGroupDirective",
                "coveragePercent": 55,
                "coverageCount": "15/27",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RadioChange",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "_coerceBooleanProperty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "identifier",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/radio/unique-selection-dispatcher.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UniqueSelectionDispatcher",
                "coveragePercent": 60,
                "coverageCount": "3/5",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/tabs/tab-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItTabGroupComponent",
                "coveragePercent": 57,
                "coverageCount": "15/26",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/tabs/tab-group.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TabChangeEvent",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/tabs/tab-group.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "nextId",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/tabs/tab.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItTabComponent",
                "coveragePercent": 71,
                "coverageCount": "10/14",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/toggle/toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToggleComponent",
                "coveragePercent": 29,
                "coverageCount": "5/17",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/toggle/toggle.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ToggleChange",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/toggle/toggle.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "identifier",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/tooltip/tooltip.config.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ItTooltipConfig",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/tooltip/tooltip.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ItTooltip",
                "coveragePercent": 40,
                "coverageCount": "2/5",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/util/focus-mouse.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FocusMouseDirective",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/util/util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Util",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            }
        ]
    }
}
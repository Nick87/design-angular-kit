{
    "pipes": [
        {
            "name": "MarkMatchingTextPipe",
            "id": "pipe-MarkMatchingTextPipe-afbb70d0b7f93456c99e1e85ceeb85bb8665b2429229db0c1eb40774066887b41f3c08da90397b23e752c063a1ef971dac1a405d95c4272e247ea9474f9067c7",
            "file": "projects/design-angular-kit/src/lib/pipes/mark-matching-text.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "allString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "searchString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "allString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "searchString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "markMatchingText",
            "sourceCode": "import { Pipe, PipeTransform } from \"@angular/core\";\nimport { DomSanitizer } from \"@angular/platform-browser\";\n\n@Pipe({\n    name: 'markMatchingText'\n}) \nexport class MarkMatchingTextPipe implements PipeTransform {\n    constructor(private domSanitizer: DomSanitizer) {}\n\n    transform(allString: string, searchString: string): any {\n        if (!searchString) { \n            return allString; \n        } else if(!allString) {\n            return \"\";\n        }\n        // Check if search string is a substring of pivot string (no case-sensitive)\n        const idxOfMatchString = allString.toLowerCase().indexOf(searchString.toLowerCase());\n        if(idxOfMatchString !== -1) {\n            // retrieve the exactly substring\n            const matchingString = allString.substring(idxOfMatchString, idxOfMatchString + searchString.length);\n            // Replace original string marking as <strong> (bold) the matchinng substring\n            const regEx = new RegExp('(' + matchingString + ')', 'gi')\n            const res = allString.replace(regEx, '<mark>$1</mark>');\n            return this.domSanitizer.bypassSecurityTrustHtml(res);\n        } \n\n        return allString;\n        \n    }\n\n    \n}"
        }
    ],
    "interfaces": [
        {
            "name": "AutocompleteItem",
            "id": "interface-AutocompleteItem-23512aa428ca2ff3a3bb79962f3063690268864f562ee55666f9ddd4dd90c6d69a5b21521cc6f2c87bdacd3416ffc43adf49b177ddedda69f1c44d774efe0e80",
            "file": "projects/design-angular-kit/src/lib/interfaces/form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IconName } from './icon';\n\nexport type InputControlType = 'text' | 'email' | 'number' | 'date' | 'time' | 'tel' | 'color' | 'url' | 'search';\n\nexport interface SelectControlOption {\n  value: any,\n  text?: string,\n  selected?: boolean | ((value: any) => boolean),\n  disabled?: boolean | ((value: any) => boolean)\n}\n\nexport interface SelectControlGroup {\n  label: string,\n  options: Array<SelectControlOption>,\n  dragdrop?: boolean\n}\n\nexport interface UploadFileListItem {\n  /**\n   * The item id\n   */\n  id: number,\n\n  /**\n   * The uploaded file\n   */\n  file: File,\n\n  /**\n   * Show progress bar\n   *\n   * The status of the item changes based on the value:\n   * - <b>uploading</b>: if value is between 0 and 100 (exclusive 0 < value < 100)\n   * - <b>success</b>: if value is greater than 100\n   */\n  progress?: number,\n\n  /**\n   * Show the ability to delete item\n   * @default false\n   */\n  removable?: boolean,\n\n  /**\n   * Set the status of the item as 'error'\n   */\n  error?: boolean,\n\n  /**\n   * Add tooltip on file item name\n   * @example It can be used to show the error message or additional information about the file\n   */\n  tooltip?: string\n}\n\n\n/**\n * Elemento disponibile per l'autocompletamento del it-form-input\n */\nexport interface AutocompleteItem {\n  /** Valore voce di autocompletamento */\n  value: string;\n  /** Opzionale. Path in cui ricercare l'immagine dell'avatar da posizionare a sinistra della voce di autocompletamento */\n  avatarSrcPath?: string;\n  /** Opzionale. Testo in alternativa dell'avatar per accessibilità */\n  avatarAltText?: string;\n  /** Opzionale. Icona posizionata a sinistra della voce di autocompletamento */\n  icon?: IconName;\n  /** Opzionale. Label posizionata a destra della voce di autocompletamento */\n  label?: string;\n  /** Opzionale. Link relativo all'elemento */\n  link?: string;\n\n  /**\n   * Attribute not used for autocomplete rendering.\n   * It can be useful to retrieve some extra information when selecting the autocomplete item\n   */\n  additionalData?: any;\n}\n",
            "properties": [
                {
                    "name": "additionalData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "<p>Attribute not used for autocomplete rendering.\nIt can be useful to retrieve some extra information when selecting the autocomplete item</p>\n",
                    "line": 78,
                    "rawdescription": "\n\nAttribute not used for autocomplete rendering.\nIt can be useful to retrieve some extra information when selecting the autocomplete item\n"
                },
                {
                    "name": "avatarAltText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Opzionale. Testo in alternativa dell&#39;avatar per accessibilità</p>\n",
                    "line": 66,
                    "rawdescription": "\nOpzionale. Testo in alternativa dell'avatar per accessibilità"
                },
                {
                    "name": "avatarSrcPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Opzionale. Path in cui ricercare l&#39;immagine dell&#39;avatar da posizionare a sinistra della voce di autocompletamento</p>\n",
                    "line": 64,
                    "rawdescription": "\nOpzionale. Path in cui ricercare l'immagine dell'avatar da posizionare a sinistra della voce di autocompletamento"
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconName",
                    "optional": true,
                    "description": "<p>Opzionale. Icona posizionata a sinistra della voce di autocompletamento</p>\n",
                    "line": 68,
                    "rawdescription": "\nOpzionale. Icona posizionata a sinistra della voce di autocompletamento"
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Opzionale. Label posizionata a destra della voce di autocompletamento</p>\n",
                    "line": 70,
                    "rawdescription": "\nOpzionale. Label posizionata a destra della voce di autocompletamento"
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Opzionale. Link relativo all&#39;elemento</p>\n",
                    "line": 72,
                    "rawdescription": "\nOpzionale. Link relativo all'elemento"
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Valore voce di autocompletamento</p>\n",
                    "line": 62,
                    "rawdescription": "\nValore voce di autocompletamento"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Elemento disponibile per l&#39;autocompletamento del it-form-input</p>\n",
            "rawdescription": "\n\nElemento disponibile per l'autocompletamento del it-form-input\n",
            "methods": []
        },
        {
            "name": "AvailableLanguage",
            "id": "interface-AvailableLanguage-f1b5e033711fede765ded54ce4f49a60bb2a892d5972f02a01219ccfe7cbc511f5576de3dd4874f5526ebc69694110e9fc168ce7eff4e60cd675b9365d241eb3",
            "file": "projects/design-angular-kit/src/lib/interfaces/utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AvailableLanguage {\n\n  /**\n   * The language code\n   */\n  code: string,\n\n  /**\n   * Label to show\n   */\n  label: string\n}\n",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The language code</p>\n",
                    "line": 6,
                    "rawdescription": "\n\nThe language code\n"
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Label to show</p>\n",
                    "line": 11,
                    "rawdescription": "\n\nLabel to show\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Notification",
            "id": "interface-Notification-8a9a75625cbdda28d93f44973581ceddc8d4ae8014c4995294d05112e69a18c99d48267eb18b1b9e0a478015e21d4f78a1f88cd2da6ad91d1f386041948b6b48",
            "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type AlertColor = 'info' | 'success' | 'warning' | 'danger';\n\nexport type ButtonColor =\n  'primary'\n  | 'outline-primary'\n  | 'secondary'\n  | 'outline-secondary'\n  | 'success'\n  | 'outline-success'\n  | 'danger'\n  | 'outline-danger'\n  | 'warning'\n  | 'outline-warning'\n  | 'info'\n  | 'outline-info'\n  | 'light'\n  | 'outline-light'\n  | 'dark'\n  | 'outline-dark'\n  | 'link';\n\nexport type ButtonSize = 'lg' | 'sm' | 'xs';\nexport type ButtonType = 'submit' | 'button';\n\nexport type CalloutColor = 'success' | 'warning' | 'danger' | 'important' | 'note';\nexport type CalloutAppearance = 'default' | 'highlight' | 'more';\n\nexport type ElementPlacement = 'top' | 'bottom' | 'left' | 'right';\n\nexport type ProgressBarColor = 'primary' | 'success' | 'warning' | 'danger' | 'info';\n\nexport type BadgeColor = 'primary' | 'secondary' | 'success' | 'warning' | 'danger';\n\nexport type TableColor = 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';\n\nexport type TableHeadColor = 'light' | 'dark';\n\nexport type TableResponsive =\n  'responsive'\n  | 'responsive-sm'\n  | 'responsive-md'\n  | 'responsive-lg'\n  | 'responsive-xl'\n  | 'responsive-xxl';\n\nexport type VerticalAlignment =\n  'align-baseline'\n  | 'align-top'\n  | 'align-middle'\n  | 'align-bottom'\n  | 'align-text-bottom'\n  | 'align-text-top';\n\nexport type DropdownDirection = 'dropup' | 'dropend' | 'dropstart';\n\nexport type CarouselType = 'default' | 'three-cols' | 'three-cols-arrow-visible';\n\nexport interface Notification {\n  type: NotificationType;\n  title: string;\n  message?: string;\n  duration?: number;\n  dismissable?: boolean;\n  position?: NotificationPosition;\n}\n\nexport enum NotificationType {\n  Standard = 'standard',\n  Success = 'success',\n  Error = 'error',\n  Info = 'info',\n  Warning = 'warning'\n}\n\nexport enum NotificationPosition {\n  Top = 'top-fix mt-3',\n  Bottom = 'bottom-fix mb-3',\n  Left = 'left-fix ms-3',\n  Right = 'right-fix me-3'\n}\n",
            "properties": [
                {
                    "name": "dismissable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "duration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NotificationPosition",
                    "optional": true,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NotificationType",
                    "optional": false,
                    "description": "",
                    "line": 59
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SelectControlGroup",
            "id": "interface-SelectControlGroup-23512aa428ca2ff3a3bb79962f3063690268864f562ee55666f9ddd4dd90c6d69a5b21521cc6f2c87bdacd3416ffc43adf49b177ddedda69f1c44d774efe0e80",
            "file": "projects/design-angular-kit/src/lib/interfaces/form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IconName } from './icon';\n\nexport type InputControlType = 'text' | 'email' | 'number' | 'date' | 'time' | 'tel' | 'color' | 'url' | 'search';\n\nexport interface SelectControlOption {\n  value: any,\n  text?: string,\n  selected?: boolean | ((value: any) => boolean),\n  disabled?: boolean | ((value: any) => boolean)\n}\n\nexport interface SelectControlGroup {\n  label: string,\n  options: Array<SelectControlOption>,\n  dragdrop?: boolean\n}\n\nexport interface UploadFileListItem {\n  /**\n   * The item id\n   */\n  id: number,\n\n  /**\n   * The uploaded file\n   */\n  file: File,\n\n  /**\n   * Show progress bar\n   *\n   * The status of the item changes based on the value:\n   * - <b>uploading</b>: if value is between 0 and 100 (exclusive 0 < value < 100)\n   * - <b>success</b>: if value is greater than 100\n   */\n  progress?: number,\n\n  /**\n   * Show the ability to delete item\n   * @default false\n   */\n  removable?: boolean,\n\n  /**\n   * Set the status of the item as 'error'\n   */\n  error?: boolean,\n\n  /**\n   * Add tooltip on file item name\n   * @example It can be used to show the error message or additional information about the file\n   */\n  tooltip?: string\n}\n\n\n/**\n * Elemento disponibile per l'autocompletamento del it-form-input\n */\nexport interface AutocompleteItem {\n  /** Valore voce di autocompletamento */\n  value: string;\n  /** Opzionale. Path in cui ricercare l'immagine dell'avatar da posizionare a sinistra della voce di autocompletamento */\n  avatarSrcPath?: string;\n  /** Opzionale. Testo in alternativa dell'avatar per accessibilità */\n  avatarAltText?: string;\n  /** Opzionale. Icona posizionata a sinistra della voce di autocompletamento */\n  icon?: IconName;\n  /** Opzionale. Label posizionata a destra della voce di autocompletamento */\n  label?: string;\n  /** Opzionale. Link relativo all'elemento */\n  link?: string;\n\n  /**\n   * Attribute not used for autocomplete rendering.\n   * It can be useful to retrieve some extra information when selecting the autocomplete item\n   */\n  additionalData?: any;\n}\n",
            "properties": [
                {
                    "name": "dragdrop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<SelectControlOption>",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SelectControlOption",
            "id": "interface-SelectControlOption-23512aa428ca2ff3a3bb79962f3063690268864f562ee55666f9ddd4dd90c6d69a5b21521cc6f2c87bdacd3416ffc43adf49b177ddedda69f1c44d774efe0e80",
            "file": "projects/design-angular-kit/src/lib/interfaces/form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IconName } from './icon';\n\nexport type InputControlType = 'text' | 'email' | 'number' | 'date' | 'time' | 'tel' | 'color' | 'url' | 'search';\n\nexport interface SelectControlOption {\n  value: any,\n  text?: string,\n  selected?: boolean | ((value: any) => boolean),\n  disabled?: boolean | ((value: any) => boolean)\n}\n\nexport interface SelectControlGroup {\n  label: string,\n  options: Array<SelectControlOption>,\n  dragdrop?: boolean\n}\n\nexport interface UploadFileListItem {\n  /**\n   * The item id\n   */\n  id: number,\n\n  /**\n   * The uploaded file\n   */\n  file: File,\n\n  /**\n   * Show progress bar\n   *\n   * The status of the item changes based on the value:\n   * - <b>uploading</b>: if value is between 0 and 100 (exclusive 0 < value < 100)\n   * - <b>success</b>: if value is greater than 100\n   */\n  progress?: number,\n\n  /**\n   * Show the ability to delete item\n   * @default false\n   */\n  removable?: boolean,\n\n  /**\n   * Set the status of the item as 'error'\n   */\n  error?: boolean,\n\n  /**\n   * Add tooltip on file item name\n   * @example It can be used to show the error message or additional information about the file\n   */\n  tooltip?: string\n}\n\n\n/**\n * Elemento disponibile per l'autocompletamento del it-form-input\n */\nexport interface AutocompleteItem {\n  /** Valore voce di autocompletamento */\n  value: string;\n  /** Opzionale. Path in cui ricercare l'immagine dell'avatar da posizionare a sinistra della voce di autocompletamento */\n  avatarSrcPath?: string;\n  /** Opzionale. Testo in alternativa dell'avatar per accessibilità */\n  avatarAltText?: string;\n  /** Opzionale. Icona posizionata a sinistra della voce di autocompletamento */\n  icon?: IconName;\n  /** Opzionale. Label posizionata a destra della voce di autocompletamento */\n  label?: string;\n  /** Opzionale. Link relativo all'elemento */\n  link?: string;\n\n  /**\n   * Attribute not used for autocomplete rendering.\n   * It can be useful to retrieve some extra information when selecting the autocomplete item\n   */\n  additionalData?: any;\n}\n",
            "properties": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | ",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | ",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "UploadFileListItem",
            "id": "interface-UploadFileListItem-23512aa428ca2ff3a3bb79962f3063690268864f562ee55666f9ddd4dd90c6d69a5b21521cc6f2c87bdacd3416ffc43adf49b177ddedda69f1c44d774efe0e80",
            "file": "projects/design-angular-kit/src/lib/interfaces/form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IconName } from './icon';\n\nexport type InputControlType = 'text' | 'email' | 'number' | 'date' | 'time' | 'tel' | 'color' | 'url' | 'search';\n\nexport interface SelectControlOption {\n  value: any,\n  text?: string,\n  selected?: boolean | ((value: any) => boolean),\n  disabled?: boolean | ((value: any) => boolean)\n}\n\nexport interface SelectControlGroup {\n  label: string,\n  options: Array<SelectControlOption>,\n  dragdrop?: boolean\n}\n\nexport interface UploadFileListItem {\n  /**\n   * The item id\n   */\n  id: number,\n\n  /**\n   * The uploaded file\n   */\n  file: File,\n\n  /**\n   * Show progress bar\n   *\n   * The status of the item changes based on the value:\n   * - <b>uploading</b>: if value is between 0 and 100 (exclusive 0 < value < 100)\n   * - <b>success</b>: if value is greater than 100\n   */\n  progress?: number,\n\n  /**\n   * Show the ability to delete item\n   * @default false\n   */\n  removable?: boolean,\n\n  /**\n   * Set the status of the item as 'error'\n   */\n  error?: boolean,\n\n  /**\n   * Add tooltip on file item name\n   * @example It can be used to show the error message or additional information about the file\n   */\n  tooltip?: string\n}\n\n\n/**\n * Elemento disponibile per l'autocompletamento del it-form-input\n */\nexport interface AutocompleteItem {\n  /** Valore voce di autocompletamento */\n  value: string;\n  /** Opzionale. Path in cui ricercare l'immagine dell'avatar da posizionare a sinistra della voce di autocompletamento */\n  avatarSrcPath?: string;\n  /** Opzionale. Testo in alternativa dell'avatar per accessibilità */\n  avatarAltText?: string;\n  /** Opzionale. Icona posizionata a sinistra della voce di autocompletamento */\n  icon?: IconName;\n  /** Opzionale. Label posizionata a destra della voce di autocompletamento */\n  label?: string;\n  /** Opzionale. Link relativo all'elemento */\n  link?: string;\n\n  /**\n   * Attribute not used for autocomplete rendering.\n   * It can be useful to retrieve some extra information when selecting the autocomplete item\n   */\n  additionalData?: any;\n}\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Set the status of the item as &#39;error&#39;</p>\n",
                    "line": 47,
                    "rawdescription": "\n\nSet the status of the item as 'error'\n"
                },
                {
                    "name": "file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File",
                    "optional": false,
                    "description": "<p>The uploaded file</p>\n",
                    "line": 27,
                    "rawdescription": "\n\nThe uploaded file\n"
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>The item id</p>\n",
                    "line": 22,
                    "rawdescription": "\n\nThe item id\n"
                },
                {
                    "name": "progress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>Show progress bar</p>\n<p>The status of the item changes based on the value:</p>\n<ul>\n<li><b>uploading</b>: if value is between 0 and 100 (exclusive 0 &lt; value &lt; 100)</li>\n<li><b>success</b>: if value is greater than 100</li>\n</ul>\n",
                    "line": 36,
                    "rawdescription": "\n\nShow progress bar\n\nThe status of the item changes based on the value:\n- <b>uploading</b>: if value is between 0 and 100 (exclusive 0 < value < 100)\n- <b>success</b>: if value is greater than 100\n"
                },
                {
                    "name": "removable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Show the ability to delete item</p>\n",
                    "line": 42,
                    "rawdescription": "\n\nShow the ability to delete item\n",
                    "jsdoctags": [
                        {
                            "pos": 875,
                            "end": 893,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 876,
                                "end": 883,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ]
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Add tooltip on file item name</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\"></code></pre></div>",
                    "line": 53,
                    "rawdescription": "\n\nAdd tooltip on file item name\n```html\n```",
                    "jsdoctags": [
                        {
                            "pos": 1041,
                            "end": 1135,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 1042,
                                "end": 1049,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "example"
                            },
                            "comment": "<p>It can be used to show the error message or additional information about the file</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "NotificationsService",
            "id": "injectable-NotificationsService-4e945a2c781aee2ea6545870139acc62419f9585f4697cbaf037582b19110218f9ee888713009f95b680cff90d253d1af84c8a1f58242ec64ecd75ed2f5a4bb2",
            "file": "projects/design-angular-kit/src/lib/services/notifications/notifications.service.ts",
            "properties": [
                {
                    "name": "subject",
                    "defaultValue": "new Subject<Notification>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addNotification",
                    "args": [
                        {
                            "name": "notification",
                            "type": "Notification",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow new notification\n",
                    "description": "<p>Show new notification</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 651,
                                "end": 663,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "notification"
                            },
                            "type": "Notification",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 645,
                                "end": 650,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification</p>\n"
                        }
                    ]
                },
                {
                    "name": "error",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "dismissable",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "position",
                            "type": "NotificationPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate new Error notification\n",
                    "description": "<p>Create new Error notification</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1935,
                                "end": 1940,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "title"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1929,
                                "end": 1934,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification title</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1972,
                                "end": 1979,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1966,
                                "end": 1971,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification message</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2013,
                                "end": 2024,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "dismissable"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "pos": 2007,
                                "end": 2012,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification dismissable</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2062,
                                "end": 2070,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "duration"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 2056,
                                "end": 2061,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification duration (millis)</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2114,
                                "end": 2122,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "position"
                            },
                            "type": "NotificationPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 2108,
                                "end": 2113,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification position</p>\n"
                        }
                    ]
                },
                {
                    "name": "info",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "dismissable",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "position",
                            "type": "NotificationPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate new Info notification\n",
                    "description": "<p>Create new Info notification</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3028,
                                "end": 3033,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "title"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3022,
                                "end": 3027,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification title</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3065,
                                "end": 3072,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 3059,
                                "end": 3064,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification message</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3106,
                                "end": 3117,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "dismissable"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "pos": 3100,
                                "end": 3105,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification dismissable</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3155,
                                "end": 3163,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "duration"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 3149,
                                "end": 3154,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification duration (millis)</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3207,
                                "end": 3215,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "position"
                            },
                            "type": "NotificationPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 3201,
                                "end": 3206,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification position</p>\n"
                        }
                    ]
                },
                {
                    "name": "onNotification",
                    "args": [
                        {
                            "name": "filterType",
                            "type": "NotificationType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Notification>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nListen on notification arrived\n",
                    "description": "<p>Listen on notification arrived</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 363,
                                "end": 373,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "filterType"
                            },
                            "type": "NotificationType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 357,
                                "end": 362,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>filter type of notification</p>\n"
                        }
                    ]
                },
                {
                    "name": "standard",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "dismissable",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "position",
                            "type": "NotificationPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate new Standard notification\n",
                    "description": "<p>Create new Standard notification</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 835,
                                "end": 840,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "title"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 829,
                                "end": 834,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification title</p>\n"
                        },
                        {
                            "name": {
                                "pos": 872,
                                "end": 879,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 866,
                                "end": 871,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification message</p>\n"
                        },
                        {
                            "name": {
                                "pos": 913,
                                "end": 924,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "dismissable"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "pos": 907,
                                "end": 912,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification dismissable</p>\n"
                        },
                        {
                            "name": {
                                "pos": 962,
                                "end": 970,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "duration"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 956,
                                "end": 961,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification duration (millis)</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1014,
                                "end": 1022,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "position"
                            },
                            "type": "NotificationPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1008,
                                "end": 1013,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification position</p>\n"
                        }
                    ]
                },
                {
                    "name": "success",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "dismissable",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "position",
                            "type": "NotificationPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate new Success notification\n",
                    "description": "<p>Create new Success notification</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1387,
                                "end": 1392,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "title"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1381,
                                "end": 1386,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification title</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1424,
                                "end": 1431,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1418,
                                "end": 1423,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification message</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1465,
                                "end": 1476,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "dismissable"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "pos": 1459,
                                "end": 1464,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification dismissable</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1514,
                                "end": 1522,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "duration"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1508,
                                "end": 1513,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification duration (millis)</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1566,
                                "end": 1574,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "position"
                            },
                            "type": "NotificationPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1560,
                                "end": 1565,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification position</p>\n"
                        }
                    ]
                },
                {
                    "name": "warning",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "dismissable",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "position",
                            "type": "NotificationPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate new Warning notification\n",
                    "description": "<p>Create new Warning notification</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2481,
                                "end": 2486,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "title"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2475,
                                "end": 2480,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification title</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2518,
                                "end": 2525,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 2512,
                                "end": 2517,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification message</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2559,
                                "end": 2570,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "dismissable"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "pos": 2553,
                                "end": 2558,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification dismissable</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2608,
                                "end": 2616,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "duration"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 2602,
                                "end": 2607,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification duration (millis)</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2660,
                                "end": 2668,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "position"
                            },
                            "type": "NotificationPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 2654,
                                "end": 2659,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification position</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {filter, Observable, Subject} from \"rxjs\";\nimport {Notification, NotificationPosition, NotificationType} from \"../../interfaces/core\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationsService {\n  private subject = new Subject<Notification>();\n\n  /**\n   * Listen on notification arrived\n   * @param filterType filter type of notification\n   */\n  onNotification(filterType?: NotificationType): Observable<Notification> {\n    return this.subject.asObservable().pipe(\n      filter(n => n && (!filterType || (n.type === filterType)))\n    );\n  }\n\n  /**\n   * Show new notification\n   * @param notification notification\n   */\n  addNotification(notification: Notification): void {\n    this.subject.next(notification);\n  }\n\n  /**\n   * Create new Standard notification\n   * @param title notification title\n   * @param message notification message\n   * @param dismissable notification dismissable\n   * @param duration notification duration (millis)\n   * @param position notification position\n   */\n  standard(title: string, message?: string, dismissable = true, duration?: number, position?: NotificationPosition): void {\n    this.addNotification({\n      type: NotificationType.Standard,\n      message,\n      title,\n      duration,\n      dismissable,\n      position\n    });\n  }\n\n  /**\n   * Create new Success notification\n   * @param title notification title\n   * @param message notification message\n   * @param dismissable notification dismissable\n   * @param duration notification duration (millis)\n   * @param position notification position\n   */\n  success(title: string, message?: string, dismissable = true, duration?: number, position?: NotificationPosition): void {\n    this.addNotification({\n      type: NotificationType.Success,\n      message,\n      title,\n      duration,\n      dismissable,\n      position\n    });\n  }\n\n  /**\n   * Create new Error notification\n   * @param title notification title\n   * @param message notification message\n   * @param dismissable notification dismissable\n   * @param duration notification duration (millis)\n   * @param position notification position\n   */\n  error(title: string, message?: string, dismissable = true, duration?: number, position?: NotificationPosition): void {\n    this.addNotification({\n      type: NotificationType.Error,\n      message,\n      title,\n      duration,\n      dismissable,\n      position\n    });\n  }\n\n  /**\n   * Create new Warning notification\n   * @param title notification title\n   * @param message notification message\n   * @param dismissable notification dismissable\n   * @param duration notification duration (millis)\n   * @param position notification position\n   */\n  warning(title: string, message?: string, dismissable = true, duration?: number, position?: NotificationPosition): void {\n    this.addNotification({\n      type: NotificationType.Warning,\n      message,\n      title,\n      duration,\n      dismissable,\n      position\n    });\n  }\n\n  /**\n   * Create new Info notification\n   * @param title notification title\n   * @param message notification message\n   * @param dismissable notification dismissable\n   * @param duration notification duration (millis)\n   * @param position notification position\n   */\n  info(title: string, message?: string, dismissable = true, duration?: number, position?: NotificationPosition): void {\n    this.addNotification({\n      type: NotificationType.Info,\n      message,\n      title,\n      duration,\n      dismissable,\n      position\n    });\n  }\n}\n",
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "FileUtils",
            "id": "class-FileUtils-6bfa4dd3ea8660414daebb8b81f638fc82415025d44b7b9a2619e8ccd631ba1fd78cb0fd240d24e1b5085c361baef5acc6dd939356a2a9fbca9a86b95175c411",
            "file": "projects/design-angular-kit/src/lib/utils/file-utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\n\nexport class FileUtils {\n\n  /**\n   * Return the file size string\n   * @param file the file\n   * @param decimals decimal to show\n   */\n  public static getFileSizeString(file: File, decimals = 2): string {\n    const bytes = file.size;\n    if (!+bytes) {\n      return '0 Bytes';\n    }\n\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;\n  }\n\n  /**\n   * Convert a file to base64 string\n   * @param file the base64 string\n   */\n  public static fileToBase64(file: File): Observable<string> {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    return new Observable<string>(observer => {\n      reader.onload = (e) => {\n        const target = e.target;\n        if (!target || !target.result || target.result instanceof ArrayBuffer) {\n          return observer.error('Error on parse');\n        }\n        observer.next(target.result);\n        observer.complete();\n      };\n      reader.onerror = error => {\n        observer.error(error);\n      };\n    });\n  }\n\n  /**\n   * Convert base64 to Blob\n   * @param base64 the base64 string\n   * @param mimeType the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\">MIME type</a> (example 'application/pdf')\n   */\n  public static base64ToBlob(base64: string, mimeType: string): Blob {\n    const byteString = window.atob(base64);\n    const arrayBuffer = new ArrayBuffer(byteString.length);\n    const int8Array = new Uint8Array(arrayBuffer);\n    for (let i = 0; i < byteString.length; i++) {\n      int8Array[i] = byteString.charCodeAt(i);\n    }\n    return new Blob([int8Array], { type: mimeType });\n  }\n\n  /**\n   * Convert base64 to File\n   * @param base64 the base64 string\n   * @param mimeType the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\">MIME type</a> (example 'application/pdf')\n   * @param filename the file name\n   */\n  public static base64ToFile(base64: string, mimeType: string, filename: string): File {\n    const fileBlob = FileUtils.base64ToBlob(base64, mimeType);\n    return new File([fileBlob], filename, { type: mimeType });\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "base64ToBlob",
                    "args": [
                        {
                            "name": "base64",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "mimeType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Blob",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConvert base64 to Blob\n",
                    "description": "<p>Convert base64 to Blob</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1281,
                                "end": 1287,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "base64"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1275,
                                "end": 1280,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the base64 string</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1318,
                                "end": 1326,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "mimeType"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1312,
                                "end": 1317,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\">MIME type</a> (example &#39;application/pdf&#39;)</p>\n"
                        }
                    ]
                },
                {
                    "name": "base64ToFile",
                    "args": [
                        {
                            "name": "base64",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "mimeType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filename",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "File",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConvert base64 to File\n",
                    "description": "<p>Convert base64 to File</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1912,
                                "end": 1918,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "base64"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1906,
                                "end": 1911,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the base64 string</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1949,
                                "end": 1957,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "mimeType"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1943,
                                "end": 1948,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\">MIME type</a> (example &#39;application/pdf&#39;)</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2115,
                                "end": 2123,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "filename"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2109,
                                "end": 2114,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the file name</p>\n"
                        }
                    ]
                },
                {
                    "name": "fileToBase64",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConvert a file to base64 string\n",
                    "description": "<p>Convert a file to base64 string</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 656,
                                "end": 660,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "file"
                            },
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 650,
                                "end": 655,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the base64 string</p>\n"
                        }
                    ]
                },
                {
                    "name": "getFileSizeString",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "decimals",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturn the file size string\n",
                    "description": "<p>Return the file size string</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 113,
                                "end": 117,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "file"
                            },
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 107,
                                "end": 112,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the file</p>\n"
                        },
                        {
                            "name": {
                                "pos": 139,
                                "end": 147,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "decimals"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2",
                            "tagName": {
                                "pos": 133,
                                "end": 138,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>decimal to show</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ItValidators",
            "id": "class-ItValidators-bec51cced45ad80e4c02dc5ffa704d05f30dbc419d1476cf8b0c94fae8209ed17dc791fde639340b4059263c625ed68885fd1b36ce5548fc4ab04112954fd999",
            "file": "projects/design-angular-kit/src/lib/validators/it-validators.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AbstractControl, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport {\n  CAP_REGEX,\n  EMAIL_REGEX,\n  ITALIAN_TAX_CODE_REGEX,\n  PHONE_NUMBER_REGEX,\n  URL_REGEX,\n  VAT_NUMBER_REGEX\n} from '../utils/regex';\n\nexport class ItValidators {\n  public static SpecialCharacterPattern = '!@#$%&*_+=;:|,.';\n\n  /**\n   * Static pattern validator with custom error\n   * @param regex\n   * @param error\n   */\n  public static customPattern(regex: RegExp, error: ValidationErrors): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (!control.value) {\n        // if control is empty return no error\n        return null;\n      }\n\n      // test the value of the control against the regexp supplied\n      const valid = regex.test(control.value);\n\n      // if true, return no error (no error), else return error passed in the second parameter\n      return valid ? null : error;\n    };\n  }\n\n  /**\n   * Set Validator if the condition is satisfied\n   * @param validator the validator to apply if the condition is true\n   * @param condition the condition\n   */\n  public static conditional(validator: ValidatorFn, condition: (control: AbstractControl) => boolean): ValidatorFn {\n    return formControl => {\n      if (!formControl.parent) {\n        return null;\n      }\n      if (condition(formControl)) {\n        return validator(formControl);\n      }\n      return null;\n    };\n  }\n\n  /**\n   * Check whether our password and confirm password are a match\n   * @param control\n   */\n  public static passwordMatch(control: AbstractControl): AbstractControl | null {\n    const confirmControl = control.get('passwordConfirm'); //confirmPassword form control\n    if (!confirmControl) {\n      return null;\n    }\n\n    const password = control.get('password')?.value; // get password from our password form control\n\n    // compare is the password match\n    if ((password && !confirmControl.value) || (confirmControl.value && password !== confirmControl.value)) {\n      // if they don't match, set an error in our confirmPassword form control\n      confirmControl?.setErrors({ noPasswordMatch: true });\n      confirmControl?.markAsTouched();\n      return control;\n    }\n\n    if (password) {\n      confirmControl?.markAsTouched();\n    }\n    return null;\n  }\n\n  /**\n   * Password validator\n   * @param minLength minimum password length - default 10\n   * @param hasNumber check whether the entered password has a number - default true\n   * @param hasCapitalCase check whether the entered password has upper case letter - default true\n   * @param hasSmallCase check whether the entered password has a lower-case letter - default true\n   * @param hasSpecialCharacters check whether the entered password has a special character - default true\n   */\n  public static password(minLength = 10, hasNumber = true, hasCapitalCase = true, hasSmallCase = true, hasSpecialCharacters = true): ValidatorFn {\n    return <ValidatorFn>Validators.compose([\n      Validators.required,\n      ItValidators.customPattern(/\\d/, { hasNumber: hasNumber }),\n      ItValidators.customPattern(/[A-Z]/, { hasCapitalCase: hasCapitalCase }),\n      ItValidators.customPattern(/[a-z]/, { hasSmallCase: hasSmallCase }),\n      ItValidators.customPattern(new RegExp(`[${ItValidators.SpecialCharacterPattern}]`), { hasSpecialCharacters: hasSpecialCharacters }),\n      Validators.minLength(minLength)\n    ]);\n  }\n\n  /**\n   * Email validator\n   */\n  public static get email(): ValidatorFn {\n    return <ValidatorFn>Validators.compose([\n      Validators.email,\n      ItValidators.customPattern(EMAIL_REGEX, { invalidEmail: true })\n    ]);\n  }\n\n  /**\n   * Phone number validator\n   */\n  public static get tel(): ValidatorFn {\n    return ItValidators.customPattern(PHONE_NUMBER_REGEX, { invalidTel: true });\n  }\n\n  /**\n   * URL validator\n   */\n  public static get url(): ValidatorFn {\n    return ItValidators.customPattern(URL_REGEX, { invalidUrl: true });\n  }\n\n  /**\n   * Italian Tax Code validator\n   */\n  public static get taxCode(): ValidatorFn {\n    return ItValidators.customPattern(ITALIAN_TAX_CODE_REGEX, { invalidTaxCode: true });\n  }\n\n  /**\n   * VAT Number validator\n   */\n  public static get vatNumber(): ValidatorFn {\n    return ItValidators.customPattern(VAT_NUMBER_REGEX, { invalidVatNumber: true });\n  }\n\n  /**\n   * Italian Postal Code validator (CAP)\n   */\n  public static get cap(): ValidatorFn {\n    return ItValidators.customPattern(CAP_REGEX, { invalidCap: true });\n  }\n\n  /**\n   * Check if value is a valid RegExp\n   */\n  public static get regExp(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      try {\n        if (control?.value) {\n          new RegExp(control.value);\n        }\n      } catch (e) {\n        return { invalidRegex: true };\n      }\n      return null;\n    };\n  }\n}\n",
            "properties": [
                {
                    "name": "SpecialCharacterPattern",
                    "defaultValue": "'!@#$%&*_+=;:|,.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methods": [
                {
                    "name": "conditional",
                    "args": [
                        {
                            "name": "validator",
                            "type": "ValidatorFn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "control",
                                    "type": "AbstractControl",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet Validator if the condition is satisfied\n",
                    "description": "<p>Set Validator if the condition is satisfied</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1004,
                                "end": 1013,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "validator"
                            },
                            "type": "ValidatorFn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 998,
                                "end": 1003,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the validator to apply if the condition is true</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1074,
                                "end": 1083,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "condition"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "control",
                                    "type": "AbstractControl",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "pos": 1068,
                                "end": 1073,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the condition</p>\n"
                        }
                    ]
                },
                {
                    "name": "customPattern",
                    "args": [
                        {
                            "name": "regex",
                            "type": "RegExp",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "error",
                            "type": "ValidationErrors",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStatic pattern validator with custom error\n",
                    "description": "<p>Static pattern validator with custom error</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 392,
                                "end": 397,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "regex"
                            },
                            "type": "RegExp",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 386,
                                "end": 391,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 410,
                                "end": 415,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "error"
                            },
                            "type": "ValidationErrors",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 404,
                                "end": 409,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "password",
                    "args": [
                        {
                            "name": "minLength",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "10"
                        },
                        {
                            "name": "hasNumber",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        },
                        {
                            "name": "hasCapitalCase",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        },
                        {
                            "name": "hasSmallCase",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        },
                        {
                            "name": "hasSpecialCharacters",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPassword validator\n",
                    "description": "<p>Password validator</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2331,
                                "end": 2340,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "minLength"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "10",
                            "tagName": {
                                "pos": 2325,
                                "end": 2330,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>minimum password length - default 10</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2390,
                                "end": 2399,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hasNumber"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "pos": 2384,
                                "end": 2389,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>check whether the entered password has a number - default true</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2475,
                                "end": 2489,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hasCapitalCase"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "pos": 2469,
                                "end": 2474,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>check whether the entered password has upper case letter - default true</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2574,
                                "end": 2586,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hasSmallCase"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "pos": 2568,
                                "end": 2573,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>check whether the entered password has a lower-case letter - default true</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2673,
                                "end": 2693,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hasSpecialCharacters"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "pos": 2667,
                                "end": 2672,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>check whether the entered password has a special character - default true</p>\n"
                        }
                    ]
                },
                {
                    "name": "passwordMatch",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "AbstractControl | null",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck whether our password and confirm password are a match\n",
                    "description": "<p>Check whether our password and confirm password are a match</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1508,
                                "end": 1515,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "control"
                            },
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1502,
                                "end": 1507,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "email": {
                    "name": "email",
                    "getSignature": {
                        "name": "email",
                        "type": "",
                        "returnType": "ValidatorFn",
                        "line": 99,
                        "rawdescription": "\n\nEmail validator\n",
                        "description": "<p>Email validator</p>\n"
                    }
                },
                "tel": {
                    "name": "tel",
                    "getSignature": {
                        "name": "tel",
                        "type": "",
                        "returnType": "ValidatorFn",
                        "line": 109,
                        "rawdescription": "\n\nPhone number validator\n",
                        "description": "<p>Phone number validator</p>\n"
                    }
                },
                "url": {
                    "name": "url",
                    "getSignature": {
                        "name": "url",
                        "type": "",
                        "returnType": "ValidatorFn",
                        "line": 116,
                        "rawdescription": "\n\nURL validator\n",
                        "description": "<p>URL validator</p>\n"
                    }
                },
                "taxCode": {
                    "name": "taxCode",
                    "getSignature": {
                        "name": "taxCode",
                        "type": "",
                        "returnType": "ValidatorFn",
                        "line": 123,
                        "rawdescription": "\n\nItalian Tax Code validator\n",
                        "description": "<p>Italian Tax Code validator</p>\n"
                    }
                },
                "vatNumber": {
                    "name": "vatNumber",
                    "getSignature": {
                        "name": "vatNumber",
                        "type": "",
                        "returnType": "ValidatorFn",
                        "line": 130,
                        "rawdescription": "\n\nVAT Number validator\n",
                        "description": "<p>VAT Number validator</p>\n"
                    }
                },
                "cap": {
                    "name": "cap",
                    "getSignature": {
                        "name": "cap",
                        "type": "",
                        "returnType": "ValidatorFn",
                        "line": 137,
                        "rawdescription": "\n\nItalian Postal Code validator (CAP)\n",
                        "description": "<p>Italian Postal Code validator (CAP)</p>\n"
                    }
                },
                "regExp": {
                    "name": "regExp",
                    "getSignature": {
                        "name": "regExp",
                        "type": "",
                        "returnType": "ValidatorFn",
                        "line": 144,
                        "rawdescription": "\n\nCheck if value is a valid RegExp\n",
                        "description": "<p>Check if value is a valid RegExp</p>\n"
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "BadgeDirective",
            "id": "directive-BadgeDirective-3c302262e8340a51c83b6bfdc963f6af542be8242070a3312843ce45ce325df264d80595e19106cecaecfa3bda095c28428485bba455522219b02709463e10bb",
            "file": "projects/design-angular-kit/src/lib/components/core/badge/badge.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostBinding, Input } from '@angular/core';\nimport { BadgeColor } from '../../../interfaces/core';\nimport { BooleanInput, isTrueBooleanInput } from '../../../utils/boolean-input';\n\n@Directive({\n  selector: '[itBadge]',\n  exportAs: 'itBadge'\n})\nexport class BadgeDirective {\n\n  /**\n   * Define the badge color\n   */\n  @Input('itBadge') color?: BadgeColor;\n\n  /**\n   * Show rounded badge\n   */\n  @Input('rounded') rounded?: BooleanInput;\n\n  @HostBinding('class')\n  get badgeClass(): string {\n    let badgeClass = 'badge';\n    if (isTrueBooleanInput(this.rounded)) {\n      badgeClass += ` rounded-pill`;\n    }\n    if (this.color) {\n      badgeClass += ` bg-${this.color}`;\n    }\n\n    return badgeClass;\n  }\n\n}\n",
            "selector": "[itBadge]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "itBadge",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefine the badge color\n",
                    "description": "<p>Define the badge color</p>\n",
                    "line": 14,
                    "type": "BadgeColor",
                    "decorators": []
                },
                {
                    "name": "rounded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow rounded badge\n",
                    "description": "<p>Show rounded badge</p>\n",
                    "line": 19,
                    "type": "BooleanInput",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "accessors": {
                "badgeClass": {
                    "name": "badgeClass",
                    "getSignature": {
                        "name": "badgeClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 22
                    }
                }
            }
        },
        {
            "name": "ButtonDirective",
            "id": "directive-ButtonDirective-192bf3ee90f0721f0c78a38d902ca22b704b8e69ee8bb3424977137f321ed9713f7be50e2d05dbcd1bad9f89f3bfbc6cb6dc434c3e03c81f5b1ad7177058161c",
            "file": "projects/design-angular-kit/src/lib/components/core/button/button.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { ContentChildren, Directive, HostBinding, HostListener, Input, QueryList } from '@angular/core';\nimport { ButtonColor, ButtonSize } from '../../../interfaces/core';\nimport { IconComponent } from '../../utils/icon/icon.component';\nimport { ProgressBarComponent } from '../progress-bar/progress-bar.component';\nimport { BooleanInput, isTrueBooleanInput } from '../../../utils/boolean-input';\n\n@Directive({\n  selector: '[itButton]',\n  exportAs: 'itButton'\n})\nexport class ButtonDirective {\n\n  /**\n   * Button color\n   */\n  @Input('itButton') color?: ButtonColor;\n\n  /**\n   * Button size\n   */\n  @Input() size?: ButtonSize;\n\n  /**\n   * Indicates whether the button occupies all the width available to it.\n   */\n  @Input() block?: ButtonSize;\n\n  /**\n   * If button is disabled\n   */\n  @Input() @HostBinding('disabled') disabled?: BooleanInput;\n\n  /**\n   * The icon children\n   */\n  @ContentChildren(IconComponent) icons?: QueryList<IconComponent>;\n\n  /**\n   * The progress bar children\n   */\n  @ContentChildren(ProgressBarComponent) progressBar?: ProgressBarComponent;\n\n  private isFocus = false;\n\n  @HostListener('focus')\n  onFocus() {\n    this.isFocus = true;\n  }\n\n  @HostListener('blur')\n  onBlur() {\n    this.isFocus = false;\n  }\n\n  @HostBinding('class')\n  get hostClasses(): string {\n    let cssClass = 'btn';\n\n    if (this.color) {\n      cssClass += ` btn-${this.color}`;\n    }\n\n    if (this.size) {\n      cssClass += ` btn-${this.size}`;\n    }\n\n    if (this.block) {\n      cssClass += ' btn-block';\n    }\n\n    if (isTrueBooleanInput(this.disabled)) {\n      cssClass += ' disabled';\n    }\n\n    if (this.isFocus) {\n      cssClass += ' focus--mouse';\n    }\n\n    if (this.icons?.length && !this.progressBar) {\n      cssClass += ' btn-icon';\n    }\n\n    if (this.progressBar) {\n      cssClass += ' btn-progress';\n    }\n\n    return cssClass;\n  }\n\n}\n",
            "selector": "[itButton]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "block",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether the button occupies all the width available to it.\n",
                    "description": "<p>Indicates whether the button occupies all the width available to it.</p>\n",
                    "line": 26,
                    "type": "ButtonSize",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf button is disabled\n",
                    "description": "<p>If button is disabled</p>\n",
                    "line": 31,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "itButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nButton color\n",
                    "description": "<p>Button color</p>\n",
                    "line": 16,
                    "type": "ButtonColor",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nButton size\n",
                    "description": "<p>Button size</p>\n",
                    "line": 21,
                    "type": "ButtonSize",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "blur",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51
                },
                {
                    "name": "focus",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46
                }
            ],
            "propertiesClass": [
                {
                    "name": "icons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<IconComponent>",
                    "optional": true,
                    "description": "<p>The icon children</p>\n",
                    "line": 36,
                    "rawdescription": "\n\nThe icon children\n",
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "IconComponent"
                        }
                    ]
                },
                {
                    "name": "isFocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "progressBar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProgressBarComponent",
                    "optional": true,
                    "description": "<p>The progress bar children</p>\n",
                    "line": 41,
                    "rawdescription": "\n\nThe progress bar children\n",
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "ProgressBarComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'blur'"
                        }
                    ]
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'focus'"
                        }
                    ]
                }
            ],
            "accessors": {
                "hostClasses": {
                    "name": "hostClasses",
                    "getSignature": {
                        "name": "hostClasses",
                        "type": "string",
                        "returnType": "string",
                        "line": 56
                    }
                }
            }
        },
        {
            "name": "ForwardDirective",
            "id": "directive-ForwardDirective-0d0d2df628d510d036b34f22217fd0e7b2a2030af8ffa482515dd3ffa3069cee144884184608f3ba1d2839be5c537bb0756136992d426e180180208560a1f883",
            "file": "projects/design-angular-kit/src/lib/components/core/forward/forward.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { DOCUMENT } from '@angular/common';\nimport { Directive, HostListener, Inject, Input } from '@angular/core';\n\n@Directive({\n  selector: '[itForward]',\n  host: {'class': 'forward'}\n})\nexport class ForwardDirective {\n\n  /**\n   * Indica, se HTMLElement, l'elemento a cui navigare, o se stringa, il selettore che selezionerà l'elemento a cui navigare.\n  */\n  @Input() set itForward(value: HTMLElement | string | undefined) { this._itForward = value; }\n  get itForward(): HTMLElement | string | undefined { return this._itForward; }\n  private _itForward: HTMLElement | string | undefined = undefined;\n\n  constructor(\n    @Inject(DOCUMENT) private document?: Document\n  ) { }\n\n  @HostListener('click', ['$event'])\n  onClick(event: any) {\n    event.preventDefault();\n    if (this.itForward) {\n      if (typeof this.itForward === 'string') {\n        this.document?.querySelector(this.itForward)?.scrollIntoView({\n          behavior: 'smooth',\n          block: 'start',\n          inline: \"nearest\"\n        })\n      } else if (this.itForward instanceof HTMLElement) {\n        this.itForward.scrollIntoView({\n          behavior: 'smooth',\n          block: 'start',\n          inline: \"nearest\"\n        });\n      }\n    }\n  }\n\n}\n",
            "selector": "[itForward]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "itForward",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica, se HTMLElement, l'elemento a cui navigare, o se stringa, il selettore che selezionerà l'elemento a cui navigare.\n",
                    "description": "<p>Indica, se HTMLElement, l&#39;elemento a cui navigare, o se stringa, il selettore che selezionerà l&#39;elemento a cui navigare.</p>\n",
                    "line": 13,
                    "type": "HTMLElement | string | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22
                }
            ],
            "propertiesClass": [
                {
                    "name": "_itForward",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement | string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "itForward": {
                    "name": "itForward",
                    "setSignature": {
                        "name": "itForward",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "HTMLElement | string | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 13,
                        "rawdescription": "\n\nIndica, se HTMLElement, l'elemento a cui navigare, o se stringa, il selettore che selezionerà l'elemento a cui navigare.\n",
                        "description": "<p>Indica, se HTMLElement, l&#39;elemento a cui navigare, o se stringa, il selettore che selezionerà l&#39;elemento a cui navigare.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "HTMLElement | string | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "itForward",
                        "type": "",
                        "returnType": "HTMLElement | string | undefined",
                        "line": 14
                    }
                }
            }
        },
        {
            "name": "PopoverDirective",
            "id": "directive-PopoverDirective-9339d9f0adba5aee665e50135e9603a7dffe3bb00085c50221d9f252e8bdd4b8d247c0fb491cc8c67d590bec135ce6ee9f862ce7137454965b984df544bdcea9",
            "file": "projects/design-angular-kit/src/lib/components/core/popover/popover.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { AfterViewInit, Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';\nimport { ElementPlacement } from '../../../interfaces/core';\nimport { BooleanInput, isTrueBooleanInput } from '../../../utils/boolean-input';\n\nimport { Popover } from 'bootstrap-italia';\n\n@Directive({\n  selector: '[itPopover]',\n  exportAs: 'itPopover'\n})\nexport class PopoverDirective implements AfterViewInit {\n\n  /**\n   * Define the popover content\n   * @param content the popover content\n   */\n  @Input('itPopover') set content(content: string) {\n    this.element.setAttribute('data-bs-content', content);\n  }\n\n  /**\n   * Define the popover title\n   * @param title the popover title\n   */\n  @Input('popoverTitle') set title(title: string | undefined) {\n    if (title) {\n      // this.element.setAttribute(\"title\", title);\n      this.element.setAttribute('data-bs-original-title', title);\n    }\n  }\n\n\n  /**\n   * Define the popover placement\n   * @param placement\n   */\n  @Input('popoverPlacement') set placement(placement: ElementPlacement) {\n    this.element.setAttribute('data-bs-placement', placement);\n  }\n\n  /**\n   * Appends the popover to a specific element.\n   * @param container\n   */\n  @Input('popoverContainer') set container(container: 'body' | string | undefined) {\n    if (container) {\n      this.element.setAttribute('data-container', container);\n    }\n  }\n\n  /**\n   * Indicates whether the title contains html\n   * @param html true if contain html\n   */\n  @Input('popoverHtml') set html(html: BooleanInput) {\n    this.element.setAttribute('data-bs-html', isTrueBooleanInput(html) ? 'true' : 'false');\n  }\n\n  /**\n   * How popover is triggered\n   * - 'hover': To open the Popover on hover of the mouse over the element\n   * - 'focus': To ignore popovers on the user's next click of an element other than the toggle element.\n   * @param trigger\n   */\n  @Input('popoverTrigger') set hover(trigger: 'click' | 'hover' | 'focus' | 'manual' | undefined) {\n    if (trigger) {\n      this.element.setAttribute('data-bs-trigger', trigger);\n    }\n  }\n\n  /**\n   * This event fires immediately when the show method is called.\n   */\n  @Output() onShow: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * This event is triggered when the tooltip has been made visible to the user (it will wait for the CSS transitions to complete).\n   */\n  @Output() onShown: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * This event fires immediately when the hide method is called.\n   */\n  @Output() onHide: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * This event is raised when the tooltip has finished being hidden from the user (it will wait for the CSS transitions to complete).\n   */\n  @Output() onHidden: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * This event fires after the show event when the tooltip template has been added to the DOM.\n   */\n  @Output() onInserted: EventEmitter<Event> = new EventEmitter();\n\n  private readonly element: HTMLElement;\n  private popover?: any;\n\n  constructor(\n    private readonly _elementRef: ElementRef\n  ) {\n    this.element = this._elementRef.nativeElement;\n  }\n\n  ngAfterViewInit(): void {\n    this.element.setAttribute('data-bs-toggle', 'popover');\n    this.popover = Popover.getOrCreateInstance(this.element);\n\n    this.element.addEventListener('show.bs.popover', event => this.onShow.emit(event));\n    this.element.addEventListener('shown.bs.popover', event => this.onShown.emit(event));\n    this.element.addEventListener('hide.bs.popover', event => this.onHide.emit(event));\n    this.element.addEventListener('hidden.bs.popover', event => this.onHidden.emit(event));\n    this.element.addEventListener('inserted.bs.popover', event => this.onInserted.emit(event));\n  }\n\n  /**\n   * Shows the popover of an item.\n   */\n  public show(): void {\n    this.popover?.show();\n  }\n\n  /**\n   * Hide the popover of an element.\n   */\n  public hide(): void {\n    this.popover?.hide();\n  }\n\n  /**\n   * Activate / Deactivate the popover of an element\n   */\n  public toggle(): void {\n    this.popover?.toggle();\n  }\n\n  /**\n   * Hides and destroys the popover of an element.\n   */\n  public dispose(): void {\n    this.popover?.dispose();\n  }\n\n  /**\n   * Gives the popover of an element a chance to be shown.\n   */\n  public enable(): void {\n    this.popover?.enable();\n  }\n\n  /**\n   * Removes the ability to show the popover of an element.\n   */\n  public disable(): void {\n    this.popover?.disable();\n  }\n\n  /**\n   * Toggles the possibility that the popover of an element is shown or hidden.\n   */\n  public toggleEnabled(): void {\n    this.popover?.disable();\n  }\n\n  /**\n   * Updates the position of an element's popover.\n   */\n  public update(): void {\n    this.popover?.disable();\n  }\n\n}\n",
            "selector": "[itPopover]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "itPopover",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 455,
                            "end": 493,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 338,
                            "tagName": {
                                "pos": 456,
                                "end": 461,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the popover content</p>\n",
                            "name": {
                                "pos": 462,
                                "end": 469,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "content"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "rawdescription": "\n\nDefine the popover content\n",
                    "description": "<p>Define the popover content</p>\n",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "popoverContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1171,
                            "end": 1191,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 338,
                            "tagName": {
                                "pos": 1172,
                                "end": 1177,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "name": {
                                "pos": 1178,
                                "end": 1187,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "container"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "rawdescription": "\n\nAppends the popover to a specific element.\n",
                    "description": "<p>Appends the popover to a specific element.</p>\n",
                    "line": 45,
                    "type": "\"body\" | string | undefined",
                    "decorators": []
                },
                {
                    "name": "popoverHtml",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1431,
                            "end": 1467,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 338,
                            "tagName": {
                                "pos": 1432,
                                "end": 1437,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>true if contain html</p>\n",
                            "name": {
                                "pos": 1438,
                                "end": 1442,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "html"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "rawdescription": "\n\nIndicates whether the title contains html\n",
                    "description": "<p>Indicates whether the title contains html</p>\n",
                    "line": 55,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "popoverPlacement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 947,
                            "end": 967,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 338,
                            "tagName": {
                                "pos": 948,
                                "end": 953,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "name": {
                                "pos": 954,
                                "end": 963,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "placement"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "rawdescription": "\n\nDefine the popover placement\n",
                    "description": "<p>Define the popover placement</p>\n",
                    "line": 37,
                    "type": "ElementPlacement",
                    "decorators": []
                },
                {
                    "name": "popoverTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 654,
                            "end": 688,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 338,
                            "tagName": {
                                "pos": 655,
                                "end": 660,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the popover title</p>\n",
                            "name": {
                                "pos": 661,
                                "end": 666,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "title"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "rawdescription": "\n\nDefine the popover title\n",
                    "description": "<p>Define the popover title</p>\n",
                    "line": 25,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "popoverTrigger",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1843,
                            "end": 1861,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 338,
                            "tagName": {
                                "pos": 1844,
                                "end": 1849,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "name": {
                                "pos": 1850,
                                "end": 1857,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "trigger"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "rawdescription": "\n\nHow popover is triggered\n- 'hover': To open the Popover on hover of the mouse over the element\n- 'focus': To ignore popovers on the user's next click of an element other than the toggle element.\n",
                    "description": "<p>How popover is triggered</p>\n<ul>\n<li>&#39;hover&#39;: To open the Popover on hover of the mouse over the element</li>\n<li>&#39;focus&#39;: To ignore popovers on the user&#39;s next click of an element other than the toggle element.</li>\n</ul>\n",
                    "line": 65,
                    "type": "\"click\" | \"hover\" | \"focus\" | \"manual\" | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onHidden",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event is raised when the tooltip has finished being hidden from the user (it will wait for the CSS transitions to complete).\n",
                    "description": "<p>This event is raised when the tooltip has finished being hidden from the user (it will wait for the CSS transitions to complete).</p>\n",
                    "line": 89,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "onHide",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event fires immediately when the hide method is called.\n",
                    "description": "<p>This event fires immediately when the hide method is called.</p>\n",
                    "line": 84,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "onInserted",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event fires after the show event when the tooltip template has been added to the DOM.\n",
                    "description": "<p>This event fires after the show event when the tooltip template has been added to the DOM.</p>\n",
                    "line": 94,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event fires immediately when the show method is called.\n",
                    "description": "<p>This event fires immediately when the show method is called.</p>\n",
                    "line": 74,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "onShown",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event is triggered when the tooltip has been made visible to the user (it will wait for the CSS transitions to complete).\n",
                    "description": "<p>This event is triggered when the tooltip has been made visible to the user (it will wait for the CSS transitions to complete).</p>\n",
                    "line": 79,
                    "type": "EventEmitter<Event>"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "element",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 96,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "popover",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 97,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "disable",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemoves the ability to show the popover of an element.\n",
                    "description": "<p>Removes the ability to show the popover of an element.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dispose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHides and destroys the popover of an element.\n",
                    "description": "<p>Hides and destroys the popover of an element.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "enable",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGives the popover of an element a chance to be shown.\n",
                    "description": "<p>Gives the popover of an element a chance to be shown.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHide the popover of an element.\n",
                    "description": "<p>Hide the popover of an element.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShows the popover of an item.\n",
                    "description": "<p>Shows the popover of an item.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nActivate / Deactivate the popover of an element\n",
                    "description": "<p>Activate / Deactivate the popover of an element</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "toggleEnabled",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggles the possibility that the popover of an element is shown or hidden.\n",
                    "description": "<p>Toggles the possibility that the popover of an element is shown or hidden.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "update",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates the position of an element's popover.\n",
                    "description": "<p>Updates the position of an element&#39;s popover.</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "implements": [
                "AfterViewInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 97,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "content": {
                    "name": "content",
                    "setSignature": {
                        "name": "content",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "content",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 17,
                        "rawdescription": "\n\nDefine the popover content\n",
                        "description": "<p>Define the popover content</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 462,
                                    "end": 469,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "content"
                                },
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "pos": 456,
                                    "end": 461,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "param"
                                },
                                "comment": "<p>the popover content</p>\n"
                            }
                        ]
                    }
                },
                "title": {
                    "name": "title",
                    "setSignature": {
                        "name": "title",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "title",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 25,
                        "rawdescription": "\n\nDefine the popover title\n",
                        "description": "<p>Define the popover title</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 661,
                                    "end": 666,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "title"
                                },
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "pos": 655,
                                    "end": 660,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "param"
                                },
                                "comment": "<p>the popover title</p>\n"
                            }
                        ]
                    }
                },
                "placement": {
                    "name": "placement",
                    "setSignature": {
                        "name": "placement",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "placement",
                                "type": "ElementPlacement",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 37,
                        "rawdescription": "\n\nDefine the popover placement\n",
                        "description": "<p>Define the popover placement</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 954,
                                    "end": 963,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "placement"
                                },
                                "type": "ElementPlacement",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "pos": 948,
                                    "end": 953,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "param"
                                },
                                "comment": ""
                            }
                        ]
                    }
                },
                "container": {
                    "name": "container",
                    "setSignature": {
                        "name": "container",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "container",
                                "type": "\"body\" | string | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 45,
                        "rawdescription": "\n\nAppends the popover to a specific element.\n",
                        "description": "<p>Appends the popover to a specific element.</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 1178,
                                    "end": 1187,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "container"
                                },
                                "type": "\"body\" | string | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "pos": 1172,
                                    "end": 1177,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "param"
                                },
                                "comment": ""
                            }
                        ]
                    }
                },
                "html": {
                    "name": "html",
                    "setSignature": {
                        "name": "html",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "html",
                                "type": "BooleanInput",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 55,
                        "rawdescription": "\n\nIndicates whether the title contains html\n",
                        "description": "<p>Indicates whether the title contains html</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 1438,
                                    "end": 1442,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "html"
                                },
                                "type": "BooleanInput",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "pos": 1432,
                                    "end": 1437,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "param"
                                },
                                "comment": "<p>true if contain html</p>\n"
                            }
                        ]
                    }
                },
                "hover": {
                    "name": "hover",
                    "setSignature": {
                        "name": "hover",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "trigger",
                                "type": "\"click\" | \"hover\" | \"focus\" | \"manual\" | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 65,
                        "rawdescription": "\n\nHow popover is triggered\n- 'hover': To open the Popover on hover of the mouse over the element\n- 'focus': To ignore popovers on the user's next click of an element other than the toggle element.\n",
                        "description": "<p>How popover is triggered</p>\n<ul>\n<li>&#39;hover&#39;: To open the Popover on hover of the mouse over the element</li>\n<li>&#39;focus&#39;: To ignore popovers on the user&#39;s next click of an element other than the toggle element.</li>\n</ul>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 1850,
                                    "end": 1857,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "trigger"
                                },
                                "type": "\"click\" | \"hover\" | \"focus\" | \"manual\" | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "pos": 1844,
                                    "end": 1849,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "param"
                                },
                                "comment": ""
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "TooltipDirective",
            "id": "directive-TooltipDirective-112ac97bc203afc7e487ed2d2333ca034869d986ec9279e7912619c7baf35b2295c8e7b0ce0914cb14cd73c1d13981f01813a4c14e390de9cffde58be7772757",
            "file": "projects/design-angular-kit/src/lib/components/core/tooltip/tooltip.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { AfterViewInit, Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';\nimport { ElementPlacement } from '../../../interfaces/core';\nimport { BooleanInput, isTrueBooleanInput } from '../../../utils/boolean-input';\nimport { Tooltip } from 'bootstrap-italia';\n\n@Directive({\n  selector: '[itTooltip]',\n  exportAs: 'itTooltip'\n})\nexport class TooltipDirective implements AfterViewInit {\n\n  /**\n   * Define the tooltip title\n   * @param title the tooltip title\n   */\n  @Input('itTooltip') set title(title: string | undefined) {\n    if (title) {\n      // this.element.setAttribute(\"title\", title);\n      this.element.setAttribute('data-bs-original-title', title);\n    }\n  }\n\n  /**\n   * Define the tooltip placement\n   * @param placement\n   */\n  @Input('tooltipPlacement') set placement(placement: ElementPlacement) {\n    this.element.setAttribute('data-bs-placement', placement);\n  }\n\n  /**\n   * Indicates whether the title contains html\n   * @param html true if contain html\n   */\n  @Input('tooltipHtml') set html(html: BooleanInput) {\n    this.element.setAttribute('data-bs-html', isTrueBooleanInput(html) ? 'true' : 'false');\n  }\n\n  /**\n   * This event fires immediately when the show method is called.\n   */\n  @Output() onShow: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * This event is triggered when the tooltip has been made visible to the user (it will wait for the CSS transitions to complete).\n   */\n  @Output() onShown: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * This event fires immediately when the hide method is called.\n   */\n  @Output() onHide: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * This event is raised when the tooltip has finished being hidden from the user (it will wait for the CSS transitions to complete).\n   */\n  @Output() onHidden: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * This event fires after the show event when the tooltip template has been added to the DOM.\n   */\n  @Output() onInserted: EventEmitter<Event> = new EventEmitter();\n\n  private readonly element: HTMLElement;\n  private tooltip?: any;\n\n  constructor(\n    private readonly _elementRef: ElementRef\n  ) {\n    this.element = this._elementRef.nativeElement;\n  }\n\n  ngAfterViewInit(): void {\n    this.element.setAttribute('data-bs-toggle', 'tooltip');\n    this.tooltip = Tooltip.getOrCreateInstance(this.element);\n\n    this.element.addEventListener('show.bs.tooltip', event => this.onShow.emit(event));\n    this.element.addEventListener('shown.bs.tooltip', event => this.onShown.emit(event));\n    this.element.addEventListener('hide.bs.tooltip', event => this.onHide.emit(event));\n    this.element.addEventListener('hidden.bs.tooltip', event => this.onHidden.emit(event));\n    this.element.addEventListener('inserted.bs.tooltip', event => this.onInserted.emit(event));\n  }\n\n  /**\n   * Shows the tooltip of an item.\n   */\n  public show(): void {\n    this.tooltip?.show();\n  }\n\n  /**\n   * Hide the tooltip of an element.\n   */\n  public hide(): void {\n    this.tooltip?.hide();\n  }\n\n  /**\n   * Activate / Deactivate the tooltip of an element\n   */\n  public toggle(): void {\n    this.tooltip?.toggle();\n  }\n\n  /**\n   * Hides and destroys the tooltip of an element.\n   */\n  public dispose(): void {\n    this.tooltip?.dispose();\n  }\n\n  /**\n   * Gives the tooltip of an element a chance to be shown.\n   */\n  public enable(): void {\n    this.tooltip?.enable();\n  }\n\n  /**\n   * Removes the ability to show the tooltip of an element.\n   */\n  public disable(): void {\n    this.tooltip?.disable();\n  }\n\n  /**\n   * Toggles the possibility that the tooltip of an element is shown or hidden.\n   */\n  public toggleEnabled(): void {\n    this.tooltip?.disable();\n  }\n\n  /**\n   * Updates the position of an element's tooltip.\n   */\n  public update(): void {\n    this.tooltip?.disable();\n  }\n\n}\n",
            "selector": "[itTooltip]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "itTooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 452,
                            "end": 486,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 338,
                            "tagName": {
                                "pos": 453,
                                "end": 458,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the tooltip title</p>\n",
                            "name": {
                                "pos": 459,
                                "end": 464,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "title"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "rawdescription": "\n\nDefine the tooltip title\n",
                    "description": "<p>Define the tooltip title</p>\n",
                    "line": 16,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "tooltipHtml",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 964,
                            "end": 1000,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 338,
                            "tagName": {
                                "pos": 965,
                                "end": 970,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>true if contain html</p>\n",
                            "name": {
                                "pos": 971,
                                "end": 975,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "html"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "rawdescription": "\n\nIndicates whether the title contains html\n",
                    "description": "<p>Indicates whether the title contains html</p>\n",
                    "line": 35,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "tooltipPlacement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 741,
                            "end": 761,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 338,
                            "tagName": {
                                "pos": 742,
                                "end": 747,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "name": {
                                "pos": 748,
                                "end": 757,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "placement"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "rawdescription": "\n\nDefine the tooltip placement\n",
                    "description": "<p>Define the tooltip placement</p>\n",
                    "line": 27,
                    "type": "ElementPlacement",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onHidden",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event is raised when the tooltip has finished being hidden from the user (it will wait for the CSS transitions to complete).\n",
                    "description": "<p>This event is raised when the tooltip has finished being hidden from the user (it will wait for the CSS transitions to complete).</p>\n",
                    "line": 57,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "onHide",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event fires immediately when the hide method is called.\n",
                    "description": "<p>This event fires immediately when the hide method is called.</p>\n",
                    "line": 52,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "onInserted",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event fires after the show event when the tooltip template has been added to the DOM.\n",
                    "description": "<p>This event fires after the show event when the tooltip template has been added to the DOM.</p>\n",
                    "line": 62,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event fires immediately when the show method is called.\n",
                    "description": "<p>This event fires immediately when the show method is called.</p>\n",
                    "line": 42,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "onShown",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event is triggered when the tooltip has been made visible to the user (it will wait for the CSS transitions to complete).\n",
                    "description": "<p>This event is triggered when the tooltip has been made visible to the user (it will wait for the CSS transitions to complete).</p>\n",
                    "line": 47,
                    "type": "EventEmitter<Event>"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "element",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "disable",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemoves the ability to show the tooltip of an element.\n",
                    "description": "<p>Removes the ability to show the tooltip of an element.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dispose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHides and destroys the tooltip of an element.\n",
                    "description": "<p>Hides and destroys the tooltip of an element.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "enable",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGives the tooltip of an element a chance to be shown.\n",
                    "description": "<p>Gives the tooltip of an element a chance to be shown.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHide the tooltip of an element.\n",
                    "description": "<p>Hide the tooltip of an element.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShows the tooltip of an item.\n",
                    "description": "<p>Shows the tooltip of an item.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nActivate / Deactivate the tooltip of an element\n",
                    "description": "<p>Activate / Deactivate the tooltip of an element</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "toggleEnabled",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggles the possibility that the tooltip of an element is shown or hidden.\n",
                    "description": "<p>Toggles the possibility that the tooltip of an element is shown or hidden.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "update",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates the position of an element's tooltip.\n",
                    "description": "<p>Updates the position of an element&#39;s tooltip.</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "implements": [
                "AfterViewInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "title": {
                    "name": "title",
                    "setSignature": {
                        "name": "title",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "title",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "rawdescription": "\n\nDefine the tooltip title\n",
                        "description": "<p>Define the tooltip title</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 459,
                                    "end": 464,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "title"
                                },
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "pos": 453,
                                    "end": 458,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "param"
                                },
                                "comment": "<p>the tooltip title</p>\n"
                            }
                        ]
                    }
                },
                "placement": {
                    "name": "placement",
                    "setSignature": {
                        "name": "placement",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "placement",
                                "type": "ElementPlacement",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 27,
                        "rawdescription": "\n\nDefine the tooltip placement\n",
                        "description": "<p>Define the tooltip placement</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 748,
                                    "end": 757,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "placement"
                                },
                                "type": "ElementPlacement",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "pos": 742,
                                    "end": 747,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "param"
                                },
                                "comment": ""
                            }
                        ]
                    }
                },
                "html": {
                    "name": "html",
                    "setSignature": {
                        "name": "html",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "html",
                                "type": "BooleanInput",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 35,
                        "rawdescription": "\n\nIndicates whether the title contains html\n",
                        "description": "<p>Indicates whether the title contains html</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 971,
                                    "end": 975,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "html"
                                },
                                "type": "BooleanInput",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "pos": 965,
                                    "end": 970,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "param"
                                },
                                "comment": "<p>true if contain html</p>\n"
                            }
                        ]
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "AbstractComponent",
            "id": "component-AbstractComponent-2850f36c218d5135bd1f71c1a89a0f9bd41fee9ca5ca479a0dd507993729c611469bc08fc229de9708e4406429f9478577997c6fd83cf7a82ea5ccbcc27b15ac",
            "file": "projects/design-angular-kit/src/lib/abstracts/abstract.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {AfterViewInit, Component, ElementRef, Input, Renderer2} from \"@angular/core\";\n\n@Component({template: ''})\nexport class AbstractComponent implements AfterViewInit {\n\n  /**\n   * The element ID\n   */\n  @Input() id?: string;\n\n  constructor(\n    protected readonly _renderer: Renderer2,\n    protected readonly _elementRef: ElementRef\n  ) {\n  }\n\n  ngAfterViewInit(): void {\n    this._renderer.removeAttribute(this._elementRef.nativeElement, 'id');\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "AbstractFormComponent",
            "id": "component-AbstractFormComponent-ccb14abb2140ce277e7ce0a18f8cfdab9e4c0e27e2450fd43c10d5d531ec269a4d2d88305249b0d63684b7b6444ff9bd410dc9e9338b63ebf2c4d960324a8fcc",
            "file": "projects/design-angular-kit/src/lib/abstracts/abstract-form-component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label of form control\n",
                    "description": "<p>The label of form control</p>\n",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "validationMode",
                    "defaultValue": "'only-invalid'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 975,
                            "end": 1043,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 976,
                                "end": 983,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p><b>only-invalid</b>: Show only invalid validation color</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nValidation color display mode (validation triggered if field is touched or not pristine)\n- <b>true</b>: Always show the validation color\n- <b>false</b>: Never show validation color\n- <b>only-valid</b>: Show only valid validation color\n- <b>only-invalid</b>: Show only invalid validation color\n",
                    "description": "<p>Validation color display mode (validation triggered if field is touched or not pristine)</p>\n<ul>\n<li><b>true</b>: Always show the validation color</li>\n<li><b>false</b>: Never show validation color</li>\n<li><b>only-valid</b>: Show only valid validation color</li>\n<li><b>only-invalid</b>: Show only invalid validation color</li>\n</ul>\n",
                    "line": 24,
                    "type": "BooleanInput | \"only-valid\" | \"only-invalid\"",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 9,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "<p>Internal form control</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nInternal form control\n"
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 90
                }
            ],
            "methodsClass": [
                {
                    "name": "addValidators",
                    "args": [
                        {
                            "name": "validators",
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd the validators in control and parent control\n",
                    "description": "<p>Add the validators in control and parent control</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3969,
                                "end": 3979,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "validators"
                            },
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3963,
                                "end": 3968,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the validators</p>\n"
                        }
                    ]
                },
                {
                    "name": "getError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.\n",
                    "description": "<p>Reports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5231,
                                "end": 5240,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5225,
                                "end": 5230,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5284,
                                "end": 5288,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5278,
                                "end": 5283,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5427,
                                "end": 5434,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>error data for that particular error. If the control or error is not present,\nnull is returned.</p>\n"
                        }
                    ]
                },
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.\n",
                    "description": "<p>Reports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4641,
                                "end": 4650,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4635,
                                "end": 4640,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4694,
                                "end": 4698,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 4688,
                                "end": 4693,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 4837,
                                "end": 4844,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>whether the given error is present in the control at the given path.</p>\n"
                        }
                    ]
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMark the control as touched\n",
                    "description": "<p>Mark the control as touched</p>\n"
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired to check if form control is touched\n",
                    "description": "<p>Fired to check if form control is touched</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ControlValueAccessor, FormControl, NgControl, ValidatorFn } from '@angular/forms';\nimport { Component, DoCheck, ElementRef, Input, OnInit, Optional, Renderer2, Self } from '@angular/core';\nimport { AbstractComponent } from './abstract.component';\nimport { BooleanInput, isFalseBooleanInput } from '../utils/boolean-input';\nimport { Observable } from 'rxjs';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({ template: '' })\nexport class AbstractFormComponent<T = any> extends AbstractComponent implements OnInit, ControlValueAccessor, DoCheck {\n\n  /**\n   * The label of form control\n   */\n  @Input() label?: string;\n\n  /**\n   * Validation color display mode (validation triggered if field is touched or not pristine)\n   * - <b>true</b>: Always show the validation color\n   * - <b>false</b>: Never show validation color\n   * - <b>only-valid</b>: Show only valid validation color\n   * - <b>only-invalid</b>: Show only invalid validation color\n   * @default <b>only-invalid</b>: Show only invalid validation color\n   */\n  @Input() validationMode: BooleanInput | 'only-valid' | 'only-invalid' = 'only-invalid';\n\n  /**\n   * Internal form control\n   */\n  control: FormControl;\n\n  constructor(\n    @Self() @Optional() protected readonly _ngControl: NgControl,\n    protected readonly _translateService: TranslateService,\n    protected override readonly _renderer: Renderer2,\n    protected override readonly _elementRef: ElementRef\n  ) {\n    super(_renderer, _elementRef);\n    this.control = new FormControl();\n    this._ngControl && (this._ngControl.valueAccessor = this);\n  }\n\n  /**\n   * Check if field is invalid (Validation failed)\n   */\n  get isInvalid(): boolean | undefined {\n    if (this.validationMode === 'only-valid' || (this.validationMode !== 'only-invalid' && isFalseBooleanInput(this.validationMode))) {\n      return undefined;\n    }\n\n    if (this._ngControl) {\n      return this._ngControl.invalid === true && (!this._ngControl.pristine || this._ngControl.touched === true);\n    }\n    return this.control.invalid && (!this.control.pristine || this.control.touched);\n  }\n\n  /**\n   * Check if field is valid (Validation successful)\n   */\n  get isValid(): boolean | undefined {\n    if (this.validationMode === 'only-invalid' || (this.validationMode !== 'only-valid' && isFalseBooleanInput(this.validationMode))) {\n      return undefined;\n    }\n\n    if (this._ngControl) {\n      return this._ngControl.valid === true && (!this._ngControl.pristine || this._ngControl.touched === true);\n    }\n    return this.control.valid && (!this.control.pristine || this.control.touched);\n  }\n\n  /**\n   * Return the invalid message string from TranslateService\n   */\n  get invalidMessage(): Observable<string> {\n    if (this.control.hasError('required')) {\n      return this._translateService.get('it.errors.required-field');\n    }\n\n    return this._translateService.get('it.errors.invalid-field');\n  }\n\n  ngOnInit(): void {\n    if (this._ngControl) {\n      this.control.setValidators((this._ngControl.control as FormControl).validator);\n    }\n  }\n\n  onChange = (_: T) => {\n  };\n\n  onTouched = () => {\n  };\n\n  registerOnChange(fn: any): void {\n    this.control.valueChanges.subscribe(fn);\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    if (isDisabled) {\n      return this.control.disable();\n    }\n    this.control.enable();\n  }\n\n  writeValue(value: T): void {\n    this.control.setValue(value, { emitEvent: false });\n  }\n\n  /**\n   * Mark the control as touched\n   */\n  markAsTouched(): void {\n    if (!this.control.touched) {\n      this.onTouched();\n    }\n  }\n\n  /**\n   * Fired to check if form control is touched\n   */\n  ngDoCheck() {\n    if (this.control.touched) {\n      return;\n    }\n    if (this._ngControl?.control?.touched) {\n      this.control.markAsTouched();\n    }\n  }\n\n  /**\n   * Add the validators in control and parent control\n   * @param validators the validators\n   * @protected\n   */\n  protected addValidators(validators: ValidatorFn | ValidatorFn[]): void {\n    if (!Array.isArray(validators)) {\n      validators = [validators];\n    }\n\n    validators.forEach(validator => {\n      if (!this.control.hasValidator(validator)) {\n        this.control.addValidators(validator);\n      }\n\n      if (this._ngControl?.control && !this._ngControl.control.hasValidator(validator)) {\n        this._ngControl.control.addValidators(validator);\n      }\n    });\n  }\n\n  /**\n   * Reports whether the control with the given path has the error specified. <br/>\n   * If the control is not present, false is returned.\n   * @param errorCode The code of the error to check\n   * @param path A list of control names that designates how to move from the current control\n   * to the control that should be queried for errors.\n   * @returns whether the given error is present in the control at the given path.\n   */\n  public hasError(errorCode: string, path?: Array<string | number> | string): boolean {\n    if (this._ngControl) {\n      return this._ngControl.hasError(errorCode, path);\n    }\n    return this.control.hasError(errorCode, path)\n  }\n\n  /**\n   * Reports error data for the control with the given path.\n   * @param errorCode The code of the error to check\n   * @param path A list of control names that designates how to move from the current control\n   * to the control that should be queried for errors.\n   * @returns error data for that particular error. If the control or error is not present,\n   * null is returned.\n   */\n  public getError(errorCode: string, path?: Array<string | number> | string): any {\n    if (this._ngControl) {\n      return this._ngControl.getError(errorCode, path);\n    }\n    return this.control.getError(errorCode, path);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "_ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "AbstractComponent",
            "implements": [
                "OnInit",
                "ControlValueAccessor",
                "DoCheck"
            ],
            "accessors": {
                "isInvalid": {
                    "name": "isInvalid",
                    "getSignature": {
                        "name": "isInvalid",
                        "type": "",
                        "returnType": "boolean | undefined",
                        "line": 45,
                        "rawdescription": "\n\nCheck if field is invalid (Validation failed)\n",
                        "description": "<p>Check if field is invalid (Validation failed)</p>\n"
                    }
                },
                "isValid": {
                    "name": "isValid",
                    "getSignature": {
                        "name": "isValid",
                        "type": "",
                        "returnType": "boolean | undefined",
                        "line": 59,
                        "rawdescription": "\n\nCheck if field is valid (Validation successful)\n",
                        "description": "<p>Check if field is valid (Validation successful)</p>\n"
                    }
                },
                "invalidMessage": {
                    "name": "invalidMessage",
                    "getSignature": {
                        "name": "invalidMessage",
                        "type": "",
                        "returnType": "Observable<string>",
                        "line": 73,
                        "rawdescription": "\n\nReturn the invalid message string from TranslateService\n",
                        "description": "<p>Return the invalid message string from TranslateService</p>\n"
                    }
                }
            }
        },
        {
            "name": "AccordionComponent",
            "id": "component-AccordionComponent-a5d97a0374d5d0eaf0bb6ec21399f4471b76efcba2cceb916a5620c6a2ab90b0ce55c7068cc21eef0b7d6b4dad85733cae39d03d38ecea98fe06b12a0d7be4f6",
            "file": "projects/design-angular-kit/src/lib/components/core/accordion/accordion.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-accordion[id][title]",
            "styleUrls": [
                "./accordion.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./accordion.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "opened",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTrue to set accordion opened by default\n",
                    "description": "<p>True to set accordion opened by default</p>\n",
                    "line": 20,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAccordion Title\n",
                    "description": "<p>Accordion Title</p>\n",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 9,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {AbstractComponent} from \"../../../abstracts/abstract.component\";\nimport {BooleanInput} from \"../../../utils/boolean-input\";\n\n@Component({\n  selector: 'it-accordion[id][title]',\n  templateUrl: './accordion.component.html',\n  styleUrls: ['./accordion.component.scss']\n})\nexport class AccordionComponent extends AbstractComponent {\n\n  /**\n   * Accordion Title\n   */\n  @Input() title!: string;\n\n  /**\n   * True to set accordion opened by default\n   */\n  @Input() opened?: BooleanInput;\n\n  override ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    this._renderer.removeAttribute(this._elementRef.nativeElement, 'title');\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./accordion.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "AbstractComponent",
            "templateData": "<div class=\"accordion\">\n  <div class=\"accordion-item\">\n\n    <h2 class=\"accordion-header\" id=\"collapse-{{id}}-heading\">\n      <button\n        class=\"accordion-button px-0\"\n        type=\"button\"\n        data-bs-toggle=\"collapse\"\n        [class.collapsed]=\"!opened\"\n        [attr.data-bs-target]=\"'#collapse-' + id\"\n        [attr.aria-controls]=\"'collapse-' + id\"\n        [attr.aria-expanded]=\"opened ? 'true' : 'false'\">\n        {{title}}\n      </button>\n    </h2>\n\n    <div id=\"collapse-{{id}}\"\n         class=\"accordion-collapse collapse\"\n         role=\"region\"\n         [class.show]=\"opened\"\n         [attr.aria-labelledby]=\"'collapse-' + id + '-heading'\">\n\n      <div class=\"accordion-body p-0\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n  </div>\n</div>\n\n"
        },
        {
            "name": "AlertComponent",
            "id": "component-AlertComponent-93a53d39b6b8b004d2f836529a06e023d29b16e6096a66314c056eb50f37b70c30261956ce22b4f7bd2796ecc7dd07b2975ffe48a99b01c248fdfed448b36230",
            "file": "projects/design-angular-kit/src/lib/components/core/alert/alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-alert",
            "styleUrls": [
                "./alert.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./alert.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'info'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 371,
                            "end": 388,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 372,
                                "end": 379,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>info</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe alert color\n",
                    "description": "<p>The alert color</p>\n",
                    "line": 16,
                    "type": "AlertColor",
                    "decorators": []
                },
                {
                    "name": "dismissible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInserts the close button\n",
                    "description": "<p>Inserts the close button</p>\n",
                    "line": 21,
                    "type": "BooleanInput",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { AlertColor } from '../../../interfaces/core';\nimport { BooleanInput, isTrueBooleanInput } from '../../../utils/boolean-input';\n\n@Component({\n  selector: 'it-alert',\n  templateUrl: './alert.component.html',\n  styleUrls: ['./alert.component.scss']\n})\nexport class AlertComponent {\n\n  /**\n   * The alert color\n   * @default info\n   */\n  @Input() color: AlertColor = 'info';\n\n  /**\n   * Inserts the close button\n   */\n  @Input() dismissible?: BooleanInput;\n\n  get isDismissible(): boolean {\n    return isTrueBooleanInput(this.dismissible);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".alert-heading:empty {\n  display: none;\n}\n",
                    "styleUrl": "./alert.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "isDismissible": {
                    "name": "isDismissible",
                    "getSignature": {
                        "name": "isDismissible",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 23
                    }
                }
            },
            "templateData": "<div class=\"alert alert-{{color}}\"\n     [class.alert-dismissible]=\"isDismissible\"\n     [class.fade]=\"isDismissible\"\n     [class.show]=\"isDismissible\"\n     role=\"alert\">\n  <h4 class=\"alert-heading\">\n    <ng-content select=\"[heading]\"></ng-content>\n  </h4>\n\n  <ng-content></ng-content>\n\n  <button *ngIf=\"isDismissible\"\n          type=\"button\"\n          class=\"btn-close\"\n          data-bs-dismiss=\"alert\"\n          [attr.aria-label]=\"'it.core.close-alert'|translate\">\n    <it-icon name=\"close\"></it-icon>\n  </button>\n</div>\n"
        },
        {
            "name": "BackButtonComponent",
            "id": "component-BackButtonComponent-378eaac19378635deda9ac3e36d93912f15e4e659a6aa2373839046fe31054d152e50ef48d8613291ac31c0ce62ddda16e3f80bb5d9808a5c0bcede4f0c75ccd",
            "file": "projects/design-angular-kit/src/lib/components/navigation/back-button/back-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "itBackButton",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-back-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./back-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1000,
                            "end": 1124,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 1001,
                                "end": 1008,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "example"
                            },
                            "comment": "<p>backCbFn = this.errorCallback.bind(this);\n(errorCallback is your function, pass backCbFn to the component)</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nCustom back logic <br/>\n\nNOTE: to use 'this' need bind function  <br/>\n```html\n(errorCallback is your function, pass backCbFn to the component)\n```",
                    "description": "<p>Custom back logic <br/></p>\n<p>NOTE: to use &#39;this&#39; need bind function  <br/></p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">(errorCallback is your function, pass backCbFn to the component)</code></pre></div>",
                    "line": 47,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "buttonStyle",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 470,
                            "end": 489,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 471,
                                "end": 478,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>button</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nBack button style\n- <b>link</b>: use a link with icon and text\n- <b>button</b>: use a button with icon and text\n",
                    "description": "<p>Back button style</p>\n<ul>\n<li><b>link</b>: use a link with icon and text</li>\n<li><b>button</b>: use a button with icon and text</li>\n</ul>\n",
                    "line": 18,
                    "type": "\"link\" | \"button\"",
                    "decorators": []
                },
                {
                    "name": "direction",
                    "defaultValue": "'left'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 649,
                            "end": 666,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 650,
                                "end": 657,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>left</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nButton direction\n- <b>left</b>: Back direction\n- <b>up</b>: Upper direction\n",
                    "description": "<p>Button direction</p>\n<ul>\n<li><b>left</b>: Back direction</li>\n<li><b>up</b>: Upper direction</li>\n</ul>\n",
                    "line": 26,
                    "type": "\"left\" | \"up\"",
                    "decorators": []
                },
                {
                    "name": "showIcon",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 747,
                            "end": 764,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 748,
                                "end": 755,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nShow/Hide icon\n",
                    "description": "<p>Show/Hide icon</p>\n",
                    "line": 32,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "showText",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 841,
                            "end": 858,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 842,
                                "end": 849,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nShow/Hide text\n",
                    "description": "<p>Show/Hide text</p>\n",
                    "line": 38,
                    "type": "BooleanInput",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_location",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Location",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        123,
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "goBack",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGo back function\n",
                    "description": "<p>Go back function</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { BooleanInput, isTrueBooleanInput } from '../../../utils/boolean-input';\n\n@Component({\n  selector: 'it-back-button',\n  templateUrl: './back-button.component.html',\n  exportAs: 'itBackButton'\n})\nexport class BackButtonComponent {\n\n  /**\n   * Back button style\n   * - <b>link</b>: use a link with icon and text\n   * - <b>button</b>: use a button with icon and text\n   * @default button\n   */\n  @Input() buttonStyle: 'link' | 'button' = 'button';\n\n  /**\n   * Button direction\n   * - <b>left</b>: Back direction\n   * - <b>up</b>: Upper direction\n   * @default left\n   */\n  @Input() direction: 'left' | 'up' = 'left';\n\n  /**\n   * Show/Hide icon\n   * @default true\n   */\n  @Input() showIcon: BooleanInput = true;\n\n  /**\n   * Show/Hide text\n   * @default true\n   */\n  @Input() showText: BooleanInput = true;\n\n  /**\n   * Custom back logic <br/>\n   *\n   * NOTE: to use 'this' need bind function  <br/>\n   * @example backCbFn = this.errorCallback.bind(this);\n   * (errorCallback is your function, pass backCbFn to the component)\n   */\n  @Input() backFn?: (location: Location) => void;\n\n  get isShowIcon(): boolean {\n    return isTrueBooleanInput(this.showIcon);\n  }\n\n  get isShowText(): boolean {\n    return isTrueBooleanInput(this.showText);\n  }\n\n  constructor(\n    public readonly _location: Location\n  ) {\n  }\n\n  /**\n   * Go back function\n   */\n  public goBack(event: Event): void {\n    event.preventDefault();\n    if (this.backFn) {\n      return this.backFn(this._location);\n    }\n\n    this._location.back();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "_location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "isShowIcon": {
                    "name": "isShowIcon",
                    "getSignature": {
                        "name": "isShowIcon",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 49
                    }
                },
                "isShowText": {
                    "name": "isShowText",
                    "getSignature": {
                        "name": "isShowText",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 53
                    }
                }
            },
            "templateData": "<a *ngIf=\"buttonStyle === 'link'\" href=\"#\" class=\"go-back\" (click)=\"goBack($event)\">\n  <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n</a>\n\n<button *ngIf=\"buttonStyle === 'button'\" itButton=\"primary\" class=\"go-back\" (click)=\"goBack($event)\">\n  <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n</button>\n\n<ng-template #content>\n  <it-icon *ngIf=\"isShowIcon\"\n           size=\"sm\"\n           [name]=\"direction === 'left' ? 'arrow-left' : 'arrow-up'\"\n           [color]=\"buttonStyle === 'link' ? 'primary' : 'white'\"\n           [class.me-2]=\"isShowText\"></it-icon>\n\n  <span [class.visually-hidden]=\"!isShowText\">\n    {{(direction === 'left' ? 'it.navigation.go-back' : 'it.navigation.upper-level') | translate}}\n  </span>\n</ng-template>\n"
        },
        {
            "name": "BackToTopComponent",
            "id": "component-BackToTopComponent-69bf004e4616f85f7fa66105636a69c25d9132b51a595b9bf956a2a672620b27508a34959acb07001fa103ece6baaf3f80bbf40d9c85f5e105850597c9ac71dd",
            "file": "projects/design-angular-kit/src/lib/components/navigation/back-to-top/back-to-top.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-back-to-top",
            "styleUrls": [
                "./back-to-top.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./back-to-top.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nButton usable button on a dark background\n",
                    "description": "<p>Button usable button on a dark background</p>\n",
                    "line": 31,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "'back-to-top-button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 436,
                            "end": 469,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 437,
                                "end": 444,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>&#39;back-to-top-button&#39;</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe back to top ID\n",
                    "description": "<p>The back to top ID</p>\n",
                    "line": 16,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                },
                {
                    "name": "shadow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow shadow\n",
                    "description": "<p>Show shadow</p>\n",
                    "line": 26,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "small",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow small button\n",
                    "description": "<p>Show small button</p>\n",
                    "line": 21,
                    "type": "BooleanInput",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {BooleanInput, isTrueBooleanInput} from \"../../../utils/boolean-input\";\nimport {AbstractComponent} from \"../../../abstracts/abstract.component\";\n\n@Component({\n  selector: 'it-back-to-top',\n  templateUrl: './back-to-top.component.html',\n  styleUrls: ['./back-to-top.component.scss']\n})\nexport class BackToTopComponent extends AbstractComponent {\n\n  /**\n   * The back to top ID\n   * @default 'back-to-top-button'\n   */\n  @Input() override id: string = 'back-to-top-button';\n\n  /**\n   * Show small button\n   */\n  @Input() small?: BooleanInput;\n\n  /**\n   * Show shadow\n   */\n  @Input() shadow?: BooleanInput;\n\n  /**\n   * Button usable button on a dark background\n   */\n  @Input() dark?: BooleanInput;\n\n  get isSmall(): boolean {\n    return isTrueBooleanInput(this.small);\n  }\n\n  get isShadow(): boolean {\n    return isTrueBooleanInput(this.shadow);\n  }\n\n  get isDark(): boolean {\n    return isTrueBooleanInput(this.dark);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./back-to-top.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "AbstractComponent",
            "accessors": {
                "isSmall": {
                    "name": "isSmall",
                    "getSignature": {
                        "name": "isSmall",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 33
                    }
                },
                "isShadow": {
                    "name": "isShadow",
                    "getSignature": {
                        "name": "isShadow",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 37
                    }
                },
                "isDark": {
                    "name": "isDark",
                    "getSignature": {
                        "name": "isDark",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 41
                    }
                }
            },
            "templateData": "<a [id]=\"id\"\n   href=\"#\"\n   aria-hidden=\"true\"\n   data-bs-toggle=\"backtotop\"\n   class=\"back-to-top\"\n   [class.back-to-top-small]=\"isSmall\"\n   [class.shadow]=\"isShadow\"\n   [class.dark]=\"isDark\">\n\n  <it-icon name=\"arrow-up\" [color]=\"isDark ? 'secondary' : 'light'\"></it-icon>\n</a>\n"
        },
        {
            "name": "BreadcrumbComponent",
            "id": "component-BreadcrumbComponent-57ce8811396afba5b47dcc04510d7d90ca93dbcbd19f87a65a6cac0b0bab4158da584186abc92eafc84a57611eb88a38af60040509b881ae524dfdf42da23556",
            "file": "projects/design-angular-kit/src/lib/components/navigation/breadcrumbs/breadcrumb/breadcrumb.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-breadcrumb",
            "styleUrls": [
                "./breadcrumb.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./breadcrumb.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDark style\n",
                    "description": "<p>Dark style</p>\n",
                    "line": 21,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "separator",
                    "defaultValue": "'/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 486,
                            "end": 500,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 487,
                                "end": 494,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>/</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe character to use as separator\n",
                    "description": "<p>The character to use as separator</p>\n",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<BreadcrumbItemComponent>",
                    "optional": true,
                    "description": "<p>The tab items</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nThe tab items\n",
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "BreadcrumbItemComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "isLastItem",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if index is last item\n",
                    "description": "<p>Check if index is last item</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1008,
                                "end": 1013,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1002,
                                "end": 1007,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectorRef, Component, ContentChildren, Input, QueryList} from '@angular/core';\nimport {BreadcrumbItemComponent} from \"../breadcrumb-item/breadcrumb-item.component\";\nimport {BooleanInput, isTrueBooleanInput} from \"../../../../utils/boolean-input\";\n\n@Component({\n  selector: 'it-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  styleUrls: ['./breadcrumb.component.scss']\n})\nexport class BreadcrumbComponent {\n\n  /**\n   * The character to use as separator\n   * @default /\n   */\n  @Input() separator: string = '/';\n\n  /**\n   * Dark style\n   */\n  @Input() dark?: BooleanInput;\n\n  /**\n   * The tab items\n   */\n  @ContentChildren(BreadcrumbItemComponent) items?: QueryList<BreadcrumbItemComponent>;\n\n  get isDark(): boolean {\n    return isTrueBooleanInput(this.dark);\n  }\n\n  constructor(\n    private readonly _changeDetectorRef: ChangeDetectorRef\n  ) {\n  }\n\n  ngAfterViewInit(): void {\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /**\n   * Check if index is last item\n   * @param index\n   */\n  isLastItem(index: number): boolean {\n    return !!this.items && index >= (this.items.length - 1);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./breadcrumb.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "isDark": {
                    "name": "isDark",
                    "getSignature": {
                        "name": "isDark",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 28
                    }
                }
            },
            "templateData": "<nav class=\"breadcrumb-container\" [attr.aria-label]=\"'it.navigation.navigation-path'|translate\">\n  <ol class=\"breadcrumb\" [class.dark]=\"isDark\" [class.px-3]=\"isDark\">\n    <li *ngFor=\"let item of items; let i = index\"\n        class=\"breadcrumb-item\"\n        [class.active]=\"item.isActive\"\n        [attr.aria-current]=\"item.isActive ? 'page' : null\">\n\n      <it-icon *ngIf=\"item.iconName\"\n                [name]=\"item.iconName\"\n                [color]=\"isDark ? 'white' : 'secondary'\"\n                size=\"sm\"\n                class=\"align-top me-1\"></it-icon>\n\n      <it-link *ngIf=\"!item.isActive && !isLastItem(i); else activeContent\"\n                [href]=\"item.href\" [class]=\"item.class\" [externalLink]=\"item.externalLink\" [disabled]=\"item.disabled\">\n        <ng-container *ngTemplateOutlet=\"item.htmlContent\"></ng-container>\n      </it-link>\n\n      <ng-template #activeContent>\n        <ng-container *ngTemplateOutlet=\"item.htmlContent\"></ng-container>\n      </ng-template>\n\n      <span *ngIf=\"!isLastItem(i)\" class=\"separator\">{{separator}}</span>\n    </li>\n  </ol>\n</nav>\n"
        },
        {
            "name": "BreadcrumbItemComponent",
            "id": "component-BreadcrumbItemComponent-8bd4c203dcb41c4a1b1a95c08c13af0c60b043291a560c85caebb62e3b7cf060a93783694824ec743b1f91859e731cef6866d4b24dc00c5a49262507cf7f1ce4",
            "file": "projects/design-angular-kit/src/lib/components/navigation/breadcrumbs/breadcrumb-item/breadcrumb-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-breadcrumb-item",
            "styleUrls": [
                "./breadcrumb-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./breadcrumb-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs active breadcrumb item\n",
                    "description": "<p>Is active breadcrumb item</p>\n",
                    "line": 16,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "iconName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of icon to show\n",
                    "description": "<p>The name of icon to show</p>\n",
                    "line": 21,
                    "type": "IconName",
                    "decorators": []
                },
                {
                    "name": "class",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCustom class\n",
                    "description": "<p>Custom class</p>\n",
                    "line": 34,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "LinkComponent"
                    }
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs disabled link\n",
                    "description": "<p>Is disabled link</p>\n",
                    "line": 29,
                    "type": "BooleanInput",
                    "decorators": [],
                    "inheritance": {
                        "file": "LinkComponent"
                    }
                },
                {
                    "name": "externalLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs an external link (false to not use Angular router link)\n",
                    "description": "<p>Is an external link (false to not use Angular router link)</p>\n",
                    "line": 24,
                    "type": "BooleanInput",
                    "decorators": [],
                    "inheritance": {
                        "file": "LinkComponent"
                    }
                },
                {
                    "name": "href",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe router link action\n\nCommands to pass to Router#createUrlTree.\n- array: commands to pass to Router#createUrlTree.\n- string: shorthand for array of commands with just the string, i.e. ['/route']\n- null|undefined: Disables the link by removing the href\n",
                    "description": "<p>The router link action</p>\n<p>Commands to pass to Router#createUrlTree.</p>\n<ul>\n<li>array: commands to pass to Router#createUrlTree.</li>\n<li>string: shorthand for array of commands with just the string, i.e. [&#39;/route&#39;]</li>\n<li>null|undefined: Disables the link by removing the href</li>\n</ul>\n",
                    "line": 19,
                    "type": "any[] | string | null",
                    "decorators": [],
                    "inheritance": {
                        "file": "LinkComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "htmlContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "<p>The content of item</p>\n",
                    "line": 27,
                    "rawdescription": "\n\nThe content of item\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TemplateRef"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "LinkComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, TemplateRef, ViewChild } from '@angular/core';\nimport { BooleanInput, isTrueBooleanInput } from '../../../../utils/boolean-input';\nimport { IconName } from '../../../../interfaces/icon';\nimport { LinkComponent } from '../../../core/link/link.component';\n\n@Component({\n  selector: 'it-breadcrumb-item',\n  templateUrl: './breadcrumb-item.component.html',\n  styleUrls: ['./breadcrumb-item.component.scss']\n})\nexport class BreadcrumbItemComponent extends LinkComponent {\n\n  /**\n   * Is active breadcrumb item\n   */\n  @Input() active?: BooleanInput;\n\n  /**\n   * The name of icon to show\n   */\n  @Input() iconName?: IconName;\n\n  /**\n   * The content of item\n   */\n  @ViewChild(TemplateRef)\n  public htmlContent!: TemplateRef<any>;\n\n  get isActive(): boolean {\n    return isTrueBooleanInput(this.active);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./breadcrumb-item.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "LinkComponent",
            "accessors": {
                "isActive": {
                    "name": "isActive",
                    "getSignature": {
                        "name": "isActive",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 29
                    }
                }
            },
            "templateData": "<ng-template>\n  <ng-content></ng-content>\n</ng-template>\n"
        },
        {
            "name": "CalloutComponent",
            "id": "component-CalloutComponent-816c969bbddcf9b9d80ae3dc9e6c2b58ff3bf9cf2a4cca54ed32b79907efb942f09fd84830d04f11d35cb45edfcc3d9e35b30fd3874e82d2417ba49c936c9620",
            "file": "projects/design-angular-kit/src/lib/components/core/callout/callout.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-callout",
            "styleUrls": [],
            "styles": [
                "\n    .callout-big-text:empty {\n      display: none;\n    }\n  "
            ],
            "templateUrl": [
                "./callout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appearance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1507,
                            "end": 1527,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 1508,
                                "end": 1515,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>default</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nCallout appearance\n- <b>default</b>\n- <b>highlight</b>: Callout version with border only on the left side\n- <b>more</b>: It looks radically different from the other styles available and is suitable for more extensive texts\n",
                    "description": "<p>Callout appearance</p>\n<ul>\n<li><b>default</b></li>\n<li><b>highlight</b>: Callout version with border only on the left side</li>\n<li><b>more</b>: It looks radically different from the other styles available and is suitable for more extensive texts</li>\n</ul>\n",
                    "line": 50,
                    "type": "CalloutAppearance",
                    "decorators": []
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCallout color\n- <b>success</b>\n- <b>danger</b>\n- <b>warning</b>\n- <b>important</b>\n- <b>note</b>\n",
                    "description": "<p>Callout color</p>\n<ul>\n<li><b>success</b></li>\n<li><b>danger</b></li>\n<li><b>warning</b></li>\n<li><b>important</b></li>\n<li><b>note</b></li>\n</ul>\n",
                    "line": 39,
                    "type": "CalloutColor | undefined",
                    "decorators": []
                },
                {
                    "name": "hiddenLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCallout hiddenLabel\n",
                    "description": "<p>Callout hiddenLabel</p>\n",
                    "line": 27,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCustom icon\n",
                    "description": "<p>Custom icon</p>\n",
                    "line": 57,
                    "type": "IconName | undefined",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCallout label\n",
                    "description": "<p>Callout label</p>\n",
                    "line": 20,
                    "type": "string | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_appearance",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CalloutAppearance",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_color",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CalloutColor | undefined",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_hiddenLabel",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_icon",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconName | undefined",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_label",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {CalloutAppearance, CalloutColor} from \"../../../interfaces/core\";\nimport { IconName } from '../../../interfaces/icon';\n\n@Component({\n  selector: 'it-callout',\n  templateUrl: './callout.component.html',\n  styles: [`\n    .callout-big-text:empty {\n      display: none;\n    }\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CalloutComponent {\n\n  /**\n   * Callout label\n   */\n  @Input() set label (value: string | undefined) { this._label = value; }\n  get label (): string | undefined { return this._label; }\n  private _label: string | undefined = undefined;\n\n  /**\n   * Callout hiddenLabel\n   */\n  @Input() set hiddenLabel (value: string | undefined) { this._hiddenLabel = value; }\n  get hiddenLabel (): string | undefined { return this._hiddenLabel; }\n  private _hiddenLabel: string | undefined = undefined;\n\n  /**\n   * Callout color\n   * - <b>success</b>\n   * - <b>danger</b>\n   * - <b>warning</b>\n   * - <b>important</b>\n   * - <b>note</b>\n   */\n  @Input() set color (value: CalloutColor | undefined) { this._color = value; }\n  get color (): CalloutColor | undefined { return this._color; }\n  private _color: CalloutColor | undefined = undefined;\n\n  /**\n   * Callout appearance\n   * - <b>default</b>\n   * - <b>highlight</b>: Callout version with border only on the left side\n   * - <b>more</b>: It looks radically different from the other styles available and is suitable for more extensive texts\n   * @default default\n   */\n  @Input() set appearance (value: CalloutAppearance) { this._appearance = value; }\n  get appearance (): CalloutAppearance { return this._appearance; }\n  private _appearance: CalloutAppearance = 'default';\n\n  /**\n   * Custom icon\n   */\n  @Input() set icon (value: IconName | undefined) { this._icon = value; }\n  get icon(): IconName | undefined { return this._icon;}\n  private _icon: IconName | undefined = undefined;\n\n  get iconName (): IconName {\n    if (this._icon) {\n      return this._icon;\n    }\n\n    if (this.appearance === 'more') {\n      return 'zoom-in';\n    }\n\n    switch (this.color) {\n      case 'success':\n        return 'check-circle';\n      case 'warning':\n        return 'help-circle';\n      case 'danger':\n        return 'close-circle';\n      case 'important':\n      case 'note':\n      default:\n        return 'info-circle';\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .callout-big-text:empty {\n      display: none;\n    }\n  \n",
            "accessors": {
                "label": {
                    "name": "label",
                    "setSignature": {
                        "name": "label",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 20,
                        "rawdescription": "\n\nCallout label\n",
                        "description": "<p>Callout label</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "label",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 21
                    }
                },
                "hiddenLabel": {
                    "name": "hiddenLabel",
                    "setSignature": {
                        "name": "hiddenLabel",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 27,
                        "rawdescription": "\n\nCallout hiddenLabel\n",
                        "description": "<p>Callout hiddenLabel</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "hiddenLabel",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 28
                    }
                },
                "color": {
                    "name": "color",
                    "setSignature": {
                        "name": "color",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "CalloutColor | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 39,
                        "rawdescription": "\n\nCallout color\n- <b>success</b>\n- <b>danger</b>\n- <b>warning</b>\n- <b>important</b>\n- <b>note</b>\n",
                        "description": "<p>Callout color</p>\n<ul>\n<li><b>success</b></li>\n<li><b>danger</b></li>\n<li><b>warning</b></li>\n<li><b>important</b></li>\n<li><b>note</b></li>\n</ul>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "CalloutColor | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "color",
                        "type": "",
                        "returnType": "CalloutColor | undefined",
                        "line": 40
                    }
                },
                "appearance": {
                    "name": "appearance",
                    "setSignature": {
                        "name": "appearance",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "CalloutAppearance",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 50,
                        "rawdescription": "\n\nCallout appearance\n- <b>default</b>\n- <b>highlight</b>: Callout version with border only on the left side\n- <b>more</b>: It looks radically different from the other styles available and is suitable for more extensive texts\n",
                        "description": "<p>Callout appearance</p>\n<ul>\n<li><b>default</b></li>\n<li><b>highlight</b>: Callout version with border only on the left side</li>\n<li><b>more</b>: It looks radically different from the other styles available and is suitable for more extensive texts</li>\n</ul>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "CalloutAppearance",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "appearance",
                        "type": "",
                        "returnType": "CalloutAppearance",
                        "line": 51
                    }
                },
                "icon": {
                    "name": "icon",
                    "setSignature": {
                        "name": "icon",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "IconName | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 57,
                        "rawdescription": "\n\nCustom icon\n",
                        "description": "<p>Custom icon</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "IconName | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "icon",
                        "type": "",
                        "returnType": "IconName | undefined",
                        "line": 58
                    }
                },
                "iconName": {
                    "name": "iconName",
                    "getSignature": {
                        "name": "iconName",
                        "type": "",
                        "returnType": "IconName",
                        "line": 61
                    }
                }
            },
            "templateData": "<div class=\"callout {{color}}\" [class.callout-highlight]=\"appearance === 'highlight'\"\n  [class.callout-more]=\"appearance === 'more'\">\n  <div class=\"callout-title\" *ngIf=\"label\">\n    <it-icon [name]=\"iconName\"></it-icon>\n    <span *ngIf=\"hiddenLabel\" class=\"visually-hidden\">{{ hiddenLabel }}</span>\n    <span>{{ label }}</span>\n  </div>\n  <p class=\"callout-big-text\">\n    <ng-content select=\"[bigText]\"></ng-content>\n  </p>\n  <ng-content></ng-content>\n</div>"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-d46add80451ce091b4fcbc893e49062209576abc708d7cf7492778feeb8f4fa950e79a33fb79dfcaefc7fbb7e692183ba93591f5d2143bcd3e3d65b707a308b7",
            "file": "projects/design-angular-kit/src/lib/components/core/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bodyClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCustom card body class\n",
                    "description": "<p>Custom card body class</p>\n",
                    "line": 46,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "cardClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCustom card class\n",
                    "description": "<p>Custom card class</p>\n",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hasImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCard with image\n",
                    "description": "<p>Card with image</p>\n",
                    "line": 26,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "rounded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTo add rounding effects\n",
                    "description": "<p>To add rounding effects</p>\n",
                    "line": 31,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "shadow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTo add shadow effects\n",
                    "description": "<p>To add shadow effects</p>\n",
                    "line": 36,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "space",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 451,
                            "end": 468,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 452,
                                "end": 459,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIt serves to space the cards in their mobile version.\n",
                    "description": "<p>It serves to space the cards in their mobile version.</p>\n",
                    "line": 16,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "teaser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTo create cards with short or \"preview\" content\n",
                    "description": "<p>To create cards with short or &quot;preview&quot; content</p>\n",
                    "line": 21,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 9,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { AbstractComponent } from '../../../abstracts/abstract.component';\nimport { BooleanInput, isTrueBooleanInput } from '../../../utils/boolean-input';\n\n@Component({\n  selector: 'it-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.scss']\n})\nexport class CardComponent extends AbstractComponent {\n\n  /**\n   * It serves to space the cards in their mobile version.\n   * @default true\n   */\n  @Input() space: BooleanInput = true;\n\n  /**\n   * To create cards with short or \"preview\" content\n   */\n  @Input() teaser?: BooleanInput;\n\n  /**\n   * Card with image\n   */\n  @Input() hasImage?: BooleanInput;\n\n  /**\n   * To add rounding effects\n   */\n  @Input() rounded?: BooleanInput;\n\n  /**\n   * To add shadow effects\n   */\n  @Input() shadow?: BooleanInput;\n\n  /**\n   * Custom card class\n   */\n  @Input() cardClass: string = '';\n\n  /**\n   * Custom card body class\n   */\n  @Input() bodyClass: string = '';\n\n  get isSpace(): boolean {\n    return isTrueBooleanInput(this.space);\n  }\n\n  get isTeaser(): boolean {\n    return isTrueBooleanInput(this.teaser);\n  }\n\n  get isHasImage(): boolean {\n    return isTrueBooleanInput(this.hasImage);\n  }\n\n  get isRounded(): boolean {\n    return isTrueBooleanInput(this.rounded);\n  }\n\n  get isShadow(): boolean {\n    return isTrueBooleanInput(this.shadow);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card-body:empty {\n  display: none;\n}\n",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "AbstractComponent",
            "accessors": {
                "isSpace": {
                    "name": "isSpace",
                    "getSignature": {
                        "name": "isSpace",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 48
                    }
                },
                "isTeaser": {
                    "name": "isTeaser",
                    "getSignature": {
                        "name": "isTeaser",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 52
                    }
                },
                "isHasImage": {
                    "name": "isHasImage",
                    "getSignature": {
                        "name": "isHasImage",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 56
                    }
                },
                "isRounded": {
                    "name": "isRounded",
                    "getSignature": {
                        "name": "isRounded",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 60
                    }
                },
                "isShadow": {
                    "name": "isShadow",
                    "getSignature": {
                        "name": "isShadow",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 64
                    }
                }
            },
            "templateData": "<div class=\"card-wrapper\" [class.card-space]=\"isSpace\">\n  <div class=\"card {{cardClass}}\"\n       [class.card-teaser]=\"isTeaser\"\n       [class.card-img.no-after]=\"isHasImage\"\n       [class.shadow]=\"isShadow\"\n       [class.rounded]=\"isRounded\">\n\n    <ng-content select=\"[beforeBody]\"></ng-content>\n\n    <div class=\"card-body {{bodyClass}}\">\n      <ng-content></ng-content>\n    </div>\n\n  </div>\n</div>\n"
        },
        {
            "name": "CarouselComponent",
            "id": "component-CarouselComponent-69996dbd6d65f6d2dac1c3294ac289f7af693c09e8f922b3a21b9e7f7edd0519d5ecb477e57dab2733055ace9ed1715e601ec8de759156a689d006a5367bb170",
            "file": "projects/design-angular-kit/src/lib/components/core/carousel/carousel/carousel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "itCarousel",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-carousel",
            "styleUrls": [
                "./carousel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./carousel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bigImg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTo indicate that the contained image is of a large type\n",
                    "description": "<p>To indicate that the contained image is of a large type</p>\n",
                    "line": 40,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "fullCarousel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTrue for full screen (landscape) viewing\n",
                    "description": "<p>True for full screen (landscape) viewing</p>\n",
                    "line": 35,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "lined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCard line style\n",
                    "description": "<p>Card line style</p>\n",
                    "line": 45,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe callout title\n",
                    "description": "<p>The callout title</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "trackClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCustom class in splide__track element\n",
                    "description": "<p>Custom class in splide__track element</p>\n",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 703,
                            "end": 723,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 704,
                                "end": 711,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>default</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe carousel type\n",
                    "description": "<p>The carousel type</p>\n",
                    "line": 25,
                    "type": "CarouselType",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "carousel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "carouselDiv",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'carousel'"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<CarouselItemComponent>",
                    "optional": true,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "CarouselItemComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "dispose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemoves CarouselBI features\n",
                    "description": "<p>Removes CarouselBI features</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, ContentChildren, ElementRef, Input, QueryList, ViewChild } from '@angular/core';\nimport { CarouselType } from '../../../../interfaces/core';\nimport { BooleanInput, isTrueBooleanInput } from '../../../../utils/boolean-input';\nimport { CarouselItemComponent } from '../carousel-item/carousel-item.component';\n\nimport { CarouselBI } from 'bootstrap-italia';\n\n@Component({\n  selector: 'it-carousel',\n  templateUrl: './carousel.component.html',\n  styleUrls: ['./carousel.component.scss'],\n  exportAs: 'itCarousel'\n})\nexport class CarouselComponent implements AfterViewInit {\n\n  /**\n   * The callout title\n   */\n  @Input() title?: string;\n\n  /**\n   * The carousel type\n   * @default default\n   */\n  @Input() type: CarouselType = 'default';\n\n  /**\n   * Custom class in splide__track element\n   */\n  @Input() trackClass: string = '';\n\n  /**\n   * True for full screen (landscape) viewing\n   */\n  @Input() fullCarousel?: BooleanInput;\n\n  /**\n   * To indicate that the contained image is of a large type\n   */\n  @Input() bigImg?: BooleanInput;\n\n  /**\n   * Card line style\n   */\n  @Input() lined?: BooleanInput;\n\n  @ContentChildren(CarouselItemComponent) items?: QueryList<CarouselItemComponent>;\n\n  @ViewChild('carousel')\n  private carouselDiv!: ElementRef<HTMLDivElement>;\n  private carousel?: any;\n\n  get typeClass(): string {\n    const typeClass = 'it-carousel-landscape-abstract';\n    return this.type === 'default' ? typeClass : typeClass + `-${this.type}`;\n  }\n\n  get isFullCarousel(): boolean {\n    return isTrueBooleanInput(this.fullCarousel);\n  }\n\n  get isBigImg(): boolean {\n    return isTrueBooleanInput(this.bigImg);\n  }\n\n  get isLined(): boolean {\n    return isTrueBooleanInput(this.lined);\n  }\n\n  ngAfterViewInit(): void {\n    this.carousel = CarouselBI.getOrCreateInstance(this.carouselDiv.nativeElement);\n  }\n\n  /**\n   * Removes CarouselBI features\n   */\n  public dispose(): void {\n    this.carousel?.dispose();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"@splidejs/splide/dist/css/splide.min\"; // Splide\n",
                    "styleUrl": "./carousel.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "AfterViewInit"
            ],
            "accessors": {
                "typeClass": {
                    "name": "typeClass",
                    "getSignature": {
                        "name": "typeClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 53
                    }
                },
                "isFullCarousel": {
                    "name": "isFullCarousel",
                    "getSignature": {
                        "name": "isFullCarousel",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 58
                    }
                },
                "isBigImg": {
                    "name": "isBigImg",
                    "getSignature": {
                        "name": "isBigImg",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 62
                    }
                },
                "isLined": {
                    "name": "isLined",
                    "getSignature": {
                        "name": "isLined",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 66
                    }
                }
            },
            "templateData": "<div class=\"it-carousel-wrapper splide {{typeClass}}\"\n     [class.it-full-carousel]=\"isFullCarousel\"\n     [class.it-big-img]=\"isBigImg\"\n     data-bs-carousel-splide #carousel>\n\n  <div class=\"it-header-block\" *ngIf=\"title\">\n    <div class=\"it-header-block-title\">\n      <h2>{{title}}</h2>\n    </div>\n  </div>\n\n  <div class=\"splide__track {{trackClass}}\">\n    <ul class=\"splide__list\">\n      <li *ngFor=\"let item of items\" class=\"splide__slide\" [class.lined_slide]=\"isLined\">\n        <div class=\"it-single-slide-wrapper\">\n          <ng-container *ngTemplateOutlet=\"item.htmlContent\"></ng-container>\n        </div>\n      </li>\n    </ul>\n  </div>\n</div>\n"
        },
        {
            "name": "CarouselItemComponent",
            "id": "component-CarouselItemComponent-09ec619138f5397aa6520467d17ce832e740fae0af857bff60cfa6ffbb08c6d7e1a82987005a3db147cd3e12a146b955f97eeca0603adc2a26f98fcfa0f3a608",
            "file": "projects/design-angular-kit/src/lib/components/core/carousel/carousel-item/carousel-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-carousel-item",
            "styleUrls": [
                "./carousel-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./carousel-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "htmlContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "<p>The content of item</p>\n",
                    "line": 14,
                    "rawdescription": "\n\nThe content of item\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TemplateRef"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, TemplateRef, ViewChild } from '@angular/core';\n\n@Component({\n  selector: 'it-carousel-item',\n  templateUrl: './carousel-item.component.html',\n  styleUrls: ['./carousel-item.component.scss']\n})\nexport class CarouselItemComponent {\n\n  /**\n   * The content of item\n   */\n  @ViewChild(TemplateRef)\n  public htmlContent!: TemplateRef<any>;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./carousel-item.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<ng-template>\n  <ng-content></ng-content>\n</ng-template>\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-38acb1b05d9a2c0ff74941217016fc874d4ac507c87d05b0c45d71a7bcc45b9d51b7d4a03b72d6c1bb3945d89f902ef0fe9bf238bc0db4ad29dc1e4879a7db5a",
            "file": "projects/design-angular-kit/src/lib/components/form/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-checkbox[id]",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf checkbox is checked\n",
                    "description": "<p>If checkbox is checked</p>\n",
                    "line": 29,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf is checkbox group\n",
                    "description": "<p>If is checkbox group</p>\n",
                    "line": 24,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "indeterminate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf checkbox is indeterminate\n",
                    "description": "<p>If checkbox is indeterminate</p>\n",
                    "line": 34,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "inline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf show checkbox inline\n",
                    "description": "<p>If show checkbox inline</p>\n",
                    "line": 19,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "toggle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf show checkbox as toggle\n",
                    "description": "<p>If show checkbox as toggle</p>\n",
                    "line": 14,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label of form control\n",
                    "description": "<p>The label of form control</p>\n",
                    "line": 14,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "validationMode",
                    "defaultValue": "'only-invalid'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 975,
                            "end": 1043,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 976,
                                "end": 983,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p><b>only-invalid</b>: Show only invalid validation color</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nValidation color display mode (validation triggered if field is touched or not pristine)\n- <b>true</b>: Always show the validation color\n- <b>false</b>: Never show validation color\n- <b>only-valid</b>: Show only valid validation color\n- <b>only-invalid</b>: Show only invalid validation color\n",
                    "description": "<p>Validation color display mode (validation triggered if field is touched or not pristine)</p>\n<ul>\n<li><b>true</b>: Always show the validation color</li>\n<li><b>false</b>: Never show validation color</li>\n<li><b>only-valid</b>: Show only valid validation color</li>\n<li><b>only-invalid</b>: Show only invalid validation color</li>\n</ul>\n",
                    "line": 24,
                    "type": "BooleanInput | \"only-valid\" | \"only-invalid\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 9,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "<p>Internal form control</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nInternal form control\n",
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "addValidators",
                    "args": [
                        {
                            "name": "validators",
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd the validators in control and parent control\n",
                    "description": "<p>Add the validators in control and parent control</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3969,
                                "end": 3979,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "validators"
                            },
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3963,
                                "end": 3968,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the validators</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "getError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.\n",
                    "description": "<p>Reports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5231,
                                "end": 5240,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5225,
                                "end": 5230,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5284,
                                "end": 5288,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5278,
                                "end": 5283,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5427,
                                "end": 5434,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>error data for that particular error. If the control or error is not present,\nnull is returned.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.\n",
                    "description": "<p>Reports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4641,
                                "end": 4650,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4635,
                                "end": 4640,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4694,
                                "end": 4698,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 4688,
                                "end": 4693,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 4837,
                                "end": 4844,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>whether the given error is present in the control at the given path.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMark the control as touched\n",
                    "description": "<p>Mark the control as touched</p>\n",
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired to check if form control is touched\n",
                    "description": "<p>Fired to check if form control is touched</p>\n",
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { AbstractFormComponent } from '../../../abstracts/abstract-form-component';\nimport { BooleanInput, isTrueBooleanInput } from '../../../utils/boolean-input';\n\n@Component({\n  selector: 'it-checkbox[id]',\n  templateUrl: './checkbox.component.html'\n})\nexport class CheckboxComponent extends AbstractFormComponent<boolean> {\n\n  /**\n   * If show checkbox as toggle\n   */\n  @Input() toggle?: BooleanInput;\n\n  /**\n   * If show checkbox inline\n   */\n  @Input() inline?: BooleanInput;\n\n  /**\n   * If is checkbox group\n   */\n  @Input() group?: BooleanInput;\n\n  /**\n   * If checkbox is checked\n   */\n  @Input() checked?: BooleanInput;\n\n  /**\n   * If checkbox is indeterminate\n   */\n  @Input() indeterminate?: BooleanInput;\n\n  get isIndeterminate(): boolean {\n    return isTrueBooleanInput(this.indeterminate);\n  }\n\n  get isGroup(): boolean {\n    return isTrueBooleanInput(this.group);\n  }\n\n  override ngOnInit() {\n    super.ngOnInit();\n\n    if (this.control.value || this.checked === undefined) {\n      return;\n    }\n\n    const value = isTrueBooleanInput(this.checked);\n    this.writeValue(value);\n    return this.onChange(value);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": "AbstractFormComponent",
            "accessors": {
                "isIndeterminate": {
                    "name": "isIndeterminate",
                    "getSignature": {
                        "name": "isIndeterminate",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 36
                    }
                },
                "isGroup": {
                    "name": "isGroup",
                    "getSignature": {
                        "name": "isGroup",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 40
                    }
                }
            },
            "templateData": "<ng-container>\n  <div class=\"form-check\"\n       [class.form-check-group]=\"isGroup\"\n       [class.form-check-inline]=\"inline\">\n\n    <div *ngIf=\"toggle; else defaultStyle\" class=\"toggles\">\n      <label [for]=\"id\">\n        <ng-container *ngTemplateOutlet=\"htmlLabel\"></ng-container>\n        <input [id]=\"id\"\n               type=\"checkbox\"\n               [formControl]=\"control\"\n               [attr.aria-describedby]=\"id + '-help'\">\n        <span class=\"lever\"></span>\n      </label>\n    </div>\n\n    <ng-template #defaultStyle>\n      <input [id]=\"id\"\n             type=\"checkbox\"\n             class=\"form-check-input\"\n             [class.is-invalid]=\"isInvalid\"\n             [class.is-valid]=\"isValid\"\n             [class.semi-checked]=\"isIndeterminate\"\n             [formControl]=\"control\"\n             [attr.aria-describedby]=\"id + '-help'\">\n      <label class=\"form-check-label\" [for]=\"id\">\n        <ng-container *ngTemplateOutlet=\"htmlLabel\"></ng-container>\n      </label>\n    </ng-template>\n\n    <small *ngIf=\"isGroup\" [id]=\"id + '-help'\" class=\"form-text\">\n      <ng-content></ng-content>\n    </small>\n\n    <div *ngIf=\"isInvalid && isGroup\" class=\"form-feedback just-validate-error-label\" [id]=\"id + '-error'\">\n      <ng-container *ngTemplateOutlet=\"error\"></ng-container>\n    </div>\n  </div>\n\n  <div *ngIf=\"isInvalid && !isGroup\" class=\"form-feedback just-validate-error-label\" [id]=\"id + '-error'\">\n    <ng-container *ngTemplateOutlet=\"error\"></ng-container>\n  </div>\n</ng-container>\n\n<ng-template #error>\n  <div #customError>\n    <ng-content select=\"[error]\"></ng-content>\n  </div>\n  <ng-container *ngIf=\"!customError.hasChildNodes()\">{{invalidMessage | async}}</ng-container>\n</ng-template>\n\n<ng-template #htmlLabel>\n  <div #customLabel>\n    <ng-content select=\"[label]\"></ng-content>\n  </div>\n  <ng-container *ngIf=\"!customLabel.hasChildNodes()\">{{label}}</ng-container>\n</ng-template>\n"
        },
        {
            "name": "ChipComponent",
            "id": "component-ChipComponent-67c38fc408570d2a3b16dd0c601ecefa3e3ef1d5a1020067607f5aab21584d8dd5aa2221922cc63e8ab608ee95d72d8e8d00b378fce4819d420cce4deb6634b2",
            "file": "projects/design-angular-kit/src/lib/components/core/chip/chip.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-chip",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./chip.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "altAvatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica il valore da aggiungere al parametro alt, di default ''\n",
                    "description": "<p>Indica il valore da aggiungere al parametro alt, di default &#39;&#39;</p>\n",
                    "line": 65,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica l'url dell'avatar, se valorizzata viene mostrata\n",
                    "description": "<p>Indica l&#39;url dell&#39;avatar, se valorizzata viene mostrata</p>\n",
                    "line": 58,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica il colore della chip\n",
                    "description": "<p>Indica il colore della chip</p>\n",
                    "line": 37,
                    "type": "ChipColor | undefined",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica se la chip è disabilitata\n",
                    "description": "<p>Indica se la chip è disabilitata</p>\n",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica il nome dell'icona, se valorizzata viene mostrata\n",
                    "description": "<p>Indica il nome dell&#39;icona, se valorizzata viene mostrata</p>\n",
                    "line": 51,
                    "type": "IconName | undefined",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica la label\n",
                    "description": "<p>Indica la label</p>\n",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showCloseButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica se mostrate il pulante di chisura\n",
                    "description": "<p>Indica se mostrate il pulante di chisura</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica il size\n",
                    "description": "<p>Indica il size</p>\n",
                    "line": 30,
                    "type": "string | \"lg\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "close",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvento emesso al click sul bottone di chiusura\n",
                    "description": "<p>Evento emesso al click sul bottone di chiusura</p>\n",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_altAvatar",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_avatar",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_color",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChipColor | undefined",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_icon",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconName | undefined",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_showCloseButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_size",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | \"lg\"",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "iconClose",
                    "defaultValue": "'close'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconName",
                    "optional": false,
                    "description": "",
                    "line": 74
                }
            ],
            "methodsClass": [
                {
                    "name": "clickToClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { IconName } from '../../../interfaces/icon';\n\nexport type ChipColor = 'primary' | 'secondary' | 'success' | 'danger' | 'warning';\n\n@Component({\n  selector: 'it-chip',\n  templateUrl: './chip.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ChipComponent {\n\n  /**\n   * Indica la label\n  */\n  @Input() set label (value: string) { this._label = value; }\n  get label (): string { return this._label; }\n  private _label = '';\n\n  /**\n   * Indica se mostrate il pulante di chisura\n  */\n  @Input() set showCloseButton (value: boolean) { this._showCloseButton = value; }\n  get showCloseButton (): boolean { return this._showCloseButton; }\n  private _showCloseButton = false;\n\n  /**\n   * Indica il size\n  */\n  @Input() set size (value: '' | 'lg') { this._size = value; }\n  get size (): '' | 'lg' { return this._size; }\n  private _size: '' | 'lg'  = '';\n\n  /**\n   * Indica il colore della chip\n  */\n  @Input() set color (value: ChipColor | undefined) { this._color = value; }\n  get color (): ChipColor | undefined { return this._color; }\n  private _color: ChipColor | undefined  = undefined;\n\n  /**\n   * Indica se la chip è disabilitata\n  */\n  @Input() set disabled (value: boolean) { this._disabled = value; }\n  get disabled (): boolean { return this._disabled; }\n  private _disabled: boolean  = false;\n\n  /**\n   * Indica il nome dell'icona, se valorizzata viene mostrata\n  */\n  @Input() set icon (value: IconName | undefined) { this._icon = value; }\n  get icon (): IconName | undefined { return this._icon; }\n  private _icon: IconName | undefined  = undefined;\n\n  /**\n   * Indica l'url dell'avatar, se valorizzata viene mostrata\n  */\n  @Input() set avatar (value: string | undefined) { this._avatar = value; }\n  get avatar (): string | undefined { return this._avatar; }\n  private _avatar: string | undefined  = undefined;\n\n  /**\n   * Indica il valore da aggiungere al parametro alt, di default ''\n  */\n  @Input() set altAvatar (value: string) { this._altAvatar = value; }\n  get altAvatar (): string { return this._altAvatar; }\n  private _altAvatar: string  = '';\n\n  /**\n   * Evento emesso al click sul bottone di chiusura\n  */\n  @Output() close = new EventEmitter();\n\n  iconClose: IconName = 'close';\n\n  clickToClose(): void {\n    this.close.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "label": {
                    "name": "label",
                    "setSignature": {
                        "name": "label",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "rawdescription": "\n\nIndica la label\n",
                        "description": "<p>Indica la label</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "label",
                        "type": "string",
                        "returnType": "string",
                        "line": 17
                    }
                },
                "showCloseButton": {
                    "name": "showCloseButton",
                    "setSignature": {
                        "name": "showCloseButton",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 23,
                        "rawdescription": "\n\nIndica se mostrate il pulante di chisura\n",
                        "description": "<p>Indica se mostrate il pulante di chisura</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "showCloseButton",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 24
                    }
                },
                "size": {
                    "name": "size",
                    "setSignature": {
                        "name": "size",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | \"lg\"",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 30,
                        "rawdescription": "\n\nIndica il size\n",
                        "description": "<p>Indica il size</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | \"lg\"",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "size",
                        "type": "",
                        "returnType": "string | \"lg\"",
                        "line": 31
                    }
                },
                "color": {
                    "name": "color",
                    "setSignature": {
                        "name": "color",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "ChipColor | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 37,
                        "rawdescription": "\n\nIndica il colore della chip\n",
                        "description": "<p>Indica il colore della chip</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "ChipColor | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "color",
                        "type": "",
                        "returnType": "ChipColor | undefined",
                        "line": 38
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 44,
                        "rawdescription": "\n\nIndica se la chip è disabilitata\n",
                        "description": "<p>Indica se la chip è disabilitata</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 45
                    }
                },
                "icon": {
                    "name": "icon",
                    "setSignature": {
                        "name": "icon",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "IconName | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 51,
                        "rawdescription": "\n\nIndica il nome dell'icona, se valorizzata viene mostrata\n",
                        "description": "<p>Indica il nome dell&#39;icona, se valorizzata viene mostrata</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "IconName | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "icon",
                        "type": "",
                        "returnType": "IconName | undefined",
                        "line": 52
                    }
                },
                "avatar": {
                    "name": "avatar",
                    "setSignature": {
                        "name": "avatar",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 58,
                        "rawdescription": "\n\nIndica l'url dell'avatar, se valorizzata viene mostrata\n",
                        "description": "<p>Indica l&#39;url dell&#39;avatar, se valorizzata viene mostrata</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "avatar",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 59
                    }
                },
                "altAvatar": {
                    "name": "altAvatar",
                    "setSignature": {
                        "name": "altAvatar",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 65,
                        "rawdescription": "\n\nIndica il valore da aggiungere al parametro alt, di default ''\n",
                        "description": "<p>Indica il valore da aggiungere al parametro alt, di default &#39;&#39;</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "altAvatar",
                        "type": "string",
                        "returnType": "string",
                        "line": 66
                    }
                }
            },
            "templateData": "<div class=\"chip\" [ngClass]=\"[!showCloseButton ? 'chip-simple': 'alert', size === 'lg' ? 'chip-lg': '', color ? 'chip-' + color : '', disabled ? 'chip-disabled' : '']\">\n    <svg *ngIf=\"icon\" class=\"icon icon-xs\"><use [attr.href]=\"'/bootstrap-italia/dist/svg/sprites.svg#it-' + icon\" [attr.xlink:href]=\"'/bootstrap-italia/dist/svg/sprites.svg#it-' + icon\"></use></svg>\n    <div *ngIf=\"avatar\" class=\"avatar size-xs\">\n        <img [src]=\"avatar\" [alt]=\"altAvatar\">\n    </div>\n    <span class=\"chip-label\">{{ label }}</span>\n    <button *ngIf=\"showCloseButton\" (click)=\"clickToClose()\" [disabled]=\"disabled\">\n        <svg class=\"icon\"><use href=\"/bootstrap-italia/dist/svg/sprites.svg#it-close\" xlink:href=\"/bootstrap-italia/dist/svg/sprites.svg#it-close\"></use></svg>\n        <span class=\"visually-hidden\">{{ 'it.core.remove' | translate }} {{ label }}</span>\n    </button>\n</div>"
        },
        {
            "name": "CollapseComponent",
            "id": "component-CollapseComponent-fccf2cbe5bfce22814c7ce88d879c6dddb4c99af21192e150da7c803efa19287900e31249fa43f3016cfaa0d6a9955fbb0c3a11dab5182ea0de614c3fe32dce9",
            "file": "projects/design-angular-kit/src/lib/components/core/collapse/collapse.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "itCollapse",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-collapse[id]",
            "styleUrls": [
                "./collapse.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./collapse.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "class",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCustom class\n",
                    "description": "<p>Custom class</p>\n",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "multi",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEnable multiple collapse\n",
                    "description": "<p>Enable multiple collapse</p>\n",
                    "line": 18,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 9,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "onHidden",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event is raised when the tooltip has finished being hidden from the user (it will wait for the CSS transitions to complete).\n",
                    "description": "<p>This event is raised when the tooltip has finished being hidden from the user (it will wait for the CSS transitions to complete).</p>\n",
                    "line": 43,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "onHide",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event fires immediately when the hide method is called.\n",
                    "description": "<p>This event fires immediately when the hide method is called.</p>\n",
                    "line": 38,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event fires immediately when the show method is called.\n",
                    "description": "<p>This event fires immediately when the show method is called.</p>\n",
                    "line": 28,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "onShown",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event is triggered when the tooltip has been made visible to the user (it will wait for the CSS transitions to complete).\n",
                    "description": "<p>This event is triggered when the tooltip has been made visible to the user (it will wait for the CSS transitions to complete).</p>\n",
                    "line": 33,
                    "type": "EventEmitter<Event>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "collapse",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "collapseDiv",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'collapse'"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "element",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        121,
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "dispose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEliminates the possibility of an item being resealable\n",
                    "description": "<p>Eliminates the possibility of an item being resealable</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHides a resealable item\nNOTE: Returns to the caller before the collapsable element has actually been hidden (onHidden Event)\n",
                    "description": "<p>Hides a resealable item\nNOTE: Returns to the caller before the collapsable element has actually been hidden (onHidden Event)</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShows a resealable item\nNOTE: Returns to the caller before the collapsable element has actually been shown (onShown event).\n",
                    "description": "<p>Shows a resealable item\nNOTE: Returns to the caller before the collapsable element has actually been shown (onShown event).</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle a collapsible item to show or hide it.\nNOTE: Returns to the caller before the collapsable element has actually been shown or hidden (onShown and onHidden events)\n",
                    "description": "<p>Toggle a collapsible item to show or hide it.\nNOTE: Returns to the caller before the collapsable element has actually been shown or hidden (onShown and onHidden events)</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, Input, Output, Renderer2, ViewChild } from '@angular/core';\nimport { AbstractComponent } from '../../../abstracts/abstract.component';\nimport { BooleanInput, isTrueBooleanInput } from '../../../utils/boolean-input';\n\nimport { Collapse } from 'bootstrap-italia';\n\n@Component({\n  selector: 'it-collapse[id]',\n  templateUrl: './collapse.component.html',\n  styleUrls: ['./collapse.component.scss'],\n  exportAs: 'itCollapse'\n})\nexport class CollapseComponent extends AbstractComponent {\n\n  /**\n   * Enable multiple collapse\n   */\n  @Input() multi?: BooleanInput;\n\n  /**\n   * Custom class\n   */\n  @Input() class: string = '';\n\n  /**\n   * This event fires immediately when the show method is called.\n   */\n  @Output() onShow: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * This event is triggered when the tooltip has been made visible to the user (it will wait for the CSS transitions to complete).\n   */\n  @Output() onShown: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * This event fires immediately when the hide method is called.\n   */\n  @Output() onHide: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * This event is raised when the tooltip has finished being hidden from the user (it will wait for the CSS transitions to complete).\n   */\n  @Output() onHidden: EventEmitter<Event> = new EventEmitter();\n\n  private readonly element: HTMLElement;\n  private collapse?: any;\n\n  @ViewChild('collapse')\n  private collapseDiv!: ElementRef<HTMLDivElement>;\n\n  get isMulti(): boolean {\n    return isTrueBooleanInput(this.multi);\n  }\n\n  constructor(\n    override readonly _renderer: Renderer2,\n    override readonly _elementRef: ElementRef\n  ) {\n    super(_renderer, _elementRef);\n    this.element = this._elementRef.nativeElement;\n  }\n\n  override ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    this._renderer.removeAttribute(this._elementRef.nativeElement, 'class');\n    this.collapse = Collapse.getOrCreateInstance(this.collapseDiv.nativeElement, {\n      toggle: false\n    });\n\n    this.element.addEventListener('show.bs.collapse', event => this.onShow.emit(event));\n    this.element.addEventListener('shown.bs.collapse', event => this.onShown.emit(event));\n    this.element.addEventListener('hide.bs.collapse', event => this.onHide.emit(event));\n    this.element.addEventListener('hidden.bs.collapse', event => this.onHidden.emit(event));\n  }\n\n  /**\n   * Shows a resealable item\n   * NOTE: Returns to the caller before the collapsable element has actually been shown (onShown event).\n   */\n  public show(): void {\n    this.collapse?.show();\n  }\n\n  /**\n   * Hides a resealable item\n   * NOTE: Returns to the caller before the collapsable element has actually been hidden (onHidden Event)\n   */\n  public hide(): void {\n    this.collapse?.hide();\n  }\n\n  /**\n   * Toggle a collapsible item to show or hide it.\n   * NOTE: Returns to the caller before the collapsable element has actually been shown or hidden (onShown and onHidden events)\n   */\n  public toggle(): void {\n    this.collapse?.toggle();\n  }\n\n  /**\n   * Eliminates the possibility of an item being resealable\n   */\n  public dispose(): void {\n    this.collapse?.dispose();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./collapse.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 53,
                "jsdoctags": [
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "AbstractComponent",
            "accessors": {
                "isMulti": {
                    "name": "isMulti",
                    "getSignature": {
                        "name": "isMulti",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 51
                    }
                }
            },
            "templateData": "<div [id]=\"id\" class=\"collapse {{class}}\" [class.multi-collapse]=\"isMulti\" #collapse>\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "DimmerButtonsComponent",
            "id": "component-DimmerButtonsComponent-bc6db15b98d6a1f63e6bfeb6ceb220ca18c4bd7168a289342c63af861aee142c3dcf89da5d662ef01ea66f4e6730f824fea8c1dbad64ebe23af8812d0f1ef308",
            "file": "projects/design-angular-kit/src/lib/components/core/dimmer/dimmer-buttons/dimmer-buttons.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-dimmer-buttons",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dimmer-buttons.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "hasOneButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 313,
                            "end": 330,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 314,
                                "end": 321,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIndica se abbiamo 1 solo bottone\n",
                    "description": "<p>Indica se abbiamo 1 solo bottone</p>\n",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_hasOneButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'it-dimmer-buttons',\n  templateUrl: './dimmer-buttons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DimmerButtonsComponent {\n\n  /**\n   * Indica se abbiamo 1 solo bottone\n   * @default false\n  */\n  @Input() set hasOneButton (value: boolean) {this._hasOneButton = value};\n  get hasOneButton() {return this._hasOneButton; }\n  private _hasOneButton = false;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "hasOneButton": {
                    "name": "hasOneButton",
                    "setSignature": {
                        "name": "hasOneButton",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 14,
                        "rawdescription": "\n\nIndica se abbiamo 1 solo bottone\n",
                        "description": "<p>Indica se abbiamo 1 solo bottone</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "hasOneButton",
                        "type": "",
                        "returnType": "",
                        "line": 15
                    }
                }
            },
            "templateData": "<div class=\"dimmer-buttons bg-dark\" [ngClass]=\"{'single-button': hasOneButton}\">\n    <ng-content></ng-content>\n</div>"
        },
        {
            "name": "DimmerComponent",
            "id": "component-DimmerComponent-f641aff163a1f1dff721b6bf100c9d845473566612510e1ed863eae3b6623466c4b90c77cae37569e51894c220e5b4ab884de720c1ebfb51c68f69db8b244ae0",
            "file": "projects/design-angular-kit/src/lib/components/core/dimmer/dimmer.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-dimmer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dimmer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 712,
                            "end": 729,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 713,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDimmer status\n",
                    "description": "<p>Dimmer status</p>\n",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 896,
                            "end": 910,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 897,
                                "end": 904,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>&#39;&#39;</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nColore del dimmer\n",
                    "description": "<p>Colore del dimmer</p>\n",
                    "line": 36,
                    "type": "DimmerColor",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_active",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_color",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DimmerColor",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { animate, style, transition, trigger } from '@angular/animations';\nimport { ChangeDetectionStrategy, Component, ElementRef, Input, OnInit } from '@angular/core';\n\nexport type DimmerColor = '' | 'dimmer-primary';\n\n@Component({\n  selector: 'it-dimmer',\n  templateUrl: './dimmer.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('fade', [\n        transition(':enter', [\n            style({ opacity: 0 }),\n            animate('150ms', style({ opacity: 0.92 })),\n        ]),\n        transition(':leave', [\n            animate('150ms', style({ opacity: 0 })),\n        ]),\n    ])\n]\n})\nexport class DimmerComponent implements OnInit {\n\n  /**\n   * Dimmer status\n   * @default false\n  */\n  @Input() set active (value: boolean) {this._active = value};\n  get active() {return this._active; }\n  private _active = false;\n\n  /**\n   * Colore del dimmer\n   * @default ''\n  */\n  @Input() set color (value: DimmerColor) {this._color = value};\n  get color() {return this._color; }\n  private _color: DimmerColor = '';\n\n  constructor(\n    private elementRef: ElementRef\n  ) {}\n\n  ngOnInit(): void {\n    this.elementRef?.nativeElement?.parentElement?.classList?.add('dimmable');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "active": {
                    "name": "active",
                    "setSignature": {
                        "name": "active",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 28,
                        "rawdescription": "\n\nDimmer status\n",
                        "description": "<p>Dimmer status</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "active",
                        "type": "",
                        "returnType": "",
                        "line": 29
                    }
                },
                "color": {
                    "name": "color",
                    "setSignature": {
                        "name": "color",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "DimmerColor",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 36,
                        "rawdescription": "\n\nColore del dimmer\n",
                        "description": "<p>Colore del dimmer</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "DimmerColor",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "color",
                        "type": "",
                        "returnType": "",
                        "line": 37
                    }
                }
            },
            "templateData": "<div class=\"dimmer\" *ngIf=\"active\" @fade [ngClass]=\"[color]\">\n  <div class=\"dimmer-inner\">\n    <ng-content></ng-content>\n  </div>\n</div>"
        },
        {
            "name": "DimmerIconComponent",
            "id": "component-DimmerIconComponent-3f154bfa125f64083893ede4ddadd50dc964ee3492eebad08d3e86867f7a9b34d14e3c6b7b0faa189327b4ebf6071f384563022967c9bd8235f098590182d84b",
            "file": "projects/design-angular-kit/src/lib/components/core/dimmer/dimmer-icon/dimmer-icon.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-dimmer-icon",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dimmer-icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'it-dimmer-icon',\n  templateUrl: './dimmer-icon.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DimmerIconComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div class=\"dimmer-icon\">\n    <ng-content></ng-content>\n</div>"
        },
        {
            "name": "DropdownComponent",
            "id": "component-DropdownComponent-06ed9a083ff16a1dd4bd0db09ef0b86d1ae3a42b7a10ccf6c1d09362aaf5d6b4cd73e77cdf28b2eebc019b8a98cf8010d6a6f87a73d8dc2b86531b603f2f58f8",
            "file": "projects/design-angular-kit/src/lib/components/core/dropdown/dropdown/dropdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-dropdown[id]",
            "styleUrls": [
                "./dropdown.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dropdown.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nButton color\n",
                    "description": "<p>Button color</p>\n",
                    "line": 17,
                    "type": "ButtonColor",
                    "decorators": []
                },
                {
                    "name": "dark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDark menu style\n",
                    "description": "<p>Dark menu style</p>\n",
                    "line": 35,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "direction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTo open menu items to:\n- <strong>dropup</strong>: up\n- <strong>dropend</strong>: right\n- <strong>dropstart</strong>: left\n",
                    "description": "<p>To open menu items to:</p>\n<ul>\n<li><strong>dropup</strong>: up</li>\n<li><strong>dropend</strong>: right</li>\n<li><strong>dropstart</strong>: left</li>\n</ul>\n",
                    "line": 25,
                    "type": "DropdownDirection",
                    "decorators": []
                },
                {
                    "name": "fullWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTo get a dropdown menu as wide as the element containing the dropdown button\n",
                    "description": "<p>To get a dropdown menu as wide as the element containing the dropdown button</p>\n",
                    "line": 30,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 9,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<DropdownItemComponent>",
                    "optional": true,
                    "description": "<p>The dropdown items</p>\n",
                    "line": 40,
                    "rawdescription": "\n\nThe dropdown items\n",
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "DropdownItemComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDarkItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet child items dark mode\n",
                    "description": "<p>Set child items dark mode</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1868,
                                "end": 1875,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ContentChildren, Input, OnChanges, QueryList, SimpleChanges } from '@angular/core';\nimport { AbstractComponent } from '../../../../abstracts/abstract.component';\nimport { ButtonColor, DropdownDirection } from '../../../../interfaces/core';\nimport { BooleanInput, isTrueBooleanInput } from '../../../../utils/boolean-input';\nimport { DropdownItemComponent } from '../dropdown-item/dropdown-item.component';\n\n@Component({\n  selector: 'it-dropdown[id]',\n  templateUrl: './dropdown.component.html',\n  styleUrls: ['./dropdown.component.scss']\n})\nexport class DropdownComponent extends AbstractComponent implements OnChanges {\n\n  /**\n   * Button color\n   */\n  @Input() color?: ButtonColor;\n\n  /**\n   * To open menu items to:\n   * - <strong>dropup</strong>: up\n   * - <strong>dropend</strong>: right\n   * - <strong>dropstart</strong>: left\n   */\n  @Input() direction?: DropdownDirection;\n\n  /**\n   * To get a dropdown menu as wide as the element containing the dropdown button\n   */\n  @Input() fullWidth?: BooleanInput;\n\n  /**\n   * Dark menu style\n   */\n  @Input() dark?: BooleanInput;\n\n  /**\n   * The dropdown items\n   */\n  @ContentChildren(DropdownItemComponent) items?: QueryList<DropdownItemComponent>;\n\n  get buttonClass(): string {\n    let btnClass = 'btn dropdown-toggle';\n    if (this.color) {\n      btnClass += ` btn-${this.color}`;\n    } else {\n      btnClass += ` btn-dropdown`;\n    }\n\n    return btnClass;\n  }\n\n  get isFullWidth(): boolean {\n    return isTrueBooleanInput(this.fullWidth);\n  }\n\n  get isDark(): boolean {\n    return isTrueBooleanInput(this.dark);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['dark'] && !changes['dark'].firstChange) {\n      this.setDarkItems();\n    }\n  }\n\n  override ngAfterViewInit() {\n    super.ngAfterViewInit();\n    this.setDarkItems();\n  }\n\n  /**\n   * Set child items dark mode\n   * @private\n   */\n  private setDarkItems(): void {\n    this.items?.forEach(item => {\n      item.setDark(this.isDark);\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".link-list-heading:empty {\n  display: none;\n}\n",
                    "styleUrl": "./dropdown.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "AbstractComponent",
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "buttonClass": {
                    "name": "buttonClass",
                    "getSignature": {
                        "name": "buttonClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 42
                    }
                },
                "isFullWidth": {
                    "name": "isFullWidth",
                    "getSignature": {
                        "name": "isFullWidth",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 53
                    }
                },
                "isDark": {
                    "name": "isDark",
                    "getSignature": {
                        "name": "isDark",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 57
                    }
                }
            },
            "templateData": "<div class=\"dropdown {{direction}}\">\n  <button [id]=\"id\"\n          [class]=\"buttonClass\"\n          type=\"button\"\n          data-bs-toggle=\"dropdown\"\n          aria-haspopup=\"true\"\n          aria-expanded=\"false\">\n    <ng-content select=\"[button]\"></ng-content>\n    <it-icon class=\"icon-expand\" name=\"expand\" size=\"sm\" [color]=\"this.color ? 'light' : 'primary'\"></it-icon>\n  </button>\n\n  <div class=\"dropdown-menu\" [class.full-width]=\"isFullWidth\" [class.dark]=\"isDark\" [attr.aria-labelledby]=\"id\">\n    <div class=\"link-list-wrapper\">\n      <div class=\"link-list-heading\">\n        <ng-content select=\"[listHeading]\"></ng-content>\n      </div>\n      <ul class=\"link-list\">\n        <ng-content select=\"[list]\"></ng-content>\n      </ul>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "DropdownItemComponent",
            "id": "component-DropdownItemComponent-060667ee86912eeb3111c543e0794eda3b830fb45c230dca14b812609b7008999eccdb778414379f17bbb8a3a35236c72f4f4c7ae974b1f1353fb37907111f05",
            "file": "projects/design-angular-kit/src/lib/components/core/dropdown/dropdown-item/dropdown-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-dropdown-item",
            "styleUrls": [
                "./dropdown-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dropdown-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nActive item\n",
                    "description": "<p>Active item</p>\n",
                    "line": 21,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "divider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow divider\n",
                    "description": "<p>Show divider</p>\n",
                    "line": 16,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "iconName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of icon to show\n",
                    "description": "<p>The name of icon to show</p>\n",
                    "line": 31,
                    "type": "IconName",
                    "decorators": []
                },
                {
                    "name": "iconPosition",
                    "defaultValue": "'right'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 817,
                            "end": 835,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 818,
                                "end": 825,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>right</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe icon position\n",
                    "description": "<p>The icon position</p>\n",
                    "line": 37,
                    "type": "\"left\" | \"right\"",
                    "decorators": []
                },
                {
                    "name": "large",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTo increase the size of links\n",
                    "description": "<p>To increase the size of links</p>\n",
                    "line": 26,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "class",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCustom class\n",
                    "description": "<p>Custom class</p>\n",
                    "line": 34,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "LinkComponent"
                    }
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs disabled link\n",
                    "description": "<p>Is disabled link</p>\n",
                    "line": 29,
                    "type": "BooleanInput",
                    "decorators": [],
                    "inheritance": {
                        "file": "LinkComponent"
                    }
                },
                {
                    "name": "externalLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs an external link (false to not use Angular router link)\n",
                    "description": "<p>Is an external link (false to not use Angular router link)</p>\n",
                    "line": 24,
                    "type": "BooleanInput",
                    "decorators": [],
                    "inheritance": {
                        "file": "LinkComponent"
                    }
                },
                {
                    "name": "href",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe router link action\n\nCommands to pass to Router#createUrlTree.\n- array: commands to pass to Router#createUrlTree.\n- string: shorthand for array of commands with just the string, i.e. ['/route']\n- null|undefined: Disables the link by removing the href\n",
                    "description": "<p>The router link action</p>\n<p>Commands to pass to Router#createUrlTree.</p>\n<ul>\n<li>array: commands to pass to Router#createUrlTree.</li>\n<li>string: shorthand for array of commands with just the string, i.e. [&#39;/route&#39;]</li>\n<li>null|undefined: Disables the link by removing the href</li>\n</ul>\n",
                    "line": 19,
                    "type": "any[] | string | null",
                    "decorators": [],
                    "inheritance": {
                        "file": "LinkComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isDark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Change icon color if menu is dark</p>\n",
                    "line": 43,
                    "rawdescription": "\n\nChange icon color if menu is dark\n",
                    "jsdoctags": [
                        {
                            "pos": 942,
                            "end": 960,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 943,
                                "end": 950,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "setDark",
                    "args": [
                        {
                            "name": "dark",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dark",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "LinkComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { BooleanInput, isTrueBooleanInput } from '../../../../utils/boolean-input';\nimport { IconName } from '../../../../interfaces/icon';\nimport { LinkComponent } from '../../link/link.component';\n\n@Component({\n  selector: 'it-dropdown-item',\n  templateUrl: './dropdown-item.component.html',\n  styleUrls: ['./dropdown-item.component.scss']\n})\nexport class DropdownItemComponent extends LinkComponent {\n\n  /**\n   * Show divider\n   */\n  @Input() divider?: BooleanInput;\n\n  /**\n   * Active item\n   */\n  @Input() active?: BooleanInput;\n\n  /**\n   * To increase the size of links\n   */\n  @Input() large?: BooleanInput;\n\n  /**\n   * The name of icon to show\n   */\n  @Input() iconName?: IconName;\n\n  /**\n   * The icon position\n   * @default right\n   */\n  @Input() iconPosition: 'left' | 'right' = 'right';\n\n  /**\n   * Change icon color if menu is dark\n   * @default false\n   */\n  isDark: boolean = false;\n\n  get isDivider(): boolean {\n    return isTrueBooleanInput(this.divider);\n  }\n\n  get isActive(): boolean {\n    return isTrueBooleanInput(this.active);\n  }\n\n  get isLarge(): boolean {\n    return isTrueBooleanInput(this.large);\n  }\n\n  get linkClass(): string {\n    let linkClass = `list-item ${this.isActive ? 'active' : 'dropdown-item'}`;\n    if (this.isDisabled) {\n      linkClass += ' disabled';\n    }\n    if (this.isLarge) {\n      linkClass += ' large';\n    }\n    if (this.iconName) {\n      linkClass += ` ${this.iconPosition === 'right' ? 'right-icon' : 'left-icon'}`;\n    }\n\n    return linkClass;\n  }\n\n  constructor(\n    protected override readonly _renderer: Renderer2,\n    protected override readonly _elementRef: ElementRef,\n    private readonly _changeDetectorRef: ChangeDetectorRef\n  ) {\n    super(_renderer, _elementRef);\n  }\n\n  setDark(dark: boolean): void {\n    if (this.isDark !== dark) {\n      this.isDark = dark;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".list-item.disabled {\n  pointer-events: none;\n  cursor: default;\n}\n",
                    "styleUrl": "./dropdown-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 70,
                "jsdoctags": [
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "LinkComponent",
            "accessors": {
                "isDivider": {
                    "name": "isDivider",
                    "getSignature": {
                        "name": "isDivider",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 45
                    }
                },
                "isActive": {
                    "name": "isActive",
                    "getSignature": {
                        "name": "isActive",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 49
                    }
                },
                "isLarge": {
                    "name": "isLarge",
                    "getSignature": {
                        "name": "isLarge",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 53
                    }
                },
                "linkClass": {
                    "name": "linkClass",
                    "getSignature": {
                        "name": "linkClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 57
                    }
                }
            },
            "templateData": "<li>\n  <span *ngIf=\"isDivider; else item\" class=\"divider\"></span>\n\n  <ng-template #item>\n    <it-link [class]=\"linkClass\" [href]=\"href\" [externalLink]=\"externalLink\" [disabled]=\"disabled\">\n      <it-icon *ngIf=\"iconName && iconPosition === 'left'\"\n                size=\"sm\"\n                [name]=\"iconName\"\n                [color]=\"isDark ? 'light' : 'primary'\"\n                [class]=\"iconPosition\"></it-icon>\n\n      <span><ng-content></ng-content></span>\n\n      <it-icon *ngIf=\"iconName && iconPosition === 'right'\"\n                size=\"sm\"\n                [name]=\"iconName\"\n                [color]=\"isDark ? 'light' : 'primary'\"\n                [class]=\"iconPosition\"></it-icon>\n\n      <span *ngIf=\"isActive\" class=\"visually-hidden\">{{'it.core.active'|translate}}</span>\n    </it-link>\n  </ng-template>\n</li>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-36e58cd76821c80f69ad18115331c9bdd44abad0b8ef6dd22a3a9c30f8bfba0430683dc54885ab700905af4034cebc2ccc19a5ba33cbd4d24d4870c73231f8d5",
            "file": "projects/design-angular-kit/src/lib/components/navigation/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "light",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "loginStyle",
                    "defaultValue": "'full'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "\"none\" | \"default\" | \"full\"",
                    "decorators": []
                },
                {
                    "name": "showSearch",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "showSlim",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "slimTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "smallHeader",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 9,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "loginClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "searchClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter<Event>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, EventEmitter, Input, Output, Renderer2} from '@angular/core';\nimport {BooleanInput, isTrueBooleanInput} from \"../../../utils/boolean-input\";\nimport {AbstractComponent} from \"../../../abstracts/abstract.component\";\n\n@Component({\n  selector: 'it-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent extends AbstractComponent {\n\n  @Input() light?: BooleanInput;\n\n  @Input() showSlim?: BooleanInput = true;\n\n  @Input() slimTitle?: string;\n\n  @Input() loginStyle: 'none' | 'default' | 'full' = 'full';\n\n  @Input() smallHeader?: BooleanInput = true;\n\n  @Input() showSearch?: BooleanInput = true;\n\n  @Output() loginClick: EventEmitter<Event>;\n\n  @Output() searchClick: EventEmitter<Event>;\n\n  /**\n   * TODO: complete header\n   * @param _renderer\n   * @param _elementRef\n   */\n  constructor(\n    protected override readonly _renderer: Renderer2,\n    protected override readonly _elementRef: ElementRef\n  ) {\n    super(_renderer, _elementRef);\n    this.loginClick = new EventEmitter<Event>()\n    this.searchClick = new EventEmitter<Event>()\n  }\n\n  get isLight(): boolean {\n    return isTrueBooleanInput(this.light);\n  }\n\n  get isShowSlim(): boolean {\n    return isTrueBooleanInput(this.showSlim);\n  }\n\n  get isSmallHeader(): boolean {\n    return isTrueBooleanInput(this.smallHeader);\n  }\n\n  get isShowSearch(): boolean {\n    return isTrueBooleanInput(this.showSearch);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".nav-mobile:has(.link-list-wrapper:empty) {\n  display: none;\n}\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>TODO: complete header</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "rawdescription": "\n\nTODO: complete header\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 831,
                            "end": 840,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "_renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 825,
                            "end": 830,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 853,
                            "end": 864,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "_elementRef"
                        },
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 847,
                            "end": 852,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "extends": "AbstractComponent",
            "accessors": {
                "isLight": {
                    "name": "isLight",
                    "getSignature": {
                        "name": "isLight",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 42
                    }
                },
                "isShowSlim": {
                    "name": "isShowSlim",
                    "getSignature": {
                        "name": "isShowSlim",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 46
                    }
                },
                "isSmallHeader": {
                    "name": "isSmallHeader",
                    "getSignature": {
                        "name": "isSmallHeader",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 50
                    }
                },
                "isShowSearch": {
                    "name": "isShowSearch",
                    "getSignature": {
                        "name": "isShowSearch",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 54
                    }
                }
            },
            "templateData": "<header class=\"it-header-wrapper\">\n  <div *ngIf=\"isShowSlim\" class=\"it-header-slim-wrapper\" [class.theme-light]=\"isLight\">\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-12\">\n          <div class=\"it-header-slim-wrapper-content\">\n            <a class=\"d-none d-lg-block navbar-brand\" href=\"#\">{{slimTitle}}</a>\n            <div class=\"nav-mobile\">\n              <nav [attr.aria-label]=\"'it.navigation.secondary-navigation'|translate\">\n                <a class=\"it-opener d-lg-none\" data-bs-toggle=\"collapse\" href=\"#menuC1\" role=\"button\"\n                   aria-expanded=\"false\" aria-controls=\"menuC1\">\n                  <span>{{slimTitle}}</span>\n                  <it-icon name=\"expand\"></it-icon>\n                </a>\n                <div class=\"link-list-wrapper collapse\" id=\"menuC1\">\n                  <ng-content select=\"[slimLinkList]\"></ng-content>\n                </div>\n              </nav>\n            </div>\n            <div class=\"it-header-slim-right-zone\">\n              <!-- TODO: add language dropdown -->\n              <ng-content select=\"[slimRightZone]\"></ng-content>\n              <div *ngIf=\"loginStyle === 'default'\" class=\"it-access-top-wrapper\">\n                <a class=\"btn btn-primary btn-sm\" (click)=\"loginClick.emit($event)\">\n                  {{'it.navigation.login'|translate}}\n                </a>\n              </div>\n            </div>\n            <button *ngIf=\"loginStyle === 'full'\" itButton=\"primary\" class=\"btn-full\" (click)=\"loginClick.emit($event)\">\n              <span class=\"rounded-icon\">\n                <it-icon name=\"user\" color=\"primary\"></it-icon>\n                <span class=\"d-none d-lg-block\">{{'it.navigation.full-login'|translate}}</span>\n              </span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"it-nav-wrapper\">\n    <div class=\"it-header-center-wrapper\" [class.it-small-header]=\"isSmallHeader\">\n      <div class=\"container-fluid\">\n        <div class=\"row\">\n          <div class=\"col-12\">\n            <div class=\"it-header-center-content-wrapper\">\n              <div class=\"it-brand-wrapper\">\n                <ng-content select=\"[brand]\"></ng-content>\n              </div>\n              <div class=\"it-right-zone\">\n                <ng-content select=\"[rightZone]\"></ng-content>\n\n                <div class=\"it-search-wrapper\" *ngIf=\"isShowSearch\">\n                  <span class=\"d-none d-md-block\">{{'it.navigation.search'|translate}}</span>\n                  <a class=\"search-link rounded-icon\" [attr.aria-label]=\"'it.navigation.website-search'|translate\" (click)=\"searchClick.emit($event)\">\n                    <it-icon name=\"search\"></it-icon>\n                  </a>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- TODO: complete header -->\n  </div>\n</header>\n"
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-15d34f16ef777d93cb72a9ffe923fc38cd2e713d8b15957aabe475f3f71dc76dbaea1e395ab9a1da52efd57d6524faee792e4ece09e269f96bfbd168e3b8f4d2",
            "file": "projects/design-angular-kit/src/lib/components/utils/icon/icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-icon[name]",
            "styleUrls": [
                "./icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "class",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCustom class\n",
                    "description": "<p>Custom class</p>\n",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe icon color\n",
                    "description": "<p>The icon color</p>\n",
                    "line": 25,
                    "type": "IconColor",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe icon name\n",
                    "description": "<p>The icon name</p>\n",
                    "line": 15,
                    "type": "IconName",
                    "decorators": []
                },
                {
                    "name": "padded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate a padding proportional to the size of the surrounding icon.\n",
                    "description": "<p>Create a padding proportional to the size of the surrounding icon.</p>\n",
                    "line": 30,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe icon size\n",
                    "description": "<p>The icon size</p>\n",
                    "line": 20,
                    "type": "IconSize",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {AfterViewInit, Component, ElementRef, Input, Renderer2} from '@angular/core';\nimport {IconColor, IconName, IconSize} from \"../../../interfaces/icon\";\nimport {BooleanInput} from \"../../../utils/boolean-input\";\n\n@Component({\n  selector: 'it-icon[name]',\n  templateUrl: './icon.component.html',\n  styleUrls: ['./icon.component.scss']\n})\nexport class IconComponent implements AfterViewInit {\n\n  /**\n   * The icon name\n   */\n  @Input() name!: IconName;\n\n  /**\n   * The icon size\n   */\n  @Input() size?: IconSize;\n\n  /**\n   * The icon color\n   */\n  @Input() color?: IconColor;\n\n  /**\n   * Create a padding proportional to the size of the surrounding icon.\n   */\n  @Input() padded?: BooleanInput;\n\n  /**\n   * Custom class\n   */\n  @Input() class: string = ''\n\n  /**\n   * Return the icon href\n   */\n  get iconHref(): string {\n    return `/bootstrap-italia/dist/svg/sprites.svg#it-${this.name}`;\n  }\n\n  /**\n   * Return the icon class\n   */\n  get iconClass(): string {\n    let iconClass = 'icon';\n    if (this.size) {\n      iconClass += ` icon-${this.size}`\n    }\n    if (this.color) {\n      iconClass += ` icon-${this.color}`\n    }\n    if (this.class) {\n      iconClass += ` ${this.class}`\n    }\n    return iconClass;\n  }\n\n  constructor(\n    protected readonly _renderer: Renderer2,\n    protected readonly _elementRef: ElementRef\n  ) {\n  }\n\n  ngAfterViewInit() {\n    this._renderer.removeAttribute(this._elementRef.nativeElement, 'class');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./icon.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 59,
                "jsdoctags": [
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit"
            ],
            "accessors": {
                "iconHref": {
                    "name": "iconHref",
                    "getSignature": {
                        "name": "iconHref",
                        "type": "string",
                        "returnType": "string",
                        "line": 40,
                        "rawdescription": "\n\nReturn the icon href\n",
                        "description": "<p>Return the icon href</p>\n"
                    }
                },
                "iconClass": {
                    "name": "iconClass",
                    "getSignature": {
                        "name": "iconClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 47,
                        "rawdescription": "\n\nReturn the icon class\n",
                        "description": "<p>Return the icon class</p>\n"
                    }
                }
            },
            "templateData": "<svg [class]=\"iconClass\" [class.icon-padded]=\"padded\">\n  <use [attr.href]=\"iconHref\" [attr.xlink:href]=\"iconHref\"></use>\n</svg>\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-01e1d74b143af453f7c26b193fbd8bd99ed978576f0bf177bb88d753b37c51c9498c12d6aa9563ec0e5035068eefd62032755d6eda8f137c2402d16de87efdd3",
            "file": "projects/design-angular-kit/src/lib/components/form/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-input[id]",
            "styleUrls": [
                "./input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "adaptive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTo make the numeric field automatically resize according to the value contained in it. [Used only in type = 'number']\n",
                    "description": "<p>To make the numeric field automatically resize according to the value contained in it. [Used only in type = &#39;number&#39;]</p>\n",
                    "line": 66,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "autocompleteData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2081,
                            "end": 2103,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 2082,
                                "end": 2089,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>undefined</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIndicates the list of searchable elements on which to base the input autocomplete system [Optional. Used only in type = 'search']\nIf you need to retrieve items via API, can pass a function of Observable\n",
                    "description": "<p>Indicates the list of searchable elements on which to base the input autocomplete system [Optional. Used only in type = &#39;search&#39;]\nIf you need to retrieve items via API, can pass a function of Observable</p>\n",
                    "line": 73,
                    "type": "Array<AutocompleteItem> | ",
                    "decorators": []
                },
                {
                    "name": "autocompleteDebounceTime",
                    "defaultValue": "300",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2376,
                            "end": 2397,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 2377,
                                "end": 2384,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>300 [ms]</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nTime span [ms] has passed without another source emission, to delay data filtering.\nUseful when the user is typing multiple letters\n",
                    "description": "<p>Time span [ms] has passed without another source emission, to delay data filtering.\nUseful when the user is typing multiple letters</p>\n",
                    "line": 80,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "currency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf is a currency number [Used only in type = 'number']\n",
                    "description": "<p>If is a currency number [Used only in type = &#39;number&#39;]</p>\n",
                    "line": 56,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe input description\n",
                    "description": "<p>The input description</p>\n",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe max value [Used only in type = 'number']\n",
                    "description": "<p>The max value [Used only in type = &#39;number&#39;]</p>\n",
                    "line": 41,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe min value [Used only in type = 'number']\n",
                    "description": "<p>The min value [Used only in type = &#39;number&#39;]</p>\n",
                    "line": 46,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "percentage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf is a percentage number [Used only in type = 'number']\n",
                    "description": "<p>If is a percentage number [Used only in type = &#39;number&#39;]</p>\n",
                    "line": 61,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe input placeholder\n",
                    "description": "<p>The input placeholder</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTo prevent modification of the contained value.\n- <b>plaintext</b>: Readonly field in the form stylized as plain text\n",
                    "description": "<p>To prevent modification of the contained value.</p>\n<ul>\n<li><b>plaintext</b>: Readonly field in the form stylized as plain text</li>\n</ul>\n",
                    "line": 36,
                    "type": "BooleanInput | \"plaintext\"",
                    "decorators": []
                },
                {
                    "name": "step",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe step value [Used only in type = 'number']\n",
                    "description": "<p>The step value [Used only in type = &#39;number&#39;]</p>\n",
                    "line": 51,
                    "type": "number | \"any\"",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 783,
                            "end": 800,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 784,
                                "end": 791,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>text</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe input type\n",
                    "description": "<p>The input type</p>\n",
                    "line": 20,
                    "type": "InputControlType",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label of form control\n",
                    "description": "<p>The label of form control</p>\n",
                    "line": 14,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "validationMode",
                    "defaultValue": "'only-invalid'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 975,
                            "end": 1043,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 976,
                                "end": 983,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p><b>only-invalid</b>: Show only invalid validation color</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nValidation color display mode (validation triggered if field is touched or not pristine)\n- <b>true</b>: Always show the validation color\n- <b>false</b>: Never show validation color\n- <b>only-valid</b>: Show only valid validation color\n- <b>only-invalid</b>: Show only invalid validation color\n",
                    "description": "<p>Validation color display mode (validation triggered if field is touched or not pristine)</p>\n<ul>\n<li><b>true</b>: Always show the validation color</li>\n<li><b>false</b>: Never show validation color</li>\n<li><b>only-valid</b>: Show only valid validation color</li>\n<li><b>only-invalid</b>: Show only invalid validation color</li>\n</ul>\n",
                    "line": 24,
                    "type": "BooleanInput | \"only-valid\" | \"only-invalid\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 9,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "onAutocompleteSelected",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when the Autocomplete Item has been selected\n",
                    "description": "<p>Fired when the Autocomplete Item has been selected</p>\n",
                    "line": 85,
                    "type": "EventEmitter<AutocompleteItem>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "autocompleteResults$",
                    "defaultValue": "new Observable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<literal type>",
                    "optional": false,
                    "description": "<p>Observable da cui vengono emessi i risultati dell&#39;auto completamento</p>\n",
                    "line": 162,
                    "rawdescription": "\nObservable da cui vengono emessi i risultati dell'auto completamento"
                },
                {
                    "name": "showAutocompletion",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "<p>Internal form control</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nInternal form control\n",
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "autocompleteItemTrackByValueFn",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "AutocompleteItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 262,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "AutocompleteItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAutocompleteResults$",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate the autocomplete list\n",
                    "description": "<p>Create the autocomplete list</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "incrementNumber",
                    "args": [
                        {
                            "name": "decrease",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIncrement or decrease the input number value of step\n",
                    "description": "<p>Increment or decrease the input number value of step</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6218,
                                "end": 6226,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "decrease"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "pos": 6212,
                                "end": 6217,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>true to decrease value</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "onEntryClick",
                    "args": [
                        {
                            "name": "entry",
                            "type": "AutocompleteItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 250,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entry",
                            "type": "AutocompleteItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onKeyDown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 266,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "addValidators",
                    "args": [
                        {
                            "name": "validators",
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd the validators in control and parent control\n",
                    "description": "<p>Add the validators in control and parent control</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3969,
                                "end": 3979,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "validators"
                            },
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3963,
                                "end": 3968,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the validators</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "getError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.\n",
                    "description": "<p>Reports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5231,
                                "end": 5240,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5225,
                                "end": 5230,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5284,
                                "end": 5288,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5278,
                                "end": 5283,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5427,
                                "end": 5434,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>error data for that particular error. If the control or error is not present,\nnull is returned.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.\n",
                    "description": "<p>Reports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4641,
                                "end": 4650,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4635,
                                "end": 4640,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4694,
                                "end": 4698,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 4688,
                                "end": 4693,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 4837,
                                "end": 4844,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>whether the given error is present in the control at the given path.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMark the control as touched\n",
                    "description": "<p>Mark the control as touched</p>\n",
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired to check if form control is touched\n",
                    "description": "<p>Fired to check if form control is touched</p>\n",
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { AbstractFormComponent } from '../../../abstracts/abstract-form-component';\nimport { AutocompleteItem, InputControlType } from '../../../interfaces/form';\nimport { AbstractControl, ValidatorFn, Validators } from '@angular/forms';\nimport { ItValidators } from '../../../validators/it-validators';\nimport { BooleanInput, isTrueBooleanInput } from '../../../utils/boolean-input';\nimport { debounceTime, distinctUntilChanged, map, Observable, of, switchMap } from 'rxjs';\n\n@Component({\n  selector: 'it-input[id]',\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.scss']\n})\nexport class InputComponent extends AbstractFormComponent<string | number> {\n\n  /**\n   * The input type\n   * @default text\n   */\n  @Input() type: InputControlType = 'text';\n\n  /**\n   * The input placeholder\n   */\n  @Input() placeholder: string = '';\n\n  /**\n   * The input description\n   */\n  @Input() description?: string;\n\n  /**\n   * To prevent modification of the contained value.\n   * - <b>plaintext</b>: Readonly field in the form stylized as plain text\n   */\n  @Input() readonly?: BooleanInput | 'plaintext';\n\n  /**\n   * The max value [Used only in type = 'number']\n   */\n  @Input() max?: number;\n\n  /**\n   * The min value [Used only in type = 'number']\n   */\n  @Input() min?: number;\n\n  /**\n   * The step value [Used only in type = 'number']\n   */\n  @Input() step?: number | 'any';\n\n  /**\n   * If is a currency number [Used only in type = 'number']\n   */\n  @Input() currency?: BooleanInput;\n\n  /**\n   * If is a percentage number [Used only in type = 'number']\n   */\n  @Input() percentage?: BooleanInput;\n\n  /**\n   * To make the numeric field automatically resize according to the value contained in it. [Used only in type = 'number']\n   */\n  @Input() adaptive?: BooleanInput;\n\n  /**\n   * Indicates the list of searchable elements on which to base the input autocomplete system [Optional. Used only in type = 'search']\n   * If you need to retrieve items via API, can pass a function of Observable\n   * @default undefined\n   */\n  @Input() autocompleteData?: Array<AutocompleteItem> | ((search?: string) => Observable<Array<AutocompleteItem>>);\n\n  /**\n   * Time span [ms] has passed without another source emission, to delay data filtering.\n   * Useful when the user is typing multiple letters\n   * @default 300 [ms]\n   */\n  @Input() autocompleteDebounceTime: number = 300;\n\n  /**\n   * Fired when the Autocomplete Item has been selected\n   */\n  @Output() onAutocompleteSelected: EventEmitter<AutocompleteItem> = new EventEmitter();\n\n  showAutocompletion = false;\n\n\n  get isActiveLabel(): boolean {\n    const value = this.control.value;\n    if ((!!value && value !== 0) || value === 0 || !!this.placeholder) {\n      return true;\n    }\n\n    if (this.type === 'number' && (isTrueBooleanInput(this.currency) || isTrueBooleanInput(this.percentage))) {\n      return true;\n    }\n\n    return this.type === 'date' || this.type === 'time';\n  }\n\n  /**\n   * Check is readonly field\n   */\n  get isReadonly(): boolean {\n    return this.readonly === 'plaintext' || isTrueBooleanInput(this.readonly);\n  }\n\n  /**\n   * Return the invalid message string from TranslateService\n   */\n  override get invalidMessage(): Observable<string> {\n    if (this.hasError('min') && this.min) {\n      return this._translateService.get('it.errors.min-invalid', {\n        min: this.min\n      });\n    }\n    if (this.hasError('max') && this.max) {\n      return this._translateService.get('it.errors.max-invalid', {\n        max: this.max\n      });\n    }\n    if (this.hasError('minlength')) {\n      const error = this.getError('minlength');\n      return this._translateService.get('it.errors.min-length-invalid', { min: error.requiredLength });\n    }\n    if (this.hasError('maxlength')) {\n      const error = this.getError('maxlength');\n      return this._translateService.get('it.errors.max-length-invalid', { max: error.requiredLength });\n    }\n    if (this.hasError('email') || this.hasError('invalidEmail')) {\n      return this._translateService.get('it.errors.email-invalid');\n    }\n    if (this.hasError('invalidTel')) {\n      return this._translateService.get('it.errors.tel-invalid');\n    }\n    if (this.hasError('invalidUrl')) {\n      return this._translateService.get('it.errors.url-invalid');\n    }\n    if (this.hasError('invalidTaxCode')) {\n      return this._translateService.get('it.errors.tax-code-invalid');\n    }\n    if (this.hasError('invalidVatNumber')) {\n      return this._translateService.get('it.errors.vat-number-invalid');\n    }\n    if (this.hasError('invalidCap')) {\n      return this._translateService.get('it.errors.cap-invalid');\n    }\n    if (this.hasError('invalidRegex')) {\n      return this._translateService.get('it.errors.regex-invalid');\n    }\n    if (this.hasError('pattern')) {\n      const error = this.getError('pattern');\n      return this._translateService.get('it.errors.pattern-invalid', { pattern: error.requiredPattern });\n    }\n\n    return super.invalidMessage;\n  }\n\n  /** Observable da cui vengono emessi i risultati dell'auto completamento */\n  autocompleteResults$: Observable<{ searchedValue: string, relatedEntries: Array<AutocompleteItem> }> = new Observable();\n\n\n  override ngOnInit() {\n    super.ngOnInit();\n\n    const validators: Array<ValidatorFn> = [];\n    switch (this.type) {\n      case 'number':\n        if (isTrueBooleanInput(this.percentage)) {\n          this.min = this.min || 0;\n          this.max = this.max || 100;\n        }\n\n        // Dynamic min/max validators\n        validators.push((control: AbstractControl) => this.min ? Validators.min(this.min)(control) : null);\n        validators.push((control: AbstractControl) => this.max ? Validators.max(this.max)(control) : null);\n        break;\n      case 'email':\n        validators.push(ItValidators.email);\n        break;\n      case 'tel':\n        validators.push(ItValidators.tel);\n        break;\n      case 'url':\n        validators.push(ItValidators.url);\n        break;\n    }\n\n    this.addValidators(validators);\n    this.autocompleteResults$ = this.getAutocompleteResults$();\n  }\n\n  /**\n   * Increment or decrease the input number value of step\n   * @param decrease true to decrease value\n   */\n  incrementNumber(decrease: boolean = false): void {\n    if (this.type !== 'number') {\n      return;\n    }\n    const step = (this.step === 'any' ? 1 : (this.step ?? 1));\n    let value = Number(this.control.value);\n    value = (isNaN(value) ? 0 : value) + (decrease ? -step : step);\n    value = Math.round(value * 1e12) / 1e12; // prevent js decimal error\n\n    if (this.min !== undefined && value < this.min) {\n      value = this.min;\n    } else if (this.max !== undefined && value > this.max) {\n      value = this.max;\n    }\n\n    this.control.setValue(value);\n  }\n\n\n  /**\n   * Create the autocomplete list\n   */\n  private getAutocompleteResults$(): Observable<{ searchedValue: string, relatedEntries: Array<AutocompleteItem> }> {\n    if (this.type !== 'search') {\n      return of({ searchedValue: '', relatedEntries: [] });\n    }\n    return this.control.valueChanges.pipe(\n      debounceTime(this.autocompleteDebounceTime), // Delay filter data after time span has passed without another source emission, useful when the user is typing multiple letters\n      distinctUntilChanged(), // Only if searchValue is distinct in comparison to the last value\n      switchMap(searchedValue => {\n        if (!this.autocompleteData) {\n          return of({ searchedValue, relatedEntries: [] });\n        }\n\n        const autoCompleteData$ = Array.isArray(this.autocompleteData) ? of(this.autocompleteData) : this.autocompleteData(searchedValue);\n        return autoCompleteData$.pipe(\n          map(autocompleteData => {\n            if (!searchedValue) {\n              return { searchedValue, relatedEntries: [] };\n            }\n\n            const lowercaseValue = searchedValue.toLowerCase();\n            const relatedEntries = autocompleteData.filter(item => item.value?.toLowerCase().includes(lowercaseValue));\n\n            return { searchedValue, relatedEntries };\n          })\n        );\n      })\n    );\n  }\n\n  onEntryClick(entry: AutocompleteItem, event: Event) {\n    // Se non è stato definito un link associato all'elemento dell'autocomplete, probabilmente il desiderata\n    // non è effettuare la navigazione al default '#', pertanto in tal caso meglio annullare la navigazione.\n    if (!entry.link) {\n      event.preventDefault();\n    }\n\n    this.onAutocompleteSelected.next(entry);\n    this.control.setValue(entry.value);\n    this.showAutocompletion = false;\n  }\n\n  autocompleteItemTrackByValueFn(index: number, item: AutocompleteItem) {\n    return item.value;\n  }\n\n  onKeyDown() {\n    this.showAutocompletion = this.type === 'search';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-group {\n  label {\n    z-index: 1000;\n  }\n\n  input:focus:not(.focus--mouse) {\n    box-shadow: inherit !important;\n    border-color: inherit !important;\n  }\n\n  .input-number {\n    button.input-number-add {\n      top: 0;\n    }\n\n    button.input-number-sub {\n      bottom: 0;\n    }\n  }\n\n  .input-group-text:empty {\n    display: none;\n  }\n\n  label.empty-prepend-label {\n    left: auto !important;\n    max-width: 100% !important;\n  }\n}\n\n",
                    "styleUrl": "./input.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "AbstractFormComponent",
            "accessors": {
                "isActiveLabel": {
                    "name": "isActiveLabel",
                    "getSignature": {
                        "name": "isActiveLabel",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 90
                    }
                },
                "isReadonly": {
                    "name": "isReadonly",
                    "getSignature": {
                        "name": "isReadonly",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 106,
                        "rawdescription": "\n\nCheck is readonly field\n",
                        "description": "<p>Check is readonly field</p>\n"
                    }
                },
                "invalidMessage": {
                    "name": "invalidMessage",
                    "getSignature": {
                        "name": "invalidMessage",
                        "type": "",
                        "returnType": "Observable<string>",
                        "line": 113,
                        "rawdescription": "\n\nReturn the invalid message string from TranslateService\n",
                        "description": "<p>Return the invalid message string from TranslateService</p>\n"
                    }
                }
            },
            "templateData": "<div class=\"form-group\">\n  <div class=\"input-group\">\n    <div class=\"input-group-prepend\" [class.d-none]=\"!prependText.hasChildNodes() && !prepend.hasChildNodes()\">\n      <div #prepend>\n        <ng-content select=\"[prepend]\"></ng-content>\n      </div>\n      <div class=\"input-group-text\" #prependText>\n        <ng-content select=\"[prependText]\"></ng-content>\n      </div>\n    </div>\n\n    <label *ngIf=\"label\" [for]=\"id\" [class.active]=\"isActiveLabel\"\n           [class.empty-prepend-label]=\"!prependText.hasChildNodes() && !prepend.hasChildNodes()\">\n      {{label}}\n    </label>\n\n    <span *ngIf=\"type === 'number'\"\n          class=\"input-number\"\n          [class.input-number-currency]=\"currency\"\n          [class.input-number-percentage]=\"percentage\"\n          [class.input-number-adaptive]=\"adaptive\">\n\n      <input type=\"number\"\n             [id]=\"id\"\n             [step]=\"step ?? null\"\n             [class.is-invalid]=\"isInvalid\"\n             [class.is-valid]=\"isValid\"\n             [formControl]=\"control\"\n             [placeholder]=\"placeholder\"\n             [readonly]=\"isReadonly\"\n             [attr.aria-describedby]=\"id + '-description'\"\n             (blur)=\"markAsTouched()\" />\n\n      <button type=\"button\" class=\"input-number-add\" (click)=\"incrementNumber()\">\n        <span class=\"visually-hidden\">{{'it.form.increase-value'}}</span>\n      </button>\n      <button type=\"button\" class=\"input-number-sub\" (click)=\"incrementNumber(true)\">\n        <span class=\"visually-hidden\">{{'it.form.decrease-value'}}</span>\n      </button>\n    </span>\n\n    <input *ngIf=\"type !== 'number'\"\n           [id]=\"id\"\n           [type]=\"type\"\n           [class.form-control]=\"readonly !== 'plaintext'\"\n           [class.form-control-plaintext]=\"readonly === 'plaintext'\"\n           [class.is-invalid]=\"isInvalid\"\n           [class.is-valid]=\"isValid\"\n           [formControl]=\"control\"\n           [placeholder]=\"placeholder\"\n           [readonly]=\"isReadonly\"\n           (keydown)=\"onKeyDown()\"\n           [attr.aria-describedby]=\"id + '-description'\"\n           (blur)=\"markAsTouched()\">\n\n    <div class=\"input-group-append\">\n      <ng-content select=\"[append]\"></ng-content>\n\n      <div class=\"input-group-text\">\n        <ng-content select=\"[appendText]\"></ng-content>\n      </div>\n    </div>\n  </div>\n\n  <small *ngIf=\"description\" [id]=\"id + '-description'\" class=\"form-text\">{{description}}</small>\n\n  <!-- INIZIO gestione AUTOCOMPLETAMENTO -->\n  <ng-container *ngIf=\"type === 'search'\">\n    <!-- Icona lente per autocompletamento -->\n    <span class=\"autocomplete-icon\" aria-hidden=\"true\">\n      <it-icon name=\"search\" size=\"sm\"></it-icon>\n    </span>\n\n    <ng-container *ngIf=\"autocompleteResults$ | async as autocomplete\">\n      <!-- Lista di autocompletamento -->\n      <ul class=\"autocomplete-list\" [class.autocomplete-list-show]=\"autocomplete.relatedEntries?.length && showAutocompletion\">\n        <li *ngFor=\"let entry of autocomplete.relatedEntries; trackBy: autocompleteItemTrackByValueFn\"\n            (click)=\"onEntryClick(entry, $event)\">\n          <a [href]=\"entry.link\">\n            <ng-container *ngTemplateOutlet=\"autocompleteItemTemplate\"></ng-container>\n          </a>\n          <ng-template #autocompleteItemTemplate>\n            <div class=\"avatar size-sm\" *ngIf=\"entry.avatarSrcPath\">\n              <img [src]=\"entry.avatarSrcPath\" [alt]=\"entry.avatarAltText\">\n            </div>\n            <it-icon *ngIf=\"entry.icon\" [name]=\"entry.icon\" size=\"sm\"></it-icon>\n            <span class=\"autocomplete-list-text\">\n            <span [innerHTML]=\"entry.value | markMatchingText: autocomplete.searchedValue\"></span>\n            <em *ngIf=\"entry.label\">{{entry.label}}</em>\n          </span>\n          </ng-template>\n        </li>\n      </ul>\n    </ng-container>\n  </ng-container>\n  <!-- FINE gestione AUTOCOMPLETAMENTO -->\n\n  <div *ngIf=\"isInvalid\" class=\"form-feedback just-validate-error-label\" [id]=\"id + '-error'\">\n    <div #customError>\n      <ng-content select=\"[error]\"></ng-content>\n    </div>\n    <ng-container *ngIf=\"!customError.hasChildNodes()\">{{invalidMessage | async}}</ng-container>\n  </div>\n</div>\n"
        },
        {
            "name": "LanguageSwitcherComponent",
            "id": "component-LanguageSwitcherComponent-ff22bb71b0f002c4e383e4dd87eb418fcba4545e5603a147859c39e444835fb29df8388e35b24a8f03b37d74b29d2b82d19491fbc5632ef844bf9cb28392b9b0",
            "file": "projects/design-angular-kit/src/lib/components/utils/language-switcher/language-switcher.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-language-switcher",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./language-switcher.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "availableLanguages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 422,
                            "end": 499,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 423,
                                "end": 430,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>The languages available through TranslateService (ngx-translate)</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe available languages\n",
                    "description": "<p>The available languages</p>\n",
                    "line": 16,
                    "type": "Array<AvailableLanguage>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentLang$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<AvailableLanguage | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "changeLanguage",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChange the current language\n",
                    "description": "<p>Change the current language</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1190,
                                "end": 1194,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "lang"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1184,
                                "end": 1189,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the language code</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { map, Observable } from 'rxjs';\nimport { TranslateService } from '@ngx-translate/core';\nimport { AvailableLanguage } from '../../../interfaces/utils';\n\n@Component({\n  selector: 'it-language-switcher',\n  templateUrl: './language-switcher.component.html'\n})\nexport class LanguageSwitcherComponent implements OnInit {\n\n  /**\n   * The available languages\n   * @default The languages available through TranslateService (ngx-translate)\n   */\n  @Input() availableLanguages?: Array<AvailableLanguage>;\n\n  currentLang$: Observable<AvailableLanguage | undefined>;\n\n  constructor(\n    private readonly translateService: TranslateService\n  ) {\n    this.currentLang$ = translateService.onLangChange.pipe(\n      map(event => this.availableLanguages?.find(l => l.code === event.lang))\n    );\n  }\n\n  ngOnInit(): void {\n    if (!this.availableLanguages) {\n      this.availableLanguages = this.translateService.getLangs().map(lang => ({\n        code: lang,\n        label: lang,\n        ...(lang === 'it' && {label: 'ITA'}),\n        ...(lang === 'en' && {label: 'ENG'})\n      }));\n    }\n  }\n\n  /**\n   * Change the current language\n   * @param lang the language code\n   */\n  changeLanguage(lang: string): void {\n    this.translateService.use(lang);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<it-dropdown id=\"language-switcher\">\n  <ng-container button>\n    <span class=\"visually-hidden\">{{'it.utils.selected' | translate: { lang: (currentLang$ | async)?.label } }}</span>\n    <span>{{(currentLang$ | async)?.label || ('it.utils.select-language' | translate)}}</span>\n  </ng-container>\n\n  <ng-container list>\n    <it-dropdown-item *ngFor=\"let lang of availableLanguages\" (click)=\"changeLanguage(lang.code)\"\n                      [active]=\"lang.code === (currentLang$ | async)?.code\">\n      {{lang.label}}\n      <span class=\"visually-hidden\" *ngIf=\"lang.code === (currentLang$ | async)?.code\">\n        {{'it.utils.selected' | translate}}\n      </span>\n    </it-dropdown-item>\n  </ng-container>\n</it-dropdown>\n"
        },
        {
            "name": "LinkComponent",
            "id": "component-LinkComponent-9d4f0f1cd1b2126683dfc38f24228d28baaed8feaa4165467e15b961d690f4b3ea5c0674bf41e2cf105e2977b83dec86143386fb20be31ae6970cfb314eb5457",
            "file": "projects/design-angular-kit/src/lib/components/core/link/link.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-link",
            "styleUrls": [
                "./link.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./link.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "class",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCustom class\n",
                    "description": "<p>Custom class</p>\n",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs disabled link\n",
                    "description": "<p>Is disabled link</p>\n",
                    "line": 29,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "externalLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs an external link (false to not use Angular router link)\n",
                    "description": "<p>Is an external link (false to not use Angular router link)</p>\n",
                    "line": 24,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "href",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe router link action\n\nCommands to pass to Router#createUrlTree.\n- array: commands to pass to Router#createUrlTree.\n- string: shorthand for array of commands with just the string, i.e. ['/route']\n- null|undefined: Disables the link by removing the href\n",
                    "description": "<p>The router link action</p>\n<p>Commands to pass to Router#createUrlTree.</p>\n<ul>\n<li>array: commands to pass to Router#createUrlTree.</li>\n<li>string: shorthand for array of commands with just the string, i.e. [&#39;/route&#39;]</li>\n<li>null|undefined: Disables the link by removing the href</li>\n</ul>\n",
                    "line": 19,
                    "type": "any[] | string | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { BooleanInput, isTrueBooleanInput } from '../../../utils/boolean-input';\n\n@Component({\n  selector: 'it-link',\n  templateUrl: './link.component.html',\n  styleUrls: ['./link.component.scss']\n})\nexport class LinkComponent implements AfterViewInit {\n\n  /**\n   * The router link action\n   *\n   * Commands to pass to Router#createUrlTree.\n   * - array: commands to pass to Router#createUrlTree.\n   * - string: shorthand for array of commands with just the string, i.e. ['/route']\n   * - null|undefined: Disables the link by removing the href\n   */\n  @Input() href?: any[] | string | null;\n\n  /**\n   * Is an external link (false to not use Angular router link)\n   */\n  @Input() externalLink?: BooleanInput;\n\n  /**\n   * Is disabled link\n   */\n  @Input() disabled?: BooleanInput;\n\n  /**\n   * Custom class\n   */\n  @Input() class: string = '';\n\n  get isExternalLink(): boolean {\n    return isTrueBooleanInput(this.externalLink);\n  }\n\n  get isDisabled(): boolean {\n    return isTrueBooleanInput(this.disabled);\n  }\n\n  constructor(\n    protected readonly _renderer: Renderer2,\n    protected readonly _elementRef: ElementRef\n  ) {\n  }\n\n  ngAfterViewInit(): void {\n    this._renderer.removeAttribute(this._elementRef.nativeElement, 'class');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./link.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit"
            ],
            "accessors": {
                "isExternalLink": {
                    "name": "isExternalLink",
                    "getSignature": {
                        "name": "isExternalLink",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 36
                    }
                },
                "isDisabled": {
                    "name": "isDisabled",
                    "getSignature": {
                        "name": "isDisabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 40
                    }
                }
            },
            "templateData": "<a *ngIf=\"!isExternalLink; else externalLink\" [class]=\"class\" [routerLink]=\"isDisabled ? null : href\">\n  <ng-container *ngTemplateOutlet=\"linkContent\"></ng-container>\n</a>\n<ng-template #externalLink>\n  <a [class]=\"class\" [attr.href]=\"isDisabled ? null : href\">\n    <ng-container *ngTemplateOutlet=\"linkContent\"></ng-container>\n  </a>\n</ng-template>\n\n<ng-template #linkContent>\n  <ng-content></ng-content>\n</ng-template>\n"
        },
        {
            "name": "ListComponent",
            "id": "component-ListComponent-c30d83410bac6b98a2dba35cf8e4abfe68cc023e480de702e0f128c8c01cf3343eb2d9f7abe8ea1a51fd64472f61471a819a30be4aea0235f327ddc60c73fd04",
            "file": "projects/design-angular-kit/src/lib/components/core/list/list/list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-list",
            "styleUrls": [
                "./list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "linkList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd 'link-list' class for navigation menù\n",
                    "description": "<p>Add &#39;link-list&#39; class for navigation menù</p>\n",
                    "line": 14,
                    "type": "BooleanInput",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { BooleanInput } from '../../../../utils/boolean-input';\n\n@Component({\n  selector: 'it-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.scss']\n})\nexport class ListComponent {\n\n  /**\n   * Add 'link-list' class for navigation menù\n   */\n  @Input() linkList?: BooleanInput;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n",
                    "styleUrl": "./list.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"it-list-wrapper\">\n  <ul class=\"it-list\">\n    <ng-content></ng-content>\n  </ul>\n</div>\n"
        },
        {
            "name": "ListItemComponent",
            "id": "component-ListItemComponent-9848268552685fadff33516e98f03c0984cea4a6b365e450e2ece0934a488637b438f01dad9386d92120e04d53b49db5f7df561f99fc8d3299bf022d7d4d8aff",
            "file": "projects/design-angular-kit/src/lib/components/core/list/list-item/list-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-list-item",
            "styleUrls": [
                "./list-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd active class\n",
                    "description": "<p>Add active class</p>\n",
                    "line": 15,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe avatar url\n",
                    "description": "<p>The avatar url</p>\n",
                    "line": 25,
                    "type": "URL",
                    "decorators": []
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe thumb image url\n",
                    "description": "<p>The thumb image url</p>\n",
                    "line": 30,
                    "type": "URL",
                    "decorators": []
                },
                {
                    "name": "large",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd large class\n",
                    "description": "<p>Add large class</p>\n",
                    "line": 20,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "class",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCustom class\n",
                    "description": "<p>Custom class</p>\n",
                    "line": 34,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "LinkComponent"
                    }
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs disabled link\n",
                    "description": "<p>Is disabled link</p>\n",
                    "line": 29,
                    "type": "BooleanInput",
                    "decorators": [],
                    "inheritance": {
                        "file": "LinkComponent"
                    }
                },
                {
                    "name": "externalLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs an external link (false to not use Angular router link)\n",
                    "description": "<p>Is an external link (false to not use Angular router link)</p>\n",
                    "line": 24,
                    "type": "BooleanInput",
                    "decorators": [],
                    "inheritance": {
                        "file": "LinkComponent"
                    }
                },
                {
                    "name": "href",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe router link action\n\nCommands to pass to Router#createUrlTree.\n- array: commands to pass to Router#createUrlTree.\n- string: shorthand for array of commands with just the string, i.e. ['/route']\n- null|undefined: Disables the link by removing the href\n",
                    "description": "<p>The router link action</p>\n<p>Commands to pass to Router#createUrlTree.</p>\n<ul>\n<li>array: commands to pass to Router#createUrlTree.</li>\n<li>string: shorthand for array of commands with just the string, i.e. [&#39;/route&#39;]</li>\n<li>null|undefined: Disables the link by removing the href</li>\n</ul>\n",
                    "line": 19,
                    "type": "any[] | string | null",
                    "decorators": [],
                    "inheritance": {
                        "file": "LinkComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "LinkComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { BooleanInput, isTrueBooleanInput } from '../../../../utils/boolean-input';\nimport { LinkComponent } from '../../link/link.component';\n\n@Component({\n  selector: 'it-list-item',\n  templateUrl: './list-item.component.html',\n  styleUrls: ['./list-item.component.scss']\n})\nexport class ListItemComponent extends LinkComponent {\n\n  /**\n   * Add active class\n   */\n  @Input() active?: BooleanInput;\n\n  /**\n   * Add large class\n   */\n  @Input() large?: BooleanInput;\n\n  /**\n   * The avatar url\n   */\n  @Input() avatar?: URL;\n\n  /**\n   * The thumb image url\n   */\n  @Input() image?: URL;\n\n\n  get itemClass(): string {\n    let itemClass = 'list-item';\n    if (isTrueBooleanInput(this.active)) {\n      itemClass += ` active`;\n    }\n    if (isTrueBooleanInput(this.large)) {\n      itemClass += ` large`;\n    }\n    if (this.class) {\n      itemClass += ` ${this.class}`;\n    }\n    return itemClass;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".metadata:empty, .it-rounded-icon:empty {\n  display: none;\n}\n",
                    "styleUrl": "./list-item.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "LinkComponent",
            "accessors": {
                "itemClass": {
                    "name": "itemClass",
                    "getSignature": {
                        "name": "itemClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 33
                    }
                }
            },
            "templateData": "<li>\n  <ng-template #content>\n    <div class=\"it-rounded-icon\">\n      <ng-content select=\"[icon]\"></ng-content>\n    </div>\n\n    <div *ngIf=\"avatar\" class=\"avatar size-lg\">\n      <img [attr.src]=\"avatar\" alt=\"avatar\">\n    </div>\n\n    <div *ngIf=\"image\" class=\"it-thumb\">\n      <img [attr.src]=\"image\" alt=\"thumb\">\n    </div>\n\n    <div class=\"it-right-zone\">\n      <span class=\"text\">\n        <ng-content></ng-content>\n      </span>\n      <ng-content select=\"[action]\"></ng-content>\n\n      <span class=\"it-multiple\">\n        <span class=\"metadata\">\n          <ng-content select=\"[metadata]\"></ng-content>\n        </span>\n\n        <ng-content select=\"[multiple]\"></ng-content>\n      </span>\n    </div>\n  </ng-template>\n\n\n  <div *ngIf=\"!href; else link\" [class]=\"itemClass\">\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n  </div>\n\n  <ng-template #link>\n    <it-link [class]=\"itemClass\" [href]=\"href\" [externalLink]=\"externalLink\" [disabled]=\"disabled\">\n      <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n    </it-link>\n  </ng-template>\n</li>\n"
        },
        {
            "name": "ModalComponent",
            "id": "component-ModalComponent-d3b65f03ab9db57d9369ed99090f3f7715794806c7fc274ddfa6281cb26bc58c3dca8b02cdd235316157e893707acfb8aca5a5a34ab917c1a8f192db2280723e",
            "file": "projects/design-angular-kit/src/lib/components/core/modal/modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "itModal",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-modal[id][title]",
            "styleUrls": [
                "./modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe modal size\n",
                    "description": "<p>The modal size</p>\n",
                    "line": 22,
                    "type": "\"modal-sm\" | \"modal-lg\" | \"modal-xl\"",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe modal Title\n",
                    "description": "<p>The modal Title</p>\n",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 9,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "onHidden",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event fires when the modal has finished hiding from the user (it will wait for CSS transitions to complete).\n",
                    "description": "<p>This event fires when the modal has finished hiding from the user (it will wait for CSS transitions to complete).</p>\n",
                    "line": 42,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "onHide",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event is raised immediately when the instance method hide has been called.\n",
                    "description": "<p>This event is raised immediately when the instance method hide has been called.</p>\n",
                    "line": 37,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "onHidePrevented",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event is fired when the modal is displayed, its background is static and a click outside the modal or a press\nof the esc key occurs and data-bs-keyboard is set to false.\n",
                    "description": "<p>This event is fired when the modal is displayed, its background is static and a click outside the modal or a press\nof the esc key occurs and data-bs-keyboard is set to false.</p>\n",
                    "line": 48,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event fires immediately when the instance method show is called.\n",
                    "description": "<p>This event fires immediately when the instance method show is called.</p>\n",
                    "line": 27,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "onShown",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event fires when the modal has been made visible to the user (it will wait for CSS transitions to complete).\n",
                    "description": "<p>This event fires when the modal has been made visible to the user (it will wait for CSS transitions to complete).</p>\n",
                    "line": 32,
                    "type": "EventEmitter<Event>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "modal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "modalElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "optional": true,
                    "description": "",
                    "line": 54,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'modalElement', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "dispose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDestroys the modal of an element.\n",
                    "description": "<p>Destroys the modal of an element.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "handleUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nManually reposition the modal if the height of the modal changes when it is opened (in case a scroll bar appears).\n",
                    "description": "<p>Manually reposition the modal if the height of the modal changes when it is opened (in case a scroll bar appears).</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nManually hide a modal. Returns to the caller before the modal has actually been hidden\n",
                    "description": "<p>Manually hide a modal. Returns to the caller before the modal has actually been hidden</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nManually open a modal. Returns to the caller before the modal has actually been displayed\n",
                    "description": "<p>Manually open a modal. Returns to the caller before the modal has actually been displayed</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nManually activate/deactivate a modal. Returns to the caller before the modal has actually been shown or hidden\n",
                    "description": "<p>Manually activate/deactivate a modal. Returns to the caller before the modal has actually been shown or hidden</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport {AbstractComponent} from \"../../../abstracts/abstract.component\";\n\nimport { Modal } from 'bootstrap-italia';\n\n@Component({\n  selector: 'it-modal[id][title]',\n  templateUrl: './modal.component.html',\n  styleUrls: ['./modal.component.scss'],\n  exportAs: 'itModal'\n})\nexport class ModalComponent extends AbstractComponent {\n\n  /**\n   * The modal Title\n   */\n  @Input() title!: string;\n\n  /**\n   * The modal size\n   */\n  @Input() size?: 'modal-sm' | 'modal-lg' | 'modal-xl';\n\n  /**\n   * This event fires immediately when the instance method show is called.\n   */\n  @Output() onShow: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * This event fires when the modal has been made visible to the user (it will wait for CSS transitions to complete).\n   */\n  @Output() onShown: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * This event is raised immediately when the instance method hide has been called.\n   */\n  @Output() onHide: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * This event fires when the modal has finished hiding from the user (it will wait for CSS transitions to complete).\n   */\n  @Output() onHidden: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * This event is fired when the modal is displayed, its background is static and a click outside the modal or a press\n   * of the esc key occurs and data-bs-keyboard is set to false.\n   */\n  @Output() onHidePrevented: EventEmitter<Event> = new EventEmitter();\n\n\n  private modal: any;\n\n  @ViewChild('modalElement', {static: false})\n  private modalElement?: ElementRef<HTMLDivElement>;\n\n  override ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    this._renderer.removeAttribute(this._elementRef.nativeElement, 'title');\n\n    if (this.modalElement) {\n      const element = this.modalElement.nativeElement;\n      this.modal = Modal.getOrCreateInstance(element);\n\n      element.addEventListener('show.bs.modal', event => this.onShow.emit(event));\n      element.addEventListener('shown.bs.modal', event => this.onShown.emit(event));\n      element.addEventListener('hide.bs.modal', event => this.onHide.emit(event));\n      element.addEventListener('hidden.bs.modal', event => this.onHidden.emit(event));\n      element.addEventListener('hidePrevented.bs.modal', event => this.onHidePrevented.emit(event));\n    }\n  }\n\n  /**\n   * Manually activate/deactivate a modal. Returns to the caller before the modal has actually been shown or hidden\n   */\n  public toggle(): void {\n    this.modal?.toggle()\n  }\n\n  /**\n   * Manually open a modal. Returns to the caller before the modal has actually been displayed\n   */\n  public show(): void {\n    this.modal?.show()\n  }\n\n  /**\n   * Manually hide a modal. Returns to the caller before the modal has actually been hidden\n   */\n  public hide(): void {\n    this.modal?.hide()\n  }\n\n  /**\n   * Manually reposition the modal if the height of the modal changes when it is opened (in case a scroll bar appears).\n   */\n  public handleUpdate(): void {\n    this.modal?.handleUpdate()\n  }\n\n  /**\n   * Destroys the modal of an element.\n   */\n  public dispose(): void {\n    this.modal?.dispose()\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".modal-footer:empty {\n  display: none;\n}\n",
                    "styleUrl": "./modal.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "AbstractComponent",
            "templateData": "<div [id]=\"id\" class=\"modal fade\"\n     tabindex=\"-1\"\n     role=\"dialog\"\n     aria-hidden=\"true\"\n     [attr.aria-labelledby]=\"id+'-label'\" #modalElement>\n  <div class=\"modal-dialog {{size}}\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h2 class=\"modal-title h5 no_toc\" id=\"{{id}}-label\">{{title}}</h2>\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" [attr.aria-label]=\"'it.core.close-modal'|translate\"></button>\n      </div>\n      <div class=\"modal-body mb-3\">\n        <ng-content></ng-content>\n      </div>\n      <div class=\"modal-footer modal-footer-shadow\">\n        <ng-content select=\"[footer]\"></ng-content>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "NotFoundPageComponent",
            "id": "component-NotFoundPageComponent-bbd27031d3cc193d5351387f24e35ae23348e43c324c1c2777b9b18e0c8625377c75f12ab1c6233b79f19a43f8d8aed8eb73df8f69458216e8bf7ffac581c1a5",
            "file": "projects/design-angular-kit/src/lib/components/utils/not-found-page/not-found-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-not-found-page",
            "styleUrls": [
                "./not-found-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./not-found-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\n\n@Component({\n  selector: 'it-not-found-page',\n  templateUrl: './not-found-page.component.html',\n  styleUrls: ['./not-found-page.component.scss']\n})\nexport class NotFoundPageComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./not-found-page.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"error-template text-center mt-5\">\n  <h1>404</h1>\n  <h2>{{'it.utils.404.title' | translate}}</h2>\n  <p>{{'it.utils.404.description' | translate}}</p>\n\n  <div class=\"mt-3\">\n    <it-back-button></it-back-button>\n    <a class=\"btn btn-primary ms-3\" href=\"/\" title=\"{{'it.utils.404.go-to-homepage' | translate}}\">\n      {{'it.utils.404.go-to-homepage' | translate}}\n    </a>\n  </div>\n\n</div>\n"
        },
        {
            "name": "NotificationsComponent",
            "id": "component-NotificationsComponent-7a705f8d9ff30793da230cdaf9c8e4b157dd5f5b5f40b689fc8d407e601ee33b176ea0d3028d89c26a216e1f99e58d156bcf5c915fc734685ffa8bb9a6c4b4d9",
            "file": "projects/design-angular-kit/src/lib/components/core/notifications/notifications.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-notifications",
            "styleUrls": [
                "./notifications.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./notifications.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "duration",
                    "defaultValue": "8000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 610,
                            "end": 627,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 611,
                                "end": 618,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>8000</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDefault notifications duration\n",
                    "description": "<p>Default notifications duration</p>\n",
                    "line": 19,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefault notifications position\n",
                    "description": "<p>Default notifications position</p>\n",
                    "line": 24,
                    "type": "NotificationPosition",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "notifications",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<>",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "hideNotification",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHide the notification\n",
                    "description": "<p>Hide the notification</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2103,
                                "end": 2105,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2097,
                                "end": 2102,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { NotificationsService } from '../../../services/notifications/notifications.service';\nimport { Notification, NotificationPosition, NotificationType } from '../../../interfaces/core';\n\nimport { Notification as BSNotification } from 'bootstrap-italia';\n\n@Component({\n  selector: 'it-notifications',\n  templateUrl: './notifications.component.html',\n  styleUrls: ['./notifications.component.scss']\n})\nexport class NotificationsComponent implements OnDestroy {\n\n  /**\n   * Default notifications duration\n   * @default 8000\n   */\n  @Input() duration: number = 8000;\n\n  /**\n   * Default notifications position\n   */\n  @Input() position?: NotificationPosition;\n\n  private subscription: Subscription;\n  notifications: Array<Notification & { id: string }> = [];\n\n  constructor(\n    private readonly _notificationService: NotificationsService\n  ) {\n    this.subscription = this._notificationService.onNotification().subscribe(notification => {\n      if (!notification.duration) {\n        notification.duration = this.duration; // Add duration if not is set\n      }\n      if (!notification.position && this.position) {\n        notification.position = this.position; // Add position if not is set\n      }\n\n      const newNotification = {\n        ...notification,\n        id: `${notification.type}-${this.notifications.length}-notification`\n      };\n      const index = this.notifications.push(newNotification);\n\n      setTimeout(() => {\n        // Show the notification\n        new BSNotification(document.getElementById(newNotification.id)!, {\n          timeout: notification.duration\n        }).show();\n\n        // Clear notification after the duration\n        setTimeout(() => {\n          this.notifications = this.notifications.splice(index, 1);\n        }, notification.duration);\n      }, 200);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  get NotificationType(): typeof NotificationType {\n    return NotificationType;\n  }\n\n  /**\n   * Hide the notification\n   * @param id\n   */\n  hideNotification(id: string): void {\n    BSNotification.getInstance(document.getElementById(id)!)?.hide();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".notification {\n  z-index: 10000;\n}\n",
                    "styleUrl": "./notifications.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "_notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ],
            "accessors": {
                "NotificationType": {
                    "name": "NotificationType",
                    "getSignature": {
                        "name": "NotificationType",
                        "type": "",
                        "returnType": "",
                        "line": 64
                    }
                }
            },
            "templateData": "<div *ngFor=\"let notification of notifications; let i = index\"\n     [id]=\"notification.id\"\n     class=\"notification {{notification.position}} {{notification.type}}\"\n     [class.with-icon]=\"notification.type !== NotificationType.Standard\"\n     [class.dismissable]=\"notification.dismissable\"\n     role=\"alert\" [attr.aria-labelledby]=\"notification.id+'-title'\">\n\n  <h2 [id]=\"notification.id+'-title'\" class=\"h5\">\n    <ng-container>{{notification.title}}</ng-container>\n  </h2>\n  <p *ngIf=\"notification.message\">{{notification.message}}</p>\n\n  <button *ngIf=\"notification.dismissable\" type=\"button\" class=\"btn notification-close\"\n          (click)=\"hideNotification(notification.id)\">\n    <it-icon name=\"close\"></it-icon>\n    <span class=\"visually-hidden\">{{'it.core.close-notification'|translate:{title: notification.title} }}</span>\n  </button>\n</div>\n"
        },
        {
            "name": "PaginationComponent",
            "id": "component-PaginationComponent-b8114827b7d6f348334b296241da15f1b9a90373c66b54b51d454d814c0fd667b6b5145c5ddb9fd49132a32f74ac6004c2eeca2cedb599b064251bb921796ba6",
            "file": "projects/design-angular-kit/src/lib/components/core/pagination/pagination.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-pagination[currentPage][pageNumbers]",
            "styleUrls": [
                "./pagination.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pagination.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "alignment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPagination alignment (justify-content)\n",
                    "description": "<p>Pagination alignment (justify-content)</p>\n",
                    "line": 23,
                    "type": "\"center\" | \"end\"",
                    "decorators": []
                },
                {
                    "name": "currentPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndex of page (start 0)\n",
                    "description": "<p>Index of page (start 0)</p>\n",
                    "line": 13,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "pageNumbers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMax number of page (counter)\n",
                    "description": "<p>Max number of page (counter)</p>\n",
                    "line": 18,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "newPageEvent",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when page is changed\n",
                    "description": "<p>Fired when page is changed</p>\n",
                    "line": 28,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "pageChange",
                    "args": [
                        {
                            "name": "newPage",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOn click page change\n",
                    "description": "<p>On click page change</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1230,
                                "end": 1237,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "newPage"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1224,
                                "end": 1229,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the new page of table</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n  selector: 'it-pagination[currentPage][pageNumbers]',\n  templateUrl: './pagination.component.html',\n  styleUrls: ['./pagination.component.scss']\n})\nexport class PaginationComponent {\n\n  /**\n   * Index of page (start 0)\n   */\n  @Input() currentPage!: number;\n\n  /**\n   * Max number of page (counter)\n   */\n  @Input() pageNumbers!: number;\n\n  /**\n   * Pagination alignment (justify-content)\n   */\n  @Input() alignment?: 'center' | 'end';\n\n  /**\n   * Fired when page is changed\n   */\n  @Output() newPageEvent = new EventEmitter<number>();\n\n  /**\n   * Create array to generate pagination of 5 element\n   */\n  get pages(): Array<number> {\n    const length = this.pageNumbers > 5 ? 5 : this.pageNumbers;\n    let start = (this.currentPage > 1 && this.pageNumbers > 5) ? this.currentPage - 1 : 1;\n\n    if (this.pageNumbers > 5) {\n      if ((this.currentPage + 1) >= this.pageNumbers) {\n        start -= 2;\n      } else if (this.currentPage >= (this.pageNumbers - 2)) {\n        start -= (this.pageNumbers - (this.currentPage + 1));\n      }\n    }\n\n    return Array.from({ length }, (_, i) => i + start);\n  }\n\n  /**\n   * On click page change\n   * @param newPage the new page of table\n   */\n  pageChange(newPage: number): void {\n    this.newPageEvent.emit(newPage - 1); // emit new page\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".page-item:not(.disabled) > a.page-link {\n  cursor: pointer;\n}\n",
                    "styleUrl": "./pagination.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "pages": {
                    "name": "pages",
                    "getSignature": {
                        "name": "pages",
                        "type": "",
                        "returnType": "Array<number>",
                        "line": 33,
                        "rawdescription": "\n\nCreate array to generate pagination of 5 element\n",
                        "description": "<p>Create array to generate pagination of 5 element</p>\n"
                    }
                }
            },
            "templateData": "<nav class=\"pagination-wrapper\"\n     [class.justify-content-center]=\"alignment==='center'\"\n     [class.justify-content-end]=\"alignment==='end'\">\n  <ul class=\"pagination\">\n    <li class=\"page-item\" [class.disabled]=\"currentPage < 1\">\n      <a class=\"page-link\" (click)=\"pageChange(currentPage)\">\n        <it-icon name=\"chevron-left\" color=\"primary\"></it-icon>\n        <span class=\"visually-hidden\">{{'it.core.previous-page'|translate}}</span>\n      </a>\n    </li>\n\n    <ng-container *ngIf=\"pageNumbers > 5 && currentPage > 2\">\n      <li class=\"page-item\"><a class=\"page-link\" (click)=\"pageChange(1)\">1</a></li>\n      <li class=\"page-item\" *ngIf=\"currentPage > 3\">\n        <span class=\"page-link\">...</span>\n      </li>\n    </ng-container>\n\n    <li class=\"page-item\" *ngFor=\"let page of pages\">\n      <a class=\"page-link\" aria-current=\"page\" *ngIf=\"page === (currentPage + 1); else inactivePage\">\n        <span class=\"d-inline-block d-sm-none\">{{'it.core.page'|translate}}</span> {{page}}\n      </a>\n      <ng-template #inactivePage>\n        <a class=\"page-link\" (click)=\"pageChange(page)\">{{page}}</a>\n      </ng-template>\n    </li>\n\n    <ng-container *ngIf=\"pageNumbers > 5 && pageNumbers - currentPage > 3\">\n      <li class=\"page-item\">\n        <span class=\"page-link\">...</span>\n      </li>\n      <li class=\"page-item\"><a class=\"page-link\" (click)=\"pageChange(pageNumbers)\">{{pageNumbers}}</a></li>\n    </ng-container>\n\n    <li class=\"page-item\" [class.disabled]=\"currentPage >= pageNumbers - 1\">\n      <a class=\"page-link\" (click)=\"pageChange(currentPage + 2)\">\n        <span class=\"visually-hidden\">{{'it.core.next-page'|translate}}</span>\n        <it-icon name=\"chevron-right\" color=\"primary\"></it-icon>\n      </a>\n    </li>\n  </ul>\n</nav>\n"
        },
        {
            "name": "PasswordInputComponent",
            "id": "component-PasswordInputComponent-cb6f5f74e3afa9d01db450e60ef55ea9f616e31d5f46f2fdfa1bfcd464b3e31ceccc8c95acd6e2cf02671ecccbf2ee42b42e731638de524093ad00e1cd6a0bdf",
            "file": "projects/design-angular-kit/src/lib/components/form/password-input/password-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-password-input[id]",
            "styleUrls": [
                "./password-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./password-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe input description\n",
                    "description": "<p>The input description</p>\n",
                    "line": 54,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "minLength",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 664,
                            "end": 679,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 665,
                                "end": 672,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>10</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe password minimum length\n",
                    "description": "<p>The password minimum length</p>\n",
                    "line": 20,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe input placeholder\n",
                    "description": "<p>The input placeholder</p>\n",
                    "line": 49,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showStrengthMeter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEnable to show the strength meter\n",
                    "description": "<p>Enable to show the strength meter</p>\n",
                    "line": 59,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "useCapitalCase",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 914,
                            "end": 931,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 915,
                                "end": 922,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe password must contain at least one uppercase character\n",
                    "description": "<p>The password must contain at least one uppercase character</p>\n",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "useNumber",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 780,
                            "end": 797,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 781,
                                "end": 788,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe password must contain at least one number\n",
                    "description": "<p>The password must contain at least one number</p>\n",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "useSmallCase",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1053,
                            "end": 1070,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 1054,
                                "end": 1061,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe password must contain at least one lowercase character\n",
                    "description": "<p>The password must contain at least one lowercase character</p>\n",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "useSpecialCharacters",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1188,
                            "end": 1205,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 1189,
                                "end": 1196,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe password must contain at least one special character\n",
                    "description": "<p>The password must contain at least one special character</p>\n",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label of form control\n",
                    "description": "<p>The label of form control</p>\n",
                    "line": 14,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "validationMode",
                    "defaultValue": "'only-invalid'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 975,
                            "end": 1043,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 976,
                                "end": 983,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p><b>only-invalid</b>: Show only invalid validation color</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nValidation color display mode (validation triggered if field is touched or not pristine)\n- <b>true</b>: Always show the validation color\n- <b>false</b>: Never show validation color\n- <b>only-valid</b>: Show only valid validation color\n- <b>only-invalid</b>: Show only invalid validation color\n",
                    "description": "<p>Validation color display mode (validation triggered if field is touched or not pristine)</p>\n<ul>\n<li><b>true</b>: Always show the validation color</li>\n<li><b>false</b>: Never show validation color</li>\n<li><b>only-valid</b>: Show only valid validation color</li>\n<li><b>only-invalid</b>: Show only invalid validation color</li>\n</ul>\n",
                    "line": 24,
                    "type": "BooleanInput | \"only-valid\" | \"only-invalid\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 9,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "inputElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": true,
                    "description": "",
                    "line": 64,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "inputPasswordBs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "<p>Internal form control</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nInternal form control\n",
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "addValidators",
                    "args": [
                        {
                            "name": "validators",
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd the validators in control and parent control\n",
                    "description": "<p>Add the validators in control and parent control</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3969,
                                "end": 3979,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "validators"
                            },
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3963,
                                "end": 3968,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the validators</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "getError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.\n",
                    "description": "<p>Reports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5231,
                                "end": 5240,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5225,
                                "end": 5230,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5284,
                                "end": 5288,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5278,
                                "end": 5283,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5427,
                                "end": 5434,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>error data for that particular error. If the control or error is not present,\nnull is returned.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.\n",
                    "description": "<p>Reports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4641,
                                "end": 4650,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4635,
                                "end": 4640,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4694,
                                "end": 4698,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 4688,
                                "end": 4693,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 4837,
                                "end": 4844,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>whether the given error is present in the control at the given path.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMark the control as touched\n",
                    "description": "<p>Mark the control as touched</p>\n",
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired to check if form control is touched\n",
                    "description": "<p>Fired to check if form control is touched</p>\n",
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Input, ViewChild } from '@angular/core';\nimport { AbstractFormComponent } from '../../../abstracts/abstract-form-component';\nimport { ItValidators } from '../../../validators/it-validators';\nimport { Observable } from 'rxjs';\nimport { BooleanInput, isTrueBooleanInput } from '../../../utils/boolean-input';\n\nimport { InputPassword } from 'bootstrap-italia';\n\n@Component({\n  selector: 'it-password-input[id]',\n  templateUrl: './password-input.component.html',\n  styleUrls: ['./password-input.component.scss']\n})\nexport class PasswordInputComponent extends AbstractFormComponent<string> {\n\n  /**\n   * The password minimum length\n   * @default 10\n   */\n  @Input() minLength: number = 10;\n\n  /**\n   * The password must contain at least one number\n   * @default true\n   */\n  @Input() useNumber: boolean = true;\n\n  /**\n   * The password must contain at least one uppercase character\n   * @default true\n   */\n  @Input() useCapitalCase: boolean = true;\n\n  /**\n   * The password must contain at least one lowercase character\n   * @default true\n   */\n  @Input() useSmallCase: boolean = true;\n\n  /**\n   * The password must contain at least one special character\n   * @default true\n   */\n  @Input() useSpecialCharacters: boolean = true;\n\n  /**\n   * The input placeholder\n   */\n  @Input() placeholder: string = '';\n\n  /**\n   * The input description\n   */\n  @Input() description?: string;\n\n  /**\n   * Enable to show the strength meter\n   */\n  @Input() showStrengthMeter?: BooleanInput;\n\n  inputPasswordBs?: any;\n\n  @ViewChild('input')\n  private inputElement?: ElementRef<HTMLInputElement>;\n\n  override ngOnInit() {\n    super.ngOnInit();\n\n    this.addValidators(ItValidators.password(\n      this.minLength,\n      this.useNumber,\n      this.useCapitalCase,\n      this.useSmallCase,\n      this.useSpecialCharacters\n    ));\n  }\n\n  override ngAfterViewInit() {\n    super.ngAfterViewInit();\n\n    if (this.inputElement) {\n      this.inputPasswordBs = new InputPassword(this.inputElement.nativeElement, {\n        ...this.description && { enterPass: this.description },\n        showText: this.isStrengthMeter,\n        minimumLength: this.minLength\n      });\n    }\n  }\n\n  get isStrengthMeter(): boolean {\n    return isTrueBooleanInput(this.showStrengthMeter);\n  }\n\n  /**\n   * Return the invalid message string from TranslateService\n   */\n  override get invalidMessage(): Observable<string> {\n    if (this.hasError('noPasswordMatch')) {\n      return this._translateService.get('it.errors.password-no-match');\n    }\n    if (this.hasError('minlength')) {\n      return this._translateService.get('it.errors.password-min-length', {\n        minLength: this.minLength\n      });\n    }\n    if (this.hasError('hasNumber')) {\n      return this._translateService.get('it.errors.password-number');\n    }\n    if (this.hasError('hasCapitalCase')) {\n      return this._translateService.get('it.errors.password-capital-case');\n    }\n    if (this.hasError('hasSmallCase')) {\n      return this._translateService.get('it.errors.password-capital-case');\n    }\n    if (this.hasError('hasSpecialCharacters')) {\n      return this._translateService.get('it.errors.password-special-character');\n    }\n\n    return super.invalidMessage;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-group {\n  input:focus:not(.focus--mouse) {\n    box-shadow: inherit !important;\n    border-color: inherit !important;\n  }\n}\n",
                    "styleUrl": "./password-input.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "AbstractFormComponent",
            "accessors": {
                "isStrengthMeter": {
                    "name": "isStrengthMeter",
                    "getSignature": {
                        "name": "isStrengthMeter",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 90
                    }
                },
                "invalidMessage": {
                    "name": "invalidMessage",
                    "getSignature": {
                        "name": "invalidMessage",
                        "type": "",
                        "returnType": "Observable<string>",
                        "line": 97,
                        "rawdescription": "\n\nReturn the invalid message string from TranslateService\n",
                        "description": "<p>Return the invalid message string from TranslateService</p>\n"
                    }
                }
            },
            "templateData": "<div class=\"form-group\">\n\n  <label *ngIf=\"label\" [for]=\"id\" [class.active]=\"!!control.value || !!placeholder\">{{label}}</label>\n\n  <input type=\"password\"\n         [id]=\"id\"\n         class=\"form-control input-password\"\n         [class.input-password-strength-meter]=\"isStrengthMeter\"\n         [class.is-invalid]=\"isInvalid\"\n         [class.is-valid]=\"isValid\"\n         [formControl]=\"control\"\n         [placeholder]=\"placeholder\"\n         [attr.aria-describedby]=\"id + '-description'\" #input>\n\n  <span class=\"password-icon\" aria-hidden=\"true\">\n    <it-icon name=\"password-visible\" size=\"sm\" class=\"password-icon-visible\"></it-icon>\n    <it-icon name=\"password-invisible\" size=\"sm\" class=\"password-icon-invisible d-none\"></it-icon>\n  </span>\n\n  <small *ngIf=\"description && !isStrengthMeter\" [id]=\"id + '-description'\" class=\"form-text\">{{description}}</small>\n\n  <div *ngIf=\"isInvalid\" class=\"form-feedback just-validate-error-label\" [id]=\"id + '-error'\">\n    <div #customError><ng-content select=\"[error]\"></ng-content></div>\n    <ng-container *ngIf=\"!customError.hasChildNodes()\">{{invalidMessage | async}}</ng-container>\n  </div>\n</div>\n"
        },
        {
            "name": "ProgressBarComponent",
            "id": "component-ProgressBarComponent-43f5085be3b2e9ce216f7446440e4f5448e4bb660fc26352eef7646be2074f6873b765f492296d9e65c72bad41581c799fa43c61236495a5ee112e8b59ccc76d",
            "file": "projects/design-angular-kit/src/lib/components/core/progress-bar/progress-bar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-progress-bar[value]",
            "styleUrls": [
                "./progress-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./progress-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe progress bar color\n",
                    "description": "<p>The progress bar color</p>\n",
                    "line": 31,
                    "type": "ProgressBarColor",
                    "decorators": []
                },
                {
                    "name": "indeterminate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow the progress as indeterminate\n",
                    "description": "<p>Show the progress as indeterminate</p>\n",
                    "line": 26,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "showLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow the progress label\n",
                    "description": "<p>Show the progress label</p>\n",
                    "line": 21,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe progress bar value [0, 100]\n",
                    "description": "<p>The progress bar value [0, 100]</p>\n",
                    "line": 16,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { ProgressBarColor } from '../../../interfaces/core';\nimport { BooleanInput, isTrueBooleanInput } from '../../../utils/boolean-input';\n\n@Component({\n  selector: 'it-progress-bar[value]',\n  templateUrl: './progress-bar.component.html',\n  styleUrls: ['./progress-bar.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ProgressBarComponent {\n\n  /**\n   * The progress bar value [0, 100]\n   */\n  @Input() value!: number;\n\n  /**\n   * Show the progress label\n   */\n  @Input() showLabel?: BooleanInput;\n\n  /**\n   * Show the progress as indeterminate\n   */\n  @Input() indeterminate?: BooleanInput;\n\n  /**\n   * The progress bar color\n   */\n  @Input() color?: ProgressBarColor;\n\n  /**\n   * Return the background color\n   */\n  get bgColor(): string {\n    if (!this.color) {\n      return '';\n    }\n\n    return ` bg-${this.color}`;\n  }\n\n  get isIndeterminate(): boolean {\n    return isTrueBooleanInput(this.indeterminate);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./progress-bar.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "bgColor": {
                    "name": "bgColor",
                    "getSignature": {
                        "name": "bgColor",
                        "type": "string",
                        "returnType": "string",
                        "line": 36,
                        "rawdescription": "\n\nReturn the background color\n",
                        "description": "<p>Return the background color</p>\n"
                    }
                },
                "isIndeterminate": {
                    "name": "isIndeterminate",
                    "getSignature": {
                        "name": "isIndeterminate",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 44
                    }
                }
            },
            "templateData": "<div class=\"progress-bar-wrapper\">\n  <div *ngIf=\"showLabel\" class=\"progress-bar-label\">\n    <span class=\"visually-hidden\">{{'it.core.progress'|translate}} </span>{{value}}%\n  </div>\n  <div class=\"progress\"\n       [class.progress-color]=\"!!color\"\n       [class.progress-indeterminate]=\"isIndeterminate\">\n\n    <div *ngIf=\"isIndeterminate; else determinate\" class=\"progress-bar{{bgColor}}\" role=\"progressbar\"></div>\n    <ng-template #determinate>\n      <div class=\"progress-bar{{bgColor}}\" role=\"progressbar\" [style.width.%]=\"value\"\n           [attr.aria-valuenow]=\"value\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n    </ng-template>\n  </div>\n</div>\n"
        },
        {
            "name": "ProgressButtonComponent",
            "id": "component-ProgressButtonComponent-4385316a67b08430006bcac99cf0a9db0628c60a53b1031c5298c0c158494dad51611eaed70fcec5128e5247f37fba8a6da17e7ca983589943eaea4dd63939dd",
            "file": "projects/design-angular-kit/src/lib/components/core/progress-button/progress-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "button[itButton][progress]",
            "styleUrls": [
                "./progress-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./progress-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "progress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 699,
                            "end": 721,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 700,
                                "end": 707,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>undefined</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nBehavior of the progress bar\n- <b>true</b>: Show indeterminate progress bar\n- <b>false</b> or <b>undefined</b>: Hide progress bar\n- <b>number</b> [0, 100]: Assign a specific value to the progress bar\n",
                    "description": "<p>Behavior of the progress bar</p>\n<ul>\n<li><b>true</b>: Show indeterminate progress bar</li>\n<li><b>false</b> or <b>undefined</b>: Hide progress bar</li>\n<li><b>number</b> [0, 100]: Assign a specific value to the progress bar</li>\n</ul>\n",
                    "line": 20,
                    "type": "number | BooleanInput",
                    "decorators": []
                },
                {
                    "name": "progressColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe progress bar color\n",
                    "description": "<p>The progress bar color</p>\n",
                    "line": 25,
                    "type": "ProgressBarColor",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { BooleanInput, isTrueBooleanInput } from '../../../utils/boolean-input';\nimport { ProgressBarColor } from '../../../interfaces/core';\n\n@Component({\n  selector: 'button[itButton][progress]',\n  templateUrl: './progress-button.component.html',\n  styleUrls: ['./progress-button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ProgressButtonComponent {\n\n  /**\n   * Behavior of the progress bar\n   * - <b>true</b>: Show indeterminate progress bar\n   * - <b>false</b> or <b>undefined</b>: Hide progress bar\n   * - <b>number</b> [0, 100]: Assign a specific value to the progress bar\n   * @default undefined\n   */\n  @Input() progress?: number | BooleanInput;\n\n  /**\n   * The progress bar color\n   */\n  @Input() progressColor?: ProgressBarColor;\n\n  get isProgress(): boolean {\n    return typeof this.progress === 'number' || isTrueBooleanInput(this.progress);\n  }\n\n  get progressValue(): number {\n    return typeof this.progress === 'number' ? this.progress : 0;\n  }\n\n  get isIndeterminate(): boolean {\n    return typeof this.progress !== 'number' && isTrueBooleanInput(this.progress);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./progress-button.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "isProgress": {
                    "name": "isProgress",
                    "getSignature": {
                        "name": "isProgress",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 27
                    }
                },
                "progressValue": {
                    "name": "progressValue",
                    "getSignature": {
                        "name": "progressValue",
                        "type": "number",
                        "returnType": "number",
                        "line": 31
                    }
                },
                "isIndeterminate": {
                    "name": "isIndeterminate",
                    "getSignature": {
                        "name": "isIndeterminate",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 35
                    }
                }
            },
            "templateData": "<ng-content></ng-content>\n\n<it-progress-bar *ngIf=\"isProgress\"\n                 [value]=\"progressValue\"\n                 [indeterminate]=\"isIndeterminate\"\n                 [color]=\"progressColor\"></it-progress-bar>\n"
        },
        {
            "name": "RadioButtonComponent",
            "id": "component-RadioButtonComponent-7d0bdd1ac4733983bcb51f54588474505a622dad5c7a9ec430898fbc9aecdd647dd3e52f48f29224e464fbea82507a1a33dfa94815476c9524d77b5f6cf2ec00",
            "file": "projects/design-angular-kit/src/lib/components/form/radio-button/radio-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-radio-button[id][value]",
            "styleUrls": [
                "./radio-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./radio-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf is radio is checked\n",
                    "description": "<p>If is radio is checked</p>\n",
                    "line": 32,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "group",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 678,
                            "end": 696,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 679,
                                "end": 686,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIf is radio group\n",
                    "description": "<p>If is radio group</p>\n",
                    "line": 27,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "inline",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 581,
                            "end": 599,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 582,
                                "end": 589,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIf show radio inline\n",
                    "description": "<p>If show radio inline</p>\n",
                    "line": 21,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe radio value\n",
                    "description": "<p>The radio value</p>\n",
                    "line": 15,
                    "type": "string | number",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label of form control\n",
                    "description": "<p>The label of form control</p>\n",
                    "line": 14,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "validationMode",
                    "defaultValue": "'only-invalid'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 975,
                            "end": 1043,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 976,
                                "end": 983,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p><b>only-invalid</b>: Show only invalid validation color</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nValidation color display mode (validation triggered if field is touched or not pristine)\n- <b>true</b>: Always show the validation color\n- <b>false</b>: Never show validation color\n- <b>only-valid</b>: Show only valid validation color\n- <b>only-invalid</b>: Show only invalid validation color\n",
                    "description": "<p>Validation color display mode (validation triggered if field is touched or not pristine)</p>\n<ul>\n<li><b>true</b>: Always show the validation color</li>\n<li><b>false</b>: Never show validation color</li>\n<li><b>only-valid</b>: Show only valid validation color</li>\n<li><b>only-invalid</b>: Show only invalid validation color</li>\n</ul>\n",
                    "line": 24,
                    "type": "BooleanInput | \"only-valid\" | \"only-invalid\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 9,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "<p>Internal form control</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nInternal form control\n",
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "addValidators",
                    "args": [
                        {
                            "name": "validators",
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd the validators in control and parent control\n",
                    "description": "<p>Add the validators in control and parent control</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3969,
                                "end": 3979,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "validators"
                            },
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3963,
                                "end": 3968,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the validators</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "getError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.\n",
                    "description": "<p>Reports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5231,
                                "end": 5240,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5225,
                                "end": 5230,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5284,
                                "end": 5288,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5278,
                                "end": 5283,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5427,
                                "end": 5434,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>error data for that particular error. If the control or error is not present,\nnull is returned.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.\n",
                    "description": "<p>Reports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4641,
                                "end": 4650,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4635,
                                "end": 4640,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4694,
                                "end": 4698,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 4688,
                                "end": 4693,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 4837,
                                "end": 4844,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>whether the given error is present in the control at the given path.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMark the control as touched\n",
                    "description": "<p>Mark the control as touched</p>\n",
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired to check if form control is touched\n",
                    "description": "<p>Fired to check if form control is touched</p>\n",
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { AbstractFormComponent } from '../../../abstracts/abstract-form-component';\nimport { BooleanInput, isFalseBooleanInput, isTrueBooleanInput } from '../../../utils/boolean-input';\n\n@Component({\n  selector: 'it-radio-button[id][value]',\n  templateUrl: './radio-button.component.html',\n  styleUrls: ['./radio-button.component.scss']\n})\nexport class RadioButtonComponent extends AbstractFormComponent<string | number> {\n\n  /**\n   * The radio value\n   */\n  @Input() value?: string | number;\n\n  /**\n   * If show radio inline\n   * @default false\n   */\n  @Input() inline: BooleanInput = false;\n\n  /**\n   * If is radio group\n   * @default false\n   */\n  @Input() group: BooleanInput = false;\n\n  /**\n   * If is radio is checked\n   */\n  @Input() checked?: BooleanInput;\n\n  get isInline(): boolean {\n    return isTrueBooleanInput(this.inline);\n  }\n\n  get isGroup(): boolean {\n    return isTrueBooleanInput(this.group);\n  }\n\n  get name(): string {\n    return this._ngControl?.name?.toString() || '';\n  }\n\n  override ngOnInit() {\n    super.ngOnInit();\n\n    if (this.control.value || !this.value || isFalseBooleanInput(this.checked)) {\n      return;\n    }\n\n    this.writeValue(this.value);\n    return this.onChange(this.value);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "//@import 'bootstrap-italia/src/scss/functions';\n//@import 'bootstrap-italia/src/scss/utilities/colors_vars';\n//\n//.form-check {\n//\n//  [type=radio].is-invalid:not(:checked) + label::after,\n//  [type=radio].is-invalid:not(:checked) + label::before {\n//    border-color: $danger;\n//  }\n//\n//  [type=radio].is-invalid:not(:checked) + label {\n//    color: $danger;\n//  }\n//}\n",
                    "styleUrl": "./radio-button.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "AbstractFormComponent",
            "accessors": {
                "isInline": {
                    "name": "isInline",
                    "getSignature": {
                        "name": "isInline",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 34
                    }
                },
                "isGroup": {
                    "name": "isGroup",
                    "getSignature": {
                        "name": "isGroup",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 38
                    }
                },
                "name": {
                    "name": "name",
                    "getSignature": {
                        "name": "name",
                        "type": "string",
                        "returnType": "string",
                        "line": 42
                    }
                }
            },
            "templateData": "<ng-container>\n  <div class=\"form-check\"\n       [class.form-check-group]=\"isGroup\"\n       [class.form-check-inline]=\"isInline\">\n\n    <input\n      [id]=\"id\"\n      type=\"radio\"\n      [value]=\"value\"\n      class=\"form-check-input\"\n      [name]=\"name\"\n      [class.is-invalid]=\"isInvalid\"\n      [class.is-valid]=\"isValid\"\n      [formControl]=\"control\"\n      [attr.aria-describedby]=\"id + '-help'\">\n\n    <label class=\"form-check-label\" [for]=\"id\">\n      <div #customLabel>\n        <ng-content select=\"[label]\"></ng-content>\n      </div>\n      <ng-container *ngIf=\"!customLabel.hasChildNodes()\">{{label}}</ng-container>\n    </label>\n\n    <small *ngIf=\"isGroup\" [id]=\"id + '-help'\" class=\"form-text\">\n      <ng-content></ng-content>\n    </small>\n\n    <div *ngIf=\"isInvalid && isGroup\" class=\"form-feedback just-validate-error-label\" [id]=\"id + '-error'\">\n      <div #customError>\n        <ng-content select=\"[error]\"></ng-content>\n      </div>\n      <ng-container *ngIf=\"!customError.hasChildNodes()\">{{invalidMessage | async}}</ng-container>\n    </div>\n\n  </div>\n\n  <div *ngIf=\"isInvalid && !isGroup\" class=\"form-feedback just-validate-error-label\" [id]=\"id + '-error'\">\n    <div #customError>\n      <ng-content select=\"[error]\"></ng-content>\n    </div>\n    <ng-container *ngIf=\"!customError.hasChildNodes()\">{{invalidMessage | async}}</ng-container>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-7b5a30fdde4bb26286ba28d7464f2e81ec0b508a8b900881ee4d97970d0da910f040e36fd814e7069a71342458db8b3ed5147ff18d421680914a9102e46a478a",
            "file": "projects/design-angular-kit/src/lib/components/form/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-select[id][options]",
            "styleUrls": [
                "./select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe select description\n",
                    "description": "<p>The select description</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "groups",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe select group options\n",
                    "description": "<p>The select group options</p>\n",
                    "line": 20,
                    "type": "Array<SelectControlGroup>",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe select options\n",
                    "description": "<p>The select options</p>\n",
                    "line": 15,
                    "type": "Array<SelectControlOption>",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label of form control\n",
                    "description": "<p>The label of form control</p>\n",
                    "line": 14,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "validationMode",
                    "defaultValue": "'only-invalid'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 975,
                            "end": 1043,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 976,
                                "end": 983,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p><b>only-invalid</b>: Show only invalid validation color</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nValidation color display mode (validation triggered if field is touched or not pristine)\n- <b>true</b>: Always show the validation color\n- <b>false</b>: Never show validation color\n- <b>only-valid</b>: Show only valid validation color\n- <b>only-invalid</b>: Show only invalid validation color\n",
                    "description": "<p>Validation color display mode (validation triggered if field is touched or not pristine)</p>\n<ul>\n<li><b>true</b>: Always show the validation color</li>\n<li><b>false</b>: Never show validation color</li>\n<li><b>only-valid</b>: Show only valid validation color</li>\n<li><b>only-invalid</b>: Show only invalid validation color</li>\n</ul>\n",
                    "line": 24,
                    "type": "BooleanInput | \"only-valid\" | \"only-invalid\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 9,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "<p>Internal form control</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nInternal form control\n",
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "optionIsDisabled",
                    "args": [
                        {
                            "name": "option",
                            "type": "SelectControlOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the option is disabled\n",
                    "description": "<p>Check if the option is disabled</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1584,
                                "end": 1590,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "option"
                            },
                            "type": "SelectControlOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1578,
                                "end": 1583,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the option</p>\n"
                        }
                    ]
                },
                {
                    "name": "optionIsSelected",
                    "args": [
                        {
                            "name": "option",
                            "type": "SelectControlOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the option is selected\n",
                    "description": "<p>Check if the option is selected</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1255,
                                "end": 1261,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "option"
                            },
                            "type": "SelectControlOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1249,
                                "end": 1254,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the option</p>\n"
                        }
                    ]
                },
                {
                    "name": "addValidators",
                    "args": [
                        {
                            "name": "validators",
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd the validators in control and parent control\n",
                    "description": "<p>Add the validators in control and parent control</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3969,
                                "end": 3979,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "validators"
                            },
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3963,
                                "end": 3968,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the validators</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "getError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.\n",
                    "description": "<p>Reports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5231,
                                "end": 5240,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5225,
                                "end": 5230,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5284,
                                "end": 5288,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5278,
                                "end": 5283,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5427,
                                "end": 5434,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>error data for that particular error. If the control or error is not present,\nnull is returned.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.\n",
                    "description": "<p>Reports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4641,
                                "end": 4650,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4635,
                                "end": 4640,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4694,
                                "end": 4698,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 4688,
                                "end": 4693,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 4837,
                                "end": 4844,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>whether the given error is present in the control at the given path.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMark the control as touched\n",
                    "description": "<p>Mark the control as touched</p>\n",
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired to check if form control is touched\n",
                    "description": "<p>Fired to check if form control is touched</p>\n",
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { AbstractFormComponent } from '../../../abstracts/abstract-form-component';\nimport { SelectControlGroup, SelectControlOption } from '../../../interfaces/form';\n\n@Component({\n  selector: 'it-select[id][options]',\n  templateUrl: './select.component.html',\n  styleUrls: ['./select.component.scss']\n})\nexport class SelectComponent extends AbstractFormComponent {\n\n  /**\n   * The select options\n   */\n  @Input() options!: Array<SelectControlOption>;\n\n  /**\n   * The select group options\n   */\n  @Input() groups?: Array<SelectControlGroup>;\n\n  /**\n   * The select description\n   */\n  @Input() description?: string;\n\n  override ngOnInit() {\n    super.ngOnInit();\n\n    if (this.control.value) {\n      return;\n    }\n    const selectedOption = this.options.find(this.optionIsSelected);\n    if (selectedOption) {\n      this.writeValue(selectedOption.value);\n      return this.onChange(selectedOption.value);\n    }\n\n    const selectedGroupOption = this.groups?.flatMap(g => g.options).find(this.optionIsSelected);\n    if (selectedGroupOption) {\n      this.writeValue(selectedGroupOption.value);\n      this.onChange(selectedGroupOption.value);\n    }\n  }\n\n  /**\n   * Check if the option is selected\n   * @param option the option\n   */\n  optionIsSelected(option: SelectControlOption): boolean {\n    if (option.selected === true) {\n      return true;\n    }\n\n    if (typeof option.selected === 'function') {\n      return option.selected(this.control.value);\n    }\n\n    return false;\n  }\n\n  /**\n   * Check if the option is disabled\n   * @param option the option\n   */\n  optionIsDisabled(option: SelectControlOption): boolean {\n    if (option.disabled === true) {\n      return true;\n    }\n\n    if (typeof option.disabled === 'function') {\n      return option.disabled(this.control.value);\n    }\n\n    return false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".select-wrapper {\n  margin-bottom: 1.7rem;\n}\n",
                    "styleUrl": "./select.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "AbstractFormComponent",
            "templateData": "<div class=\"select-wrapper\">\n  <label [for]=\"id\">{{label}}</label>\n  <select [id]=\"id\" [formControl]=\"control\" [attr.aria-describedby]=\"id + '-description'\">\n    <option *ngFor=\"let option of options\" [disabled]=\"optionIsDisabled(option)\" [value]=\"option.value\">\n      {{option.text ?? option.value}}\n    </option>\n\n    <ng-container *ngIf=\"groups\">\n      <optgroup *ngFor=\"let group of groups\" [label]=\"group.label\">\n        <option *ngFor=\"let option of group.options\" [disabled]=\"optionIsDisabled(option)\" [value]=\"option.value\">\n          {{option.text ?? option.value}}\n        </option>\n      </optgroup>\n    </ng-container>\n  </select>\n  <small *ngIf=\"description\" [id]=\"id + '-description'\" class=\"form-text\">{{description}}</small>\n</div>\n"
        },
        {
            "name": "SpinnerComponent",
            "id": "component-SpinnerComponent-bec89288d35ecc31ecce9b22a9d7d95ac17fa9abf87ab173b5613181c34c82fa5769b09df2ac36be27052575e789671c2e3cb756bdab5d2d011259768b4736e7",
            "file": "projects/design-angular-kit/src/lib/components/core/spinner/spinner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-spinner",
            "styleUrls": [
                "./spinner.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./spinner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "active",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe spinner is active\n",
                    "description": "<p>The spinner is active</p>\n",
                    "line": 14,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "double",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow the double animation\n",
                    "description": "<p>Show the double animation</p>\n",
                    "line": 24,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "small",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow a small spinner\n",
                    "description": "<p>Show a small spinner</p>\n",
                    "line": 19,
                    "type": "BooleanInput",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {BooleanInput, isTrueBooleanInput} from \"../../../utils/boolean-input\";\n\n@Component({\n  selector: 'it-spinner',\n  templateUrl: './spinner.component.html',\n  styleUrls: ['./spinner.component.scss']\n})\nexport class SpinnerComponent {\n\n  /**\n   * The spinner is active\n   */\n  @Input() active: BooleanInput = true;\n\n  /**\n   * Show a small spinner\n   */\n  @Input() small?: BooleanInput;\n\n  /**\n   * Show the double animation\n   */\n  @Input() double?: BooleanInput;\n\n  get isActive(): boolean {\n    return isTrueBooleanInput(this.active);\n  }\n\n  get isSmall(): boolean {\n    return isTrueBooleanInput(this.small);\n  }\n\n  get isDouble(): boolean {\n    return isTrueBooleanInput(this.double);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./spinner.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "isActive": {
                    "name": "isActive",
                    "getSignature": {
                        "name": "isActive",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 26
                    }
                },
                "isSmall": {
                    "name": "isSmall",
                    "getSignature": {
                        "name": "isSmall",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 30
                    }
                },
                "isDouble": {
                    "name": "isDouble",
                    "getSignature": {
                        "name": "isDouble",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 34
                    }
                }
            },
            "templateData": "<div class=\"progress-spinner\"\n     [class.progress-spinner-double]=\"isDouble\"\n     [class.progress-spinner-active]=\"isActive\"\n     [class.size-sm]=\"isSmall\">\n  <div *ngIf=\"isDouble\" class=\"progress-spinner-inner\"></div>\n  <div *ngIf=\"isDouble\" class=\"progress-spinner-inner\"></div>\n  <span class=\"visually-hidden\">{{'it.core.loading'|translate}}...</span>\n</div>\n"
        },
        {
            "name": "SteppersContainerComponent",
            "id": "component-SteppersContainerComponent-6a3884274738c18307db5434ef6b208026d69ed5f84af7e25f66bf3281a59969fcb4b31945a54f5949f41eef87254678a7a1c909c4749baa7208f41657ccfc6d",
            "file": "projects/design-angular-kit/src/lib/components/core/steppers/steppers-container/steppers-container.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-steppers-container[activeStep]",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./steppers-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeStep",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 683,
                            "end": 714,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 338,
                            "tagName": {
                                "pos": 684,
                                "end": 689,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the step index</p>\n",
                            "name": {
                                "pos": 690,
                                "end": 695,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "index"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "rawdescription": "\n\nThe active step index\n",
                    "description": "<p>The active step index</p>\n",
                    "line": 27,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "confirmLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow the confirm button as indeterminate progress button\n",
                    "description": "<p>Show the confirm button as indeterminate progress button</p>\n",
                    "line": 79,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "dark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDark style\n",
                    "description": "<p>Dark style</p>\n",
                    "line": 38,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "progressColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCustomize progress color\n",
                    "description": "<p>Customize progress color</p>\n",
                    "line": 56,
                    "type": "ProgressBarColor",
                    "decorators": []
                },
                {
                    "name": "progressStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1242,
                            "end": 1286,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 1243,
                                "end": 1250,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>undefined - don&#39;t show progress</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe progress style\n-<b>progress</b>: Show progress bar - You can change the color with the `progressColor` attribute\n-<b>dots</b>: Show progress dots\n",
                    "description": "<p>The progress style\n-<b>progress</b>: Show progress bar - You can change the color with the <code>progressColor</code> attribute\n-<b>dots</b>: Show progress dots</p>\n",
                    "line": 51,
                    "type": "\"progress\" | \"dots\"",
                    "decorators": []
                },
                {
                    "name": "saveLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow the save button as indeterminate progress button\n",
                    "description": "<p>Show the save button as indeterminate progress button</p>\n",
                    "line": 90,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "showBackButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1463,
                            "end": 1480,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 1464,
                                "end": 1471,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nShow the back button\n",
                    "description": "<p>Show the back button</p>\n",
                    "line": 62,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "showConfirmButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1684,
                            "end": 1702,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 1685,
                                "end": 1692,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nShow the confirm button\n",
                    "description": "<p>Show the confirm button</p>\n",
                    "line": 74,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "showForwardButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1572,
                            "end": 1589,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 1573,
                                "end": 1580,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nShow the forward button\n",
                    "description": "<p>Show the forward button</p>\n",
                    "line": 68,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "showHeader",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 790,
                            "end": 807,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 791,
                                "end": 798,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nShow the stepper header\n",
                    "description": "<p>Show the stepper header</p>\n",
                    "line": 33,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "showSaveButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1912,
                            "end": 1930,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 1913,
                                "end": 1920,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nShow the save button\n",
                    "description": "<p>Show the save button</p>\n",
                    "line": 85,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "steppersNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe labels present in the header steps can be anticipated by the relative ordinal number.\n",
                    "description": "<p>The labels present in the header steps can be anticipated by the relative ordinal number.</p>\n",
                    "line": 43,
                    "type": "BooleanInput",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "backClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOn back button click\n",
                    "description": "<p>On back button click</p>\n",
                    "jsdoctags": [
                        {
                            "pos": 2251,
                            "end": 2295,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 2252,
                                "end": 2257,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "comment": "<p>activeStep the current step index</p>\n"
                        }
                    ],
                    "line": 101,
                    "type": "EventEmitter<number>"
                },
                {
                    "name": "confirmClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOn confirm button click\n",
                    "description": "<p>On confirm button click</p>\n",
                    "jsdoctags": [
                        {
                            "pos": 2520,
                            "end": 2564,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 2521,
                                "end": 2526,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "comment": "<p>activeStep the current step index</p>\n"
                        }
                    ],
                    "line": 113,
                    "type": "EventEmitter<number>"
                },
                {
                    "name": "forwardClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOn forward button click\n",
                    "description": "<p>On forward button click</p>\n",
                    "jsdoctags": [
                        {
                            "pos": 2384,
                            "end": 2428,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 2385,
                                "end": 2390,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "comment": "<p>activeStep the current step index</p>\n"
                        }
                    ],
                    "line": 107,
                    "type": "EventEmitter<number>"
                },
                {
                    "name": "saveClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOn save button click\n",
                    "description": "<p>On save button click</p>\n",
                    "jsdoctags": [
                        {
                            "pos": 2653,
                            "end": 2697,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 2654,
                                "end": 2659,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "comment": "<p>activeStep the current step index</p>\n"
                        }
                    ],
                    "line": 119,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "steps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<SteppersItemComponent>",
                    "optional": true,
                    "description": "<p>The stepper items</p>\n",
                    "line": 95,
                    "rawdescription": "\n\nThe stepper items\n",
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "SteppersItemComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  Output,\n  QueryList\n} from '@angular/core';\nimport { BooleanInput, isTrueBooleanInput } from '../../../../utils/boolean-input';\nimport { SteppersItemComponent } from '../steppers-item/steppers-item.component';\nimport { ProgressBarColor } from '../../../../interfaces/core';\n\n@Component({\n  selector: 'it-steppers-container[activeStep]',\n  templateUrl: './steppers-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SteppersContainerComponent implements AfterViewInit {\n\n  /**\n   * The active step index\n   * @param index the step index\n   */\n  @Input() activeStep!: number;\n\n  /**\n   * Show the stepper header\n   * @default true\n   */\n  @Input() showHeader: BooleanInput = true;\n\n  /**\n   * Dark style\n   */\n  @Input() dark?: BooleanInput;\n\n  /**\n   * The labels present in the header steps can be anticipated by the relative ordinal number.\n   */\n  @Input() steppersNumber?: BooleanInput;\n\n  /**\n   * The progress style\n   * -<b>progress</b>: Show progress bar - You can change the color with the `progressColor` attribute\n   * -<b>dots</b>: Show progress dots\n   * @default undefined - don't show progress\n   */\n  @Input() progressStyle?: 'progress' | 'dots';\n\n  /**\n   * Customize progress color\n   */\n  @Input() progressColor?: ProgressBarColor;\n\n  /**\n   * Show the back button\n   * @default true\n   */\n  @Input() showBackButton: BooleanInput = true;\n\n  /**\n   * Show the forward button\n   * @default true\n   */\n  @Input() showForwardButton: BooleanInput = true;\n\n  /**\n   * Show the confirm button\n   * @default false\n   */\n  @Input() showConfirmButton: BooleanInput = false;\n\n  /**\n   * Show the confirm button as indeterminate progress button\n   */\n  @Input() confirmLoading?: BooleanInput;\n\n  /**\n   * Show the save button\n   * @default false\n   */\n  @Input() showSaveButton: BooleanInput = false;\n\n  /**\n   * Show the save button as indeterminate progress button\n   */\n  @Input() saveLoading?: BooleanInput;\n\n  /**\n   * The stepper items\n   */\n  @ContentChildren(SteppersItemComponent) steps?: QueryList<SteppersItemComponent>;\n\n  /**\n   * On back button click\n   * @event activeStep the current step index\n   */\n  @Output() backClick: EventEmitter<number>;\n\n  /**\n   * On forward button click\n   * @event activeStep the current step index\n   */\n  @Output() forwardClick: EventEmitter<number>;\n\n  /**\n   * On confirm button click\n   * @event activeStep the current step index\n   */\n  @Output() confirmClick: EventEmitter<number>;\n\n  /**\n   * On save button click\n   * @event activeStep the current step index\n   */\n  @Output() saveClick: EventEmitter<number>;\n\n  get isShowHeader(): boolean {\n    return isTrueBooleanInput(this.showHeader);\n  }\n\n  get isSteppersNumber(): boolean {\n    return isTrueBooleanInput(this.steppersNumber);\n  }\n\n  get isDark(): boolean {\n    return isTrueBooleanInput(this.dark);\n  }\n\n  get isShowBackButton(): boolean {\n    return isTrueBooleanInput(this.showBackButton);\n  }\n\n  get isShowForwardButton(): boolean {\n    return isTrueBooleanInput(this.showForwardButton);\n  }\n\n  get isShowConfirmButton(): boolean {\n    return isTrueBooleanInput(this.showConfirmButton);\n  }\n\n  get isConfirmLoading(): boolean {\n    return isTrueBooleanInput(this.confirmLoading);\n  }\n\n  get isShowSaveButton(): boolean {\n    return isTrueBooleanInput(this.showSaveButton);\n  }\n\n  get isSaveLoading(): boolean {\n    return isTrueBooleanInput(this.saveLoading);\n  }\n\n  constructor(\n    private readonly _changeDetectorRef: ChangeDetectorRef\n  ) {\n    this.backClick = new EventEmitter<number>();\n    this.forwardClick = new EventEmitter<number>();\n    this.confirmClick = new EventEmitter<number>();\n    this.saveClick = new EventEmitter<number>();\n  }\n\n  ngAfterViewInit(): void {\n    this._changeDetectorRef.detectChanges();\n\n    this.steps?.changes.subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 155,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit"
            ],
            "accessors": {
                "isShowHeader": {
                    "name": "isShowHeader",
                    "getSignature": {
                        "name": "isShowHeader",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 121
                    }
                },
                "isSteppersNumber": {
                    "name": "isSteppersNumber",
                    "getSignature": {
                        "name": "isSteppersNumber",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 125
                    }
                },
                "isDark": {
                    "name": "isDark",
                    "getSignature": {
                        "name": "isDark",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 129
                    }
                },
                "isShowBackButton": {
                    "name": "isShowBackButton",
                    "getSignature": {
                        "name": "isShowBackButton",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 133
                    }
                },
                "isShowForwardButton": {
                    "name": "isShowForwardButton",
                    "getSignature": {
                        "name": "isShowForwardButton",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 137
                    }
                },
                "isShowConfirmButton": {
                    "name": "isShowConfirmButton",
                    "getSignature": {
                        "name": "isShowConfirmButton",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 141
                    }
                },
                "isConfirmLoading": {
                    "name": "isConfirmLoading",
                    "getSignature": {
                        "name": "isConfirmLoading",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 145
                    }
                },
                "isShowSaveButton": {
                    "name": "isShowSaveButton",
                    "getSignature": {
                        "name": "isShowSaveButton",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 149
                    }
                },
                "isSaveLoading": {
                    "name": "isSaveLoading",
                    "getSignature": {
                        "name": "isSaveLoading",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 153
                    }
                }
            },
            "templateData": "<div class=\"steppers\" [class.bg-dark]=\"isDark\">\n  <div *ngIf=\"isShowHeader\" class=\"steppers-header\">\n    <ul>\n      <li *ngFor=\"let step of steps; let i = index\"\n          [class.confirmed]=\"i < activeStep\"\n          [class.active]=\"i === activeStep\"\n          [class.no-line]=\"i === activeStep && isSteppersNumber\">\n\n        <it-icon *ngIf=\"step.icon && !isSteppersNumber\" [name]=\"step.icon\"></it-icon>\n        <span *ngIf=\"isSteppersNumber\" class=\"steppers-number\">\n          <ng-container *ngIf=\"i < activeStep; else showNumber\">\n            <ng-container *ngTemplateOutlet=\"checkIcon\"></ng-container>\n          </ng-container>\n          <ng-template #showNumber>\n            <span class=\"visually-hidden\">{{'it.core.step' | translate}} </span>{{i + 1}}\n          </ng-template>\n        </span>\n\n        {{step.label}}\n\n        <span *ngIf=\"i < activeStep && !isSteppersNumber\" class=\"ms-auto\">\n          <ng-container *ngTemplateOutlet=\"checkIcon\"></ng-container>\n        </span>\n        <span *ngIf=\"i === activeStep\" class=\"visually-hidden\">{{'it.core.active' | translate}}</span>\n      </li>\n    </ul>\n    <span class=\"steppers-index\" aria-hidden=\"true\">\n      <ng-container\n        *ngIf=\"!isSteppersNumber; else showNumbers\">{{(activeStep + 1) + '/' + steps?.length}}</ng-container>\n      <ng-template #showNumbers>\n        <span *ngFor=\"let step of steps; let i = index\" [class.active]=\"i === activeStep\">{{i + 1}}</span>\n      </ng-template>\n    </span>\n  </div>\n\n  <div *ngIf=\"steps?.get(activeStep) as step\" class=\"steppers-content\" aria-live=\"polite\">\n    <ng-container *ngTemplateOutlet=\"step.htmlContent\"></ng-container>\n  </div>\n\n  <nav *ngIf=\"isShowBackButton || isShowSaveButton || isShowForwardButton || isShowConfirmButton || !!progressStyle\"\n       class=\"steppers-nav\">\n    <button *ngIf=\"isShowBackButton\" type=\"button\" itButton=\"outline-primary\" size=\"sm\" class=\"steppers-btn-prev\"\n            (click)=\"backClick.emit(activeStep)\">\n      <it-icon name=\"chevron-left\" color=\"primary\"></it-icon>\n      {{'it.core.back' | translate}}\n    </button>\n\n    <ng-container *ngIf=\"!!progressStyle\">\n      <ul *ngIf=\"progressStyle === 'dots'; else progressBar\" class=\"steppers-dots\">\n        <li *ngFor=\"let step of steps; let i = index\" [class.done]=\"i < activeStep\">\n          <span class=\"visually-hidden\">\n            {{'it.core.step-of' | translate: { current: activeStep + 1, available: steps?.length } }}\n            {{i < activeStep ? ('- ' + ('it.core.confirmed' | translate)) : ''}}\n          </span>\n        </li>\n      </ul>\n\n      <ng-template #progressBar>\n        <div class=\"steppers-progress\">\n          <it-progress-bar [color]=\"progressColor\" [value]=\"(activeStep/(steps?.length||1)) * 100\"></it-progress-bar>\n        </div>\n      </ng-template>\n    </ng-container>\n\n    <button *ngIf=\"isShowSaveButton\" type=\"button\" itButton=\"primary\" size=\"sm\" class=\"steppers-btn-save\"\n            [progress]=\"isSaveLoading\" [disabled]=\"isSaveLoading\" (click)=\"saveClick.emit(activeStep)\">\n      {{'it.general.save' | translate}}\n    </button>\n\n    <button *ngIf=\"isShowForwardButton\" type=\"button\" itButton=\"outline-primary\" size=\"sm\" class=\"steppers-btn-next\"\n            (click)=\"forwardClick.emit(activeStep)\">\n      {{'it.core.forward' | translate}}\n      <it-icon name=\"chevron-right\" color=\"primary\"></it-icon>\n    </button>\n\n    <button *ngIf=\"isShowConfirmButton\" type=\"button\" itButton=\"primary\" size=\"sm\"\n            class=\"steppers-btn-confirm d-lg-block\"\n            [progress]=\"isConfirmLoading\" [disabled]=\"isConfirmLoading\"\n            (click)=\"confirmClick.emit(activeStep)\">\n      {{'it.core.confirm' | translate}}\n    </button>\n  </nav>\n</div>\n\n<ng-template #checkIcon>\n  <it-icon name=\"check\" class=\"steppers-success\"></it-icon>\n  <span class=\"visually-hidden\">{{'it.core.confirmed' | translate}}</span>\n</ng-template>\n"
        },
        {
            "name": "SteppersItemComponent",
            "id": "component-SteppersItemComponent-dd8c5082c8fad97941dbdcc86ec912abbf59885b0100bfd029143499ebf5186065bd5d852ed348f2ce0681a4c1d7a26c9ad128306fcb63b2ae6b141ac4a28be3",
            "file": "projects/design-angular-kit/src/lib/components/core/steppers/steppers-item/steppers-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-steppers-item[label]",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./steppers-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe labels present in the header steps can be preceded by an icon.\n",
                    "description": "<p>The labels present in the header steps can be preceded by an icon.</p>\n",
                    "line": 19,
                    "type": "IconName",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe labels present in the header steps\n",
                    "description": "<p>The labels present in the header steps</p>\n",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "htmlContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "<p>The content of step</p>\n",
                    "line": 24,
                    "rawdescription": "\n\nThe content of step\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TemplateRef"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, TemplateRef, ViewChild } from '@angular/core';\nimport { IconName } from '../../../../interfaces/icon';\n\n@Component({\n  selector: 'it-steppers-item[label]',\n  templateUrl: './steppers-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SteppersItemComponent {\n\n  /**\n   * The labels present in the header steps\n   */\n  @Input() label!: string;\n\n  /**\n   * The labels present in the header steps can be preceded by an icon.\n   */\n  @Input() icon?: IconName;\n\n  /**\n   * The content of step\n   */\n  @ViewChild(TemplateRef) public htmlContent!: TemplateRef<any>;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<ng-template>\n  <ng-content></ng-content>\n</ng-template>\n"
        },
        {
            "name": "TabContainerComponent",
            "id": "component-TabContainerComponent-419170eac98a584b4468bfa941aea201e4a18e0d08daeed70d3c5a884bad7727c47df40b8cdaea0cbdfb065cca7f6a2d815b8f7f3b1eb8e909265ee75e37d2c6",
            "file": "projects/design-angular-kit/src/lib/components/core/tab/tab-container/tab-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-tab-container",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tab-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "auto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTabs automatically occupy the entire available width\n",
                    "description": "<p>Tabs automatically occupy the entire available width</p>\n",
                    "line": 14,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "dark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDark style\n",
                    "description": "<p>Dark style</p>\n",
                    "line": 24,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "iconText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTo obtain the correct margin between text and icon in the horizontally developed tab\n",
                    "description": "<p>To obtain the correct margin between text and icon in the horizontally developed tab</p>\n",
                    "line": 19,
                    "type": "BooleanInput",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "tabs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<TabItemComponent>",
                    "optional": true,
                    "description": "<p>The tab items</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nThe tab items\n",
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TabItemComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "isTrueBooleanInput",
                    "args": [
                        {
                            "name": "booleanInput",
                            "type": "BooleanInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "booleanInput",
                            "type": "BooleanInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ChangeDetectorRef, Component, ContentChildren, Input, QueryList } from '@angular/core';\nimport { BooleanInput, isTrueBooleanInput } from '../../../../utils/boolean-input';\nimport { TabItemComponent } from '../tab-item/tab-item.component';\n\n@Component({\n  selector: 'it-tab-container',\n  templateUrl: './tab-container.component.html'\n})\nexport class TabContainerComponent implements AfterViewInit {\n\n  /**\n   * Tabs automatically occupy the entire available width\n   */\n  @Input() auto?: BooleanInput;\n\n  /**\n   * To obtain the correct margin between text and icon in the horizontally developed tab\n   */\n  @Input() iconText?: BooleanInput;\n\n  /**\n   * Dark style\n   */\n  @Input() dark?: BooleanInput;\n\n  /**\n   * The tab items\n   */\n  @ContentChildren(TabItemComponent) tabs?: QueryList<TabItemComponent>;\n\n  constructor(\n    private readonly _changeDetectorRef: ChangeDetectorRef\n  ) {\n  }\n\n  isTrueBooleanInput(booleanInput?: BooleanInput): boolean {\n    return isTrueBooleanInput(booleanInput);\n  }\n\n  ngAfterViewInit(): void {\n    this._changeDetectorRef.detectChanges();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<ul class=\"nav nav-tabs\"\n    [class.auto]=\"isTrueBooleanInput(auto)\"\n    [class.nav-tabs-icon-text]=\"isTrueBooleanInput(iconText)\"\n    [class.nav-dark]=\"isTrueBooleanInput(dark)\"\n    role=\"tablist\">\n\n  <li class=\"nav-item\" *ngFor=\"let tab of tabs\">\n    <a [id]=\"tab.id+'-tab-link'\"\n       role=\"tab\"\n       data-bs-toggle=\"tab\"\n       class=\"nav-link\"\n       [class.active]=\"isTrueBooleanInput(tab.active)\"\n       [class.disabled]=\"isTrueBooleanInput(tab.disabled)\"\n       [attr.href]=\"'#'+tab.id+'-tab'\"\n       [attr.aria-controls]=\"tab.id+'-tab'\">\n      <it-icon *ngIf=\"tab.icon\" [name]=\"tab.icon\"></it-icon>\n      {{tab.label}}\n    </a>\n  </li>\n</ul>\n\n<div class=\"tab-content\">\n  <div *ngFor=\"let tab of tabs\"\n       [id]=\"tab.id+'-tab'\"\n       class=\"tab-pane fade {{tab.class ?? ''}}\"\n       [class.active]=\"isTrueBooleanInput(tab.active)\"\n       [class.show]=\"isTrueBooleanInput(tab.active)\"\n       role=\"tabpanel\"\n       [attr.aria-labelledby]=\"tab.id+'-tab-link'\">\n    <ng-container *ngTemplateOutlet=\"tab.htmlContent\"></ng-container>\n  </div>\n</div>\n"
        },
        {
            "name": "TabItemComponent",
            "id": "component-TabItemComponent-d351d853fb48eeda9ec70bbb14915846ea4720f36780bf6d1e461cc943d43cd7e504d5a67a0a73eaed87aa77be4eb4e06df6635bcfb7203234afccb73aded479",
            "file": "projects/design-angular-kit/src/lib/components/core/tab/tab-item/tab-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-tab-item[id]",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tab-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefault active tab\n",
                    "description": "<p>Default active tab</p>\n",
                    "line": 25,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "class",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCustom class\n",
                    "description": "<p>Custom class</p>\n",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefault disabled tab\n",
                    "description": "<p>Default disabled tab</p>\n",
                    "line": 30,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe icon name\n",
                    "description": "<p>The icon name</p>\n",
                    "line": 20,
                    "type": "IconName",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe tab label\n",
                    "description": "<p>The tab label</p>\n",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 9,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "htmlContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "<p>The content of tab</p>\n",
                    "line": 40,
                    "rawdescription": "\n\nThe content of tab\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TemplateRef"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, TemplateRef, ViewChild } from '@angular/core';\nimport { AbstractComponent } from '../../../../abstracts/abstract.component';\nimport { BooleanInput } from '../../../../utils/boolean-input';\nimport { IconName } from '../../../../interfaces/icon';\n\n@Component({\n  selector: 'it-tab-item[id]',\n  templateUrl: './tab-item.component.html'\n})\nexport class TabItemComponent extends AbstractComponent {\n\n  /**\n   * The tab label\n   */\n  @Input() label?: string;\n\n  /**\n   * The icon name\n   */\n  @Input() icon?: IconName;\n\n  /**\n   * Default active tab\n   */\n  @Input() active?: BooleanInput;\n\n  /**\n   * Default disabled tab\n   */\n  @Input() disabled?: BooleanInput;\n\n  /**\n   * Custom class\n   */\n  @Input() class: string = '';\n\n  /**\n   * The content of tab\n   */\n  @ViewChild(TemplateRef) public htmlContent!: TemplateRef<any>;\n\n  override ngAfterViewInit() {\n    super.ngAfterViewInit();\n    this._renderer.removeAttribute(this._elementRef.nativeElement, 'class');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": "AbstractComponent",
            "templateData": "<ng-template>\n  <ng-content></ng-content>\n</ng-template>\n"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-f3d9bbe755ab61268b52a4e2136ae07414f1e5565a0afc5cc78b492ca7555a771d91734aad92d5b8d8a1a98b7e6fc6dd1b76b3ccdc01ff3d66cfa65aff643cb7",
            "file": "projects/design-angular-kit/src/lib/components/core/table/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-table",
            "styleUrls": [
                "./table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "alignment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUse vertical alignment classes to realign where needed.\n",
                    "description": "<p>Use vertical alignment classes to realign where needed.</p>\n",
                    "line": 25,
                    "type": "VerticalAlignment",
                    "decorators": []
                },
                {
                    "name": "bordered",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd .table-bordered to have borders on all sides of the table and on all cells.\n",
                    "description": "<p>Add .table-bordered to have borders on all sides of the table and on all cells.</p>\n",
                    "line": 40,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "borderless",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd the .table-borderless class for a borderless table.\n",
                    "description": "<p>Add the .table-borderless class for a borderless table.</p>\n",
                    "line": 45,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "captionTop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTo render the <caption> on top of the table\n",
                    "description": "<p>To render the <caption> on top of the table</p>\n",
                    "line": 55,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTable color\n",
                    "description": "<p>Table color</p>\n",
                    "line": 15,
                    "type": "TableColor",
                    "decorators": []
                },
                {
                    "name": "compact",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd .table-sm to make tables more compact by halving the cell padding.\n",
                    "description": "<p>Add .table-sm to make tables more compact by halving the cell padding.</p>\n",
                    "line": 50,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "headColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHead table color\n",
                    "description": "<p>Head table color</p>\n",
                    "line": 20,
                    "type": "TableHeadColor",
                    "decorators": []
                },
                {
                    "name": "hover",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd .table-hover to enable hover state on table rows contained in <tbody>.\n",
                    "description": "<p>Add .table-hover to enable hover state on table rows contained in <tbody>.</p>\n",
                    "line": 35,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "responsive",
                    "defaultValue": "'responsive'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1450,
                            "end": 1473,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 1451,
                                "end": 1458,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>responsive</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nResponsive tables allow you to scroll tables horizontally with ease.\n",
                    "description": "<p>Responsive tables allow you to scroll tables horizontally with ease.</p>\n",
                    "line": 61,
                    "type": "TableResponsive",
                    "decorators": []
                },
                {
                    "name": "striped",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUse .table-striped to add zebra stripes to each table row contained in <tbody>.\n",
                    "description": "<p>Use .table-striped to add zebra stripes to each table row contained in <tbody>.</p>\n",
                    "line": 30,
                    "type": "BooleanInput",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {TableColor, TableHeadColor, TableResponsive, VerticalAlignment} from \"../../../interfaces/core\";\nimport {BooleanInput, isTrueBooleanInput} from \"../../../utils/boolean-input\";\n\n@Component({\n  selector: 'it-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.scss']\n})\nexport class TableComponent {\n\n  /**\n   * Table color\n   */\n  @Input() color?: TableColor;\n\n  /**\n   * Head table color\n   */\n  @Input() headColor?: TableHeadColor;\n\n  /**\n   * Use vertical alignment classes to realign where needed.\n   */\n  @Input() alignment?: VerticalAlignment;\n\n  /**\n   * Use .table-striped to add zebra stripes to each table row contained in <tbody>.\n   */\n  @Input() striped?: BooleanInput;\n\n  /**\n   * Add .table-hover to enable hover state on table rows contained in <tbody>.\n   */\n  @Input() hover?: BooleanInput;\n\n  /**\n   * Add .table-bordered to have borders on all sides of the table and on all cells.\n   */\n  @Input() bordered?: BooleanInput;\n\n  /**\n   * Add the .table-borderless class for a borderless table.\n   */\n  @Input() borderless?: BooleanInput;\n\n  /**\n   * Add .table-sm to make tables more compact by halving the cell padding.\n   */\n  @Input() compact?: BooleanInput;\n\n  /**\n   * To render the <caption> on top of the table\n   */\n  @Input() captionTop?: BooleanInput;\n\n  /**\n   * Responsive tables allow you to scroll tables horizontally with ease.\n   * @default responsive\n   */\n  @Input() responsive: TableResponsive = 'responsive';\n\n\n  get isStriped(): boolean {\n    return isTrueBooleanInput(this.striped);\n  }\n\n  get isHover(): boolean {\n    return isTrueBooleanInput(this.hover);\n  }\n\n  get isBordered(): boolean {\n    return isTrueBooleanInput(this.bordered);\n  }\n\n  get isBorderless(): boolean {\n    return isTrueBooleanInput(this.borderless);\n  }\n\n  get isCompact(): boolean {\n    return isTrueBooleanInput(this.compact);\n  }\n\n  get isCaptionTop(): boolean {\n    return isTrueBooleanInput(this.captionTop);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "caption:empty {\n  display: none;\n}\n\ncaption:empty ~ thead {\n  border-top: none !important;\n}\n",
                    "styleUrl": "./table.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "isStriped": {
                    "name": "isStriped",
                    "getSignature": {
                        "name": "isStriped",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 64
                    }
                },
                "isHover": {
                    "name": "isHover",
                    "getSignature": {
                        "name": "isHover",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 68
                    }
                },
                "isBordered": {
                    "name": "isBordered",
                    "getSignature": {
                        "name": "isBordered",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 72
                    }
                },
                "isBorderless": {
                    "name": "isBorderless",
                    "getSignature": {
                        "name": "isBorderless",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 76
                    }
                },
                "isCompact": {
                    "name": "isCompact",
                    "getSignature": {
                        "name": "isCompact",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 80
                    }
                },
                "isCaptionTop": {
                    "name": "isCaptionTop",
                    "getSignature": {
                        "name": "isCaptionTop",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 84
                    }
                }
            },
            "templateData": "<div [class]=\"responsive ? 'table-' + responsive : undefined\">\n  <table class=\"table{{color ? ' table-' + color : '' }}\"\n         [class.table-striped]=\"isStriped\"\n         [class.table-hover]=\"isHover\"\n         [class.table-bordered]=\"isBordered\"\n         [class.table-borderless]=\"isBorderless\"\n         [class.table-sm]=\"isCompact\"\n         [class.caption-top]=\"isCaptionTop\">\n    <caption>\n      <ng-content select=\"[caption]\"></ng-content>\n    </caption>\n    <thead [class]=\"headColor ? 'table-' + headColor : undefined\">\n    <ng-content select=\"[thead]\"></ng-content>\n    </thead>\n    <tbody>\n    <ng-content select=\"[tbody]\"></ng-content>\n    </tbody>\n    <tfoot>\n    <ng-content select=\"[tfoot]\"></ng-content>\n    </tfoot>\n  </table>\n</div>\n"
        },
        {
            "name": "TextareaComponent",
            "id": "component-TextareaComponent-63e8b08b650aed4aea9b4864fff8497b7b35bce65f192e098e2dfc910d1204198a0672986492233f3654176575144cf2d63fcda40005a95b70675567fd986b55",
            "file": "projects/design-angular-kit/src/lib/components/form/textarea/textarea.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-textarea[id]",
            "styleUrls": [
                "./textarea.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./textarea.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe input description\n",
                    "description": "<p>The input description</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe textarea placeholder\n",
                    "description": "<p>The textarea placeholder</p>\n",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "rows",
                    "defaultValue": "3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 406,
                            "end": 420,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 407,
                                "end": 414,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>3</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nTextarea Rows\n",
                    "description": "<p>Textarea Rows</p>\n",
                    "line": 16,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label of form control\n",
                    "description": "<p>The label of form control</p>\n",
                    "line": 14,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "validationMode",
                    "defaultValue": "'only-invalid'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 975,
                            "end": 1043,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 976,
                                "end": 983,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p><b>only-invalid</b>: Show only invalid validation color</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nValidation color display mode (validation triggered if field is touched or not pristine)\n- <b>true</b>: Always show the validation color\n- <b>false</b>: Never show validation color\n- <b>only-valid</b>: Show only valid validation color\n- <b>only-invalid</b>: Show only invalid validation color\n",
                    "description": "<p>Validation color display mode (validation triggered if field is touched or not pristine)</p>\n<ul>\n<li><b>true</b>: Always show the validation color</li>\n<li><b>false</b>: Never show validation color</li>\n<li><b>only-valid</b>: Show only valid validation color</li>\n<li><b>only-invalid</b>: Show only invalid validation color</li>\n</ul>\n",
                    "line": 24,
                    "type": "BooleanInput | \"only-valid\" | \"only-invalid\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 9,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "<p>Internal form control</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nInternal form control\n",
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addValidators",
                    "args": [
                        {
                            "name": "validators",
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd the validators in control and parent control\n",
                    "description": "<p>Add the validators in control and parent control</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3969,
                                "end": 3979,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "validators"
                            },
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3963,
                                "end": 3968,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the validators</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "getError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.\n",
                    "description": "<p>Reports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5231,
                                "end": 5240,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5225,
                                "end": 5230,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5284,
                                "end": 5288,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5278,
                                "end": 5283,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5427,
                                "end": 5434,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>error data for that particular error. If the control or error is not present,\nnull is returned.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.\n",
                    "description": "<p>Reports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4641,
                                "end": 4650,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4635,
                                "end": 4640,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4694,
                                "end": 4698,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 4688,
                                "end": 4693,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 4837,
                                "end": 4844,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>whether the given error is present in the control at the given path.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMark the control as touched\n",
                    "description": "<p>Mark the control as touched</p>\n",
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired to check if form control is touched\n",
                    "description": "<p>Fired to check if form control is touched</p>\n",
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFormComponent"
                    }
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { AbstractFormComponent } from '../../../abstracts/abstract-form-component';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'it-textarea[id]',\n  templateUrl: './textarea.component.html',\n  styleUrls: ['./textarea.component.scss']\n})\nexport class TextareaComponent extends AbstractFormComponent<string> {\n\n  /**\n   * Textarea Rows\n   * @default 3\n   */\n  @Input() rows?: number = 3;\n\n  /**\n   * The textarea placeholder\n   */\n  @Input() placeholder: string = '';\n\n  /**\n   * The input description\n   */\n  @Input() description?: string;\n\n  /**\n   * Return the invalid message string from TranslateService\n   */\n  override get invalidMessage(): Observable<string> {\n    if (this.control.hasError('maxlength')) {\n      const error = this.getError('maxlength');\n      return this._translateService.get('it.errors.max-length-invalid', { max: error.requiredLength });\n    }\n    if (this.control.hasError('pattern')) {\n      const error = this.getError('pattern');\n      return this._translateService.get('it.errors.pattern-invalid', { pattern: error.requiredPattern });\n    }\n\n    return super.invalidMessage;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'bootstrap-italia/src/scss/functions';\n@import 'bootstrap-italia/src/scss/utilities/colors_vars';\n\ntextarea {\n  &.is-invalid {\n    border-color: $danger;\n  }\n\n  //&.is-valid {\n  //  border-color: $success;\n  //}\n}\n",
                    "styleUrl": "./textarea.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "AbstractFormComponent",
            "accessors": {
                "invalidMessage": {
                    "name": "invalidMessage",
                    "getSignature": {
                        "name": "invalidMessage",
                        "type": "",
                        "returnType": "Observable<string>",
                        "line": 31,
                        "rawdescription": "\n\nReturn the invalid message string from TranslateService\n",
                        "description": "<p>Return the invalid message string from TranslateService</p>\n"
                    }
                }
            },
            "templateData": "<div class=\"form-group\">\n  <label *ngIf=\"label\" [for]=\"id\" [class.active]=\"!!control.value || !!placeholder\">{{label}}</label>\n  <textarea\n    [id]=\"id\"\n    [rows]=\"rows\"\n    [class.is-invalid]=\"isInvalid\"\n    [class.is-valid]=\"isValid\"\n    [placeholder]=\"placeholder\"\n    [formControl]=\"control\"\n    (blur)=\"markAsTouched()\"></textarea>\n\n  <small *ngIf=\"description\" [id]=\"id + '-description'\" class=\"form-text\">{{description}}</small>\n  <div *ngIf=\"isInvalid\" class=\"form-feedback just-validate-error-label\" [id]=\"id + '-error'\">\n    <div #customError><ng-content select=\"[error]\"></ng-content></div>\n    <ng-container *ngIf=\"!customError.hasChildNodes()\">{{invalidMessage | async}}</ng-container>\n  </div>\n</div>\n"
        },
        {
            "name": "UploadDragDropComponent",
            "id": "component-UploadDragDropComponent-ae954789699e6f32681a6e93310ef1c287ac9e28c5b76296b93e98b23537ca8c6aac57236c3e3a180746a5252d81d78e34917f86673afbff168bb961a3788640",
            "file": "projects/design-angular-kit/src/lib/components/form/upload-drag-drop/upload-drag-drop.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "itUploadDragDrop",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-upload-drag-drop[id]",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./upload-drag-drop.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "accept",
                    "defaultValue": "'*'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 703,
                            "end": 743,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 704,
                                "end": 711,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "example"
                            },
                            "comment": "<p>application/pdf,image/png</p>\n"
                        },
                        {
                            "pos": 743,
                            "end": 757,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 744,
                                "end": 751,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<ul>\n<li></li>\n</ul>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe accepted file type to upload <br>\nPossible values: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\">MIME Types</a> separated by comma\n```html\n```",
                    "description": "<p>The accepted file type to upload <br>\nPossible values: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\">MIME Types</a> separated by comma</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\"></code></pre></div>",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 9,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "fileStartUpload",
                    "defaultValue": "new EventEmitter<File>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when file start to upload\n",
                    "description": "<p>Fired when file start to upload</p>\n",
                    "line": 24,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "donut",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "donutElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "optional": true,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'donutElement'"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "extension",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "filename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "fileSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "isDragover",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "isSuccess",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                },
                {
                    "name": "onDragLeave",
                    "args": [
                        {
                            "name": "evt",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragleave', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDragOver",
                    "args": [
                        {
                            "name": "evt",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragover', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDrop",
                    "args": [
                        {
                            "name": "evt",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'drop', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLoadFile",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOn load file from input\n",
                    "description": "<p>On load file from input</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2120,
                                "end": 2125,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2114,
                                "end": 2119,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "progress",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPercentage of upload\n",
                    "description": "<p>Percentage of upload</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2800,
                                "end": 2805,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2794,
                                "end": 2799,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the percentage [0 - 100]</p>\n"
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReset file uploader\n",
                    "description": "<p>Reset file uploader</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "start",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStart the upload file\n",
                    "description": "<p>Start the upload file</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2350,
                                "end": 2354,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "file"
                            },
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2344,
                                "end": 2349,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "success",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpload success\n",
                    "description": "<p>Upload success</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "dragleave",
                    "args": [
                        {
                            "name": "evt",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57
                },
                {
                    "name": "dragover",
                    "args": [
                        {
                            "name": "evt",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "evt",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, HostListener, Input, Output, ViewChild } from '@angular/core';\nimport { AbstractComponent } from '../../../abstracts/abstract.component';\nimport { FileUtils } from '../../../utils/file-utils';\nimport { ProgressDonut } from 'bootstrap-italia';\n\n@Component({\n  selector: 'it-upload-drag-drop[id]',\n  templateUrl: './upload-drag-drop.component.html',\n  exportAs: 'itUploadDragDrop'\n})\nexport class UploadDragDropComponent extends AbstractComponent {\n\n  /**\n   * The accepted file type to upload <br>\n   * Possible values: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\">MIME Types</a> separated by comma\n   * @example application/pdf,image/png\n   * @default *\n   */\n  @Input() accept: string = '*';\n\n  /**\n   * Fired when file start to upload\n   */\n  @Output() fileStartUpload = new EventEmitter<File>();\n\n  isDragover: boolean = false;\n  isLoading: boolean = false;\n  isSuccess: boolean = false;\n\n  donut?: any;\n\n  @ViewChild('donutElement')\n  private donutElement?: ElementRef<HTMLDivElement>;\n\n  filename?: string;\n  extension?: string;\n  fileSize?: string;\n\n  override ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    if (this.donutElement) {\n      this.donut = ProgressDonut.getOrCreateInstance(this.donutElement.nativeElement);\n    }\n  }\n\n  // Dragover listener\n  @HostListener('dragover', ['$event'])\n  public onDragOver(evt: DragEvent): void {\n    evt.preventDefault();\n    evt.stopPropagation();\n    this.isDragover = !this.isLoading;\n  }\n\n\n  // Dragleave listener\n  @HostListener('dragleave', ['$event'])\n  public onDragLeave(evt: DragEvent): void {\n    evt.preventDefault();\n    evt.stopPropagation();\n    this.isDragover = false;\n  }\n\n  // Drop leave listener\n  @HostListener('drop', ['$event'])\n  public onDrop(evt: DragEvent): void {\n    evt.preventDefault();\n    evt.stopPropagation();\n\n    this.isDragover = false;\n    const files = evt.dataTransfer?.files;\n    if (this.isLoading || !files?.length) {\n      return;\n    }\n    this.start(files[0]);\n  }\n\n  /**\n   * On load file from input\n   * @param event\n   */\n  onLoadFile(event: Event): void {\n    const files = (event.target as HTMLInputElement)?.files;\n    if (!files?.length) {\n      return;\n    }\n    this.start(files[0]);\n  }\n\n  /**\n   * Start the upload file\n   * @param file\n   */\n  public start(file: File): void {\n    if (this.accept !== '*' && !this.accept.includes(file.type)) {\n      return;\n    }\n\n    this.reset();\n    this.isLoading = true;\n\n    const splitName = file.name.split('.');\n    this.filename = splitName[0];\n    this.extension = splitName[1]?.toUpperCase();\n    this.fileSize = FileUtils.getFileSizeString(file);\n\n    this.fileStartUpload.emit(file);\n  }\n\n  /**\n   * Percentage of upload\n   * @param value the percentage [0 - 100]\n   */\n  public progress(value: number) {\n    if (!this.isLoading) {\n      return;\n    }\n\n    if (value >= 100) {\n      this.success();\n    } else {\n      this.donut?.set(((value < 0) ? 0 : value) / 100);\n    }\n  }\n\n  /**\n   * Upload success\n   */\n  public success(): void {\n    this.isLoading = false;\n    this.isSuccess = true;\n  }\n\n  /**\n   * Reset file uploader\n   */\n  public reset(): void {\n    this.isLoading = false;\n    this.isSuccess = false;\n    this.filename = this.extension = this.fileSize = undefined;\n    this.donut?.set(0);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": "AbstractComponent",
            "templateData": "<div class=\"upload-dragdrop\" [class.dragover]=\"isDragover\" [class.loading]=\"isLoading\" [class.success]=\"isSuccess\">\n  <div class=\"upload-dragdrop-image\">\n    <img src=\"/bootstrap-italia/dist/assets/upload-drag-drop-icon.svg\" alt=\"drag-drop-icon\" aria-hidden=\"true\">\n    <div class=\"upload-dragdrop-loading\">\n      <div class=\"progress-donut\" #donutElement></div>\n    </div>\n    <div class=\"upload-dragdrop-success\">\n      <it-icon name=\"check\"></it-icon>\n    </div>\n  </div>\n  <div class=\"upload-dragdrop-text\">\n    <p class=\"upload-dragdrop-weight\">\n      <it-icon name=\"file\" size=\"xs\"></it-icon>\n      {{extension}} ({{fileSize}})\n    </p>\n    <h5>{{filename || ('it.form.upload-drag-file'|translate)}}</h5>\n    <p *ngIf=\"isLoading\">{{'it.form.upload-loading'|translate}}</p>\n    <p *ngIf=\"isSuccess\">{{'it.form.upload-complete'|translate}}</p>\n    <p *ngIf=\"!isLoading && !isSuccess\">{{'it.form.upload-or'|translate}}\n      <input type=\"file\" [id]=\"id\" class=\"upload-dragdrop-input\" [accept]=\"accept\" (change)=\"onLoadFile($event)\"/>\n      <label [for]=\"id\">{{'it.form.upload-select-device'|translate}}</label>\n    </p>\n  </div>\n</div>\n"
        },
        {
            "name": "UploadFileListComponent",
            "id": "component-UploadFileListComponent-a32ddb19f98c1a74c21e7511f6ee0edc0eda4485731ae3c49f515be08183400ab9a75a14f79b0f76aaca110cf3c3db98e765dd66fdb6629f2c6e45c6ebec626a",
            "file": "projects/design-angular-kit/src/lib/components/form/upload-file-list/upload-file-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-upload-file-list[id][fileList]",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./upload-file-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "accept",
                    "defaultValue": "\"*\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 919,
                            "end": 959,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 920,
                                "end": 927,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "example"
                            },
                            "comment": "<p>application/pdf,image/png</p>\n"
                        },
                        {
                            "pos": 959,
                            "end": 973,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 960,
                                "end": 967,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<ul>\n<li></li>\n</ul>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe accepted file type to upload <br>\nPossible values: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\">MIME Types</a> separated by comma\n```html\n```",
                    "description": "<p>The accepted file type to upload <br>\nPossible values: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\">MIME Types</a> separated by comma</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\"></code></pre></div>",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "fileList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe list of files to show in list\n",
                    "description": "<p>The list of files to show in list</p>\n",
                    "line": 17,
                    "type": "Array<UploadFileListItem>",
                    "decorators": []
                },
                {
                    "name": "hideLoadButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHide the load button\n",
                    "description": "<p>Hide the load button</p>\n",
                    "line": 40,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "images",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf is file list image\n",
                    "description": "<p>If is file list image</p>\n",
                    "line": 35,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf upload multiple files\n",
                    "description": "<p>If upload multiple files</p>\n",
                    "line": 30,
                    "type": "BooleanInput",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 9,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "deleteItem",
                    "defaultValue": "new EventEmitter<UploadFileListItem>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired on delete item button click\n",
                    "description": "<p>Fired on delete item button click</p>\n",
                    "line": 50,
                    "type": "EventEmitter<UploadFileListItem>"
                },
                {
                    "name": "uploadFiles",
                    "defaultValue": "new EventEmitter<FileList>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when upload new files\n",
                    "description": "<p>Fired when upload new files</p>\n",
                    "line": 45,
                    "type": "EventEmitter<FileList>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "previewImages",
                    "defaultValue": "new Map<number, string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | string>",
                    "optional": false,
                    "description": "<p>Cache to preview image</p>\n",
                    "line": 55,
                    "rawdescription": "\n\nCache to preview image\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "getFileSize",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet the file size string\n",
                    "description": "<p>Get the file size string</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2599,
                                "end": 2603,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "file"
                            },
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2593,
                                "end": 2598,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLoadFiles",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOn load file from input\n",
                    "description": "<p>On load file from input</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2348,
                                "end": 2353,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2342,
                                "end": 2347,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges} from '@angular/core';\nimport {AbstractComponent} from \"../../../abstracts/abstract.component\";\nimport {BooleanInput, isTrueBooleanInput} from \"../../../utils/boolean-input\";\nimport {UploadFileListItem} from \"../../../interfaces/form\";\nimport {FileUtils} from \"../../../utils/file-utils\";\nimport {take} from \"rxjs\";\n\n@Component({\n  selector: 'it-upload-file-list[id][fileList]',\n  templateUrl: './upload-file-list.component.html'\n})\nexport class UploadFileListComponent extends AbstractComponent implements OnInit, OnChanges {\n\n  /**\n   * The list of files to show in list\n   */\n  @Input() fileList!: Array<UploadFileListItem>;\n\n  /**\n   * The accepted file type to upload <br>\n   * Possible values: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\">MIME Types</a> separated by comma\n   * @example application/pdf,image/png\n   * @default *\n   */\n  @Input() accept: string = \"*\";\n\n  /**\n   * If upload multiple files\n   */\n  @Input() multiple: BooleanInput = true;\n\n  /**\n   * If is file list image\n   */\n  @Input() images?: BooleanInput;\n\n  /**\n   * Hide the load button\n   */\n  @Input() hideLoadButton?: BooleanInput;\n\n  /**\n   * Fired when upload new files\n   */\n  @Output() uploadFiles: EventEmitter<FileList> = new EventEmitter<FileList>();\n\n  /**\n   * Fired on delete item button click\n   */\n  @Output() deleteItem: EventEmitter<UploadFileListItem> = new EventEmitter<UploadFileListItem>();\n\n  /**\n   * Cache to preview image\n   */\n  previewImages: Map<number, string> = new Map<number, string>();\n\n  ngOnInit(): void {\n    if (this.isImageList && this.accept === '*') {\n      this.accept = 'image/*'\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['fileList'] && this.isImageList) {\n      this.fileList.forEach(item => {\n        FileUtils.fileToBase64(item.file).pipe(take(1)).subscribe(base64 => {\n          this.previewImages.set(item.id, base64);\n        })\n      })\n    }\n  }\n\n  get isMultipleInput(): boolean {\n    return isTrueBooleanInput(this.multiple);\n  }\n\n  get isImageList(): boolean {\n    return isTrueBooleanInput(this.images);\n  }\n\n  get isHideLoadButton(): boolean {\n    return isTrueBooleanInput(this.hideLoadButton);\n  }\n\n  /**\n   * On load file from input\n   * @param event\n   */\n  onLoadFiles(event: Event): void {\n    const files = (event.target as HTMLInputElement)?.files;\n    if (!files || !files.length) {\n      return;\n    }\n    this.uploadFiles.emit(files);\n  }\n\n  /**\n   * Get the file size string\n   * @param file\n   */\n  getFileSize(file: File): string {\n    return FileUtils.getFileSizeString(file);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": "AbstractComponent",
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "accessors": {
                "isMultipleInput": {
                    "name": "isMultipleInput",
                    "getSignature": {
                        "name": "isMultipleInput",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 73
                    }
                },
                "isImageList": {
                    "name": "isImageList",
                    "getSignature": {
                        "name": "isImageList",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 77
                    }
                },
                "isHideLoadButton": {
                    "name": "isHideLoadButton",
                    "getSignature": {
                        "name": "isHideLoadButton",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 81
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"!isHideLoadButton\">\n  <input type=\"file\" [id]=\"id\" class=\"upload\" [accept]=\"accept\" [multiple]=\"isMultipleInput\"\n         (change)=\"onLoadFiles($event)\" />\n  <label [for]=\"id\">\n    <it-icon name=\"upload\" size=\"sm\"></it-icon>\n    <span>{{'it.form.upload'|translate}}</span>\n  </label>\n</ng-container>\n\n<ul class=\"upload-file-list\" [class.upload-file-list-image]=\"isImageList\" *ngIf=\"fileList.length\">\n  <li *ngFor=\"let item of fileList\" class=\"upload-file\"\n      [class.error]=\"item.error\"\n      [class.uploading]=\"!item.error && item.progress !== undefined && item.progress > 0 && item.progress < 100\"\n      [class.success]=\"!item.error && (!item.progress || item.progress >= 100)\">\n\n    <div class=\"upload-image\" *ngIf=\"isImageList; else icon\">\n      <img [attr.src]=\"previewImages.get(item.id)\" [alt]=\"item.file.name\" />\n    </div>\n    <ng-template #icon>\n      <it-icon name=\"file\" size=\"sm\" [color]=\"!item.error ? (item.progress ? 'secondary' : 'primary') : 'danger'\"></it-icon>\n    </ng-template>\n\n    <p [itTooltip]=\"item.tooltip\">\n      <span class=\"visually-hidden\">{{'it.form.uploaded-file'|translate : { name: item.file.name } }}</span>\n      {{item.file.name}} <span class=\"upload-file-weight\">{{getFileSize(item.file)}}</span>\n    </p>\n\n    <button *ngIf=\"item.removable && (!item.progress || item.progress < 100)\" type=\"button\" (click)=\"deleteItem.emit(item)\">\n      <span class=\"visually-hidden\">{{'it.form.delete-file'|translate : { name: item.file.name } }}</span>\n      <it-icon name=\"close\"></it-icon>\n    </button>\n    <button *ngIf=\"(!item.removable && !item.progress) || (item.progress !== undefined && item.progress >= 100)\" type=\"button\" disabled>\n      <span class=\"visually-hidden\">{{'it.form.upload-complete'|translate}}</span>\n      <it-icon name=\"check\"></it-icon>\n    </button>\n\n    <it-progress-bar *ngIf=\"!item.error && item.progress !== undefined && item.progress > 0 && item.progress < 100\"\n                      [value]=\"item.progress\"></it-progress-bar>\n  </li>\n</ul>\n"
        }
    ],
    "modules": [
        {
            "name": "ComponentsModule",
            "id": "module-ComponentsModule-3173729fbdb2442b9c455aaa0939ac9e6dde4e20e283876cf6bf450326a20d468c36577de93e424446f867570a8461a2227e46ce57b2f8e3683599863d416289",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-angular-kit/src/lib/modules/components.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule, NgForOf, NgIf } from '@angular/common';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterLink } from '@angular/router';\nimport { AbstractFormComponent } from '../abstracts/abstract-form-component';\nimport { AbstractComponent } from '../abstracts/abstract.component';\nimport { AccordionComponent } from '../components/core/accordion/accordion.component';\nimport { AlertComponent } from '../components/core/alert/alert.component';\nimport { BadgeDirective } from '../components/core/badge/badge.directive';\nimport { ButtonDirective } from '../components/core/button/button.directive';\nimport { CalloutComponent } from '../components/core/callout/callout.component';\nimport { CardComponent } from '../components/core/card/card.component';\nimport { CarouselComponent } from '../components/core/carousel/carousel/carousel.component';\nimport { CarouselItemComponent } from '../components/core/carousel/carousel-item/carousel-item.component';\nimport { CollapseComponent } from '../components/core/collapse/collapse.component';\nimport { DropdownComponent } from '../components/core/dropdown/dropdown/dropdown.component';\nimport { DropdownItemComponent } from '../components/core/dropdown/dropdown-item/dropdown-item.component';\nimport { LinkComponent } from '../components/core/link/link.component';\nimport { ListComponent } from '../components/core/list/list/list.component';\nimport { ListItemComponent } from '../components/core/list/list-item/list-item.component';\nimport { ModalComponent } from '../components/core/modal/modal.component';\nimport { NotificationsComponent } from '../components/core/notifications/notifications.component';\nimport { PaginationComponent } from '../components/core/pagination/pagination.component';\nimport { PopoverDirective } from '../components/core/popover/popover.directive';\nimport { ProgressBarComponent } from '../components/core/progress-bar/progress-bar.component';\nimport { ProgressButtonComponent } from '../components/core/progress-button/progress-button.component';\nimport { SpinnerComponent } from '../components/core/spinner/spinner.component';\nimport {\n  SteppersContainerComponent\n} from '../components/core/steppers/steppers-container/steppers-container.component';\nimport { SteppersItemComponent } from '../components/core/steppers/steppers-item/steppers-item.component';\nimport { TabContainerComponent } from '../components/core/tab/tab-container/tab-container.component';\nimport { TabItemComponent } from '../components/core/tab/tab-item/tab-item.component';\nimport { TableComponent } from '../components/core/table/table.component';\nimport { TooltipDirective } from '../components/core/tooltip/tooltip.directive';\nimport { CheckboxComponent } from '../components/form/checkbox/checkbox.component';\nimport { InputComponent } from '../components/form/input/input.component';\nimport { PasswordInputComponent } from '../components/form/password-input/password-input.component';\nimport { RadioButtonComponent } from '../components/form/radio-button/radio-button.component';\nimport { SelectComponent } from '../components/form/select/select.component';\nimport { TextareaComponent } from '../components/form/textarea/textarea.component';\nimport { UploadDragDropComponent } from '../components/form/upload-drag-drop/upload-drag-drop.component';\nimport { UploadFileListComponent } from '../components/form/upload-file-list/upload-file-list.component';\nimport { BackButtonComponent } from '../components/navigation/back-button/back-button.component';\nimport { BackToTopComponent } from '../components/navigation/back-to-top/back-to-top.component';\nimport { BreadcrumbComponent } from '../components/navigation/breadcrumbs/breadcrumb/breadcrumb.component';\nimport {\n  BreadcrumbItemComponent\n} from '../components/navigation/breadcrumbs/breadcrumb-item/breadcrumb-item.component';\nimport { HeaderComponent } from '../components/navigation/header/header.component';\nimport { IconComponent } from '../components/utils/icon/icon.component';\nimport { LanguageSwitcherComponent } from '../components/utils/language-switcher/language-switcher.component';\nimport { NotFoundPageComponent } from '../components/utils/not-found-page/not-found-page.component';\nimport { ChipComponent } from '../components/core/chip/chip.component';\nimport { ForwardDirective } from '../components/core/forward/forward.directive';\nimport { DimmerComponent } from '../components/core/dimmer/dimmer.component';\nimport { DimmerButtonsComponent } from '../components/core/dimmer/dimmer-buttons/dimmer-buttons.component';\nimport { DimmerIconComponent } from '../components/core/dimmer/dimmer-icon/dimmer-icon.component';\nimport { MarkMatchingTextPipe } from '../pipes/mark-matching-text.pipe';\n\n\n/**\n * Core components\n */\nconst core = [\n  AccordionComponent,\n  AlertComponent,\n  BadgeDirective,\n  ButtonDirective,\n  CalloutComponent,\n  CardComponent,\n  CarouselComponent,\n  CarouselItemComponent,\n  ChipComponent,\n  CollapseComponent,\n  DimmerButtonsComponent,\n  DimmerComponent,\n  DimmerIconComponent,\n  DropdownComponent,\n  DropdownItemComponent,\n  ForwardDirective,\n  LinkComponent,\n  ListComponent,\n  ListItemComponent,\n  ModalComponent,\n  NotificationsComponent,\n  PaginationComponent,\n  PopoverDirective,\n  ProgressBarComponent,\n  ProgressButtonComponent,\n  SpinnerComponent,\n  SteppersContainerComponent,\n  SteppersItemComponent,\n  TabContainerComponent,\n  TabItemComponent,\n  TableComponent,\n  TooltipDirective\n];\n\n/**\n * Form components\n */\nconst form = [\n  CheckboxComponent,\n  InputComponent,\n  PasswordInputComponent,\n  RadioButtonComponent,\n  SelectComponent,\n  TextareaComponent,\n  UploadDragDropComponent,\n  UploadFileListComponent\n];\n\n/**\n * Navigation Components\n */\nconst navigation = [\n  BackButtonComponent,\n  BackToTopComponent,\n  BreadcrumbComponent,\n  BreadcrumbItemComponent,\n  HeaderComponent\n];\n\n/**\n * Utils components\n */\nconst utils = [\n  IconComponent,\n  NotFoundPageComponent,\n  LanguageSwitcherComponent,\n  MarkMatchingTextPipe\n];\n\n@NgModule({\n  declarations: [\n    AbstractComponent,\n    AbstractFormComponent,\n    ...core,\n    ...form,\n    ...navigation,\n    ...utils\n  ],\n  imports: [\n    CommonModule,\n    TranslateModule,\n    ReactiveFormsModule,\n    NgIf,\n    NgForOf,\n    RouterLink\n  ],\n  exports: [\n    ...core,\n    ...form,\n    ...navigation,\n    ...utils\n  ]\n})\nexport class ComponentsModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AbstractComponent"
                        },
                        {
                            "name": "AbstractFormComponent"
                        },
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AlertComponent"
                        },
                        {
                            "name": "BackButtonComponent"
                        },
                        {
                            "name": "BackToTopComponent"
                        },
                        {
                            "name": "BadgeDirective"
                        },
                        {
                            "name": "BreadcrumbComponent"
                        },
                        {
                            "name": "BreadcrumbItemComponent"
                        },
                        {
                            "name": "ButtonDirective"
                        },
                        {
                            "name": "CalloutComponent"
                        },
                        {
                            "name": "CardComponent"
                        },
                        {
                            "name": "CarouselComponent"
                        },
                        {
                            "name": "CarouselItemComponent"
                        },
                        {
                            "name": "CheckboxComponent"
                        },
                        {
                            "name": "ChipComponent"
                        },
                        {
                            "name": "CollapseComponent"
                        },
                        {
                            "name": "DimmerButtonsComponent"
                        },
                        {
                            "name": "DimmerComponent"
                        },
                        {
                            "name": "DimmerIconComponent"
                        },
                        {
                            "name": "DropdownComponent"
                        },
                        {
                            "name": "DropdownItemComponent"
                        },
                        {
                            "name": "ForwardDirective"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "IconComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "LanguageSwitcherComponent"
                        },
                        {
                            "name": "LinkComponent"
                        },
                        {
                            "name": "ListComponent"
                        },
                        {
                            "name": "ListItemComponent"
                        },
                        {
                            "name": "MarkMatchingTextPipe"
                        },
                        {
                            "name": "ModalComponent"
                        },
                        {
                            "name": "NotFoundPageComponent"
                        },
                        {
                            "name": "NotificationsComponent"
                        },
                        {
                            "name": "PaginationComponent"
                        },
                        {
                            "name": "PasswordInputComponent"
                        },
                        {
                            "name": "PopoverDirective"
                        },
                        {
                            "name": "ProgressBarComponent"
                        },
                        {
                            "name": "ProgressButtonComponent"
                        },
                        {
                            "name": "RadioButtonComponent"
                        },
                        {
                            "name": "SelectComponent"
                        },
                        {
                            "name": "SpinnerComponent"
                        },
                        {
                            "name": "SteppersContainerComponent"
                        },
                        {
                            "name": "SteppersItemComponent"
                        },
                        {
                            "name": "TabContainerComponent"
                        },
                        {
                            "name": "TabItemComponent"
                        },
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "TextareaComponent"
                        },
                        {
                            "name": "TooltipDirective"
                        },
                        {
                            "name": "UploadDragDropComponent"
                        },
                        {
                            "name": "UploadFileListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "NgForOf"
                        },
                        {
                            "name": "NgIf"
                        },
                        {
                            "name": "RouterLink"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AlertComponent"
                        },
                        {
                            "name": "BackButtonComponent"
                        },
                        {
                            "name": "BackToTopComponent"
                        },
                        {
                            "name": "BadgeDirective"
                        },
                        {
                            "name": "BreadcrumbComponent"
                        },
                        {
                            "name": "BreadcrumbItemComponent"
                        },
                        {
                            "name": "ButtonDirective"
                        },
                        {
                            "name": "CalloutComponent"
                        },
                        {
                            "name": "CardComponent"
                        },
                        {
                            "name": "CarouselComponent"
                        },
                        {
                            "name": "CarouselItemComponent"
                        },
                        {
                            "name": "CheckboxComponent"
                        },
                        {
                            "name": "ChipComponent"
                        },
                        {
                            "name": "CollapseComponent"
                        },
                        {
                            "name": "DimmerButtonsComponent"
                        },
                        {
                            "name": "DimmerComponent"
                        },
                        {
                            "name": "DimmerIconComponent"
                        },
                        {
                            "name": "DropdownComponent"
                        },
                        {
                            "name": "DropdownItemComponent"
                        },
                        {
                            "name": "ForwardDirective"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "IconComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "LanguageSwitcherComponent"
                        },
                        {
                            "name": "LinkComponent"
                        },
                        {
                            "name": "ListComponent"
                        },
                        {
                            "name": "ListItemComponent"
                        },
                        {
                            "name": "MarkMatchingTextPipe"
                        },
                        {
                            "name": "ModalComponent"
                        },
                        {
                            "name": "NotFoundPageComponent"
                        },
                        {
                            "name": "NotificationsComponent"
                        },
                        {
                            "name": "PaginationComponent"
                        },
                        {
                            "name": "PasswordInputComponent"
                        },
                        {
                            "name": "PopoverDirective"
                        },
                        {
                            "name": "ProgressBarComponent"
                        },
                        {
                            "name": "ProgressButtonComponent"
                        },
                        {
                            "name": "RadioButtonComponent"
                        },
                        {
                            "name": "SelectComponent"
                        },
                        {
                            "name": "SpinnerComponent"
                        },
                        {
                            "name": "SteppersContainerComponent"
                        },
                        {
                            "name": "SteppersItemComponent"
                        },
                        {
                            "name": "TabContainerComponent"
                        },
                        {
                            "name": "TabItemComponent"
                        },
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "TextareaComponent"
                        },
                        {
                            "name": "TooltipDirective"
                        },
                        {
                            "name": "UploadDragDropComponent"
                        },
                        {
                            "name": "UploadFileListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DesignAngularKitModule",
            "id": "module-DesignAngularKitModule-67f64058ac0ab0101848d0f95eccdbdf277e39be3bfb043145cfc3fa52b74dfbb852fb8940fdfd322a870a875b8377da42ae8db25ae9cd7520e25660d7e0c53c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-angular-kit/src/lib/design-angular-kit.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { TranslateLoader, TranslateModule, TranslateService } from '@ngx-translate/core';\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { ComponentsModule } from './modules/components.module';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    ComponentsModule,\n    HttpClientModule,\n    TranslateModule.forChild({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: (http: HttpClient) => new TranslateHttpLoader(http, '/bootstrap-italia/i18n/'),\n        deps: [HttpClient]\n      },\n      extend: true,\n      isolate: false,\n      defaultLanguage: 'it'\n    })\n  ],\n  exports: [\n    ComponentsModule,\n    TranslateModule\n  ]\n})\nexport class DesignAngularKitModule {\n\n  constructor(\n    private readonly translateService: TranslateService\n  ) {\n    translateService.addLangs(['it', 'en']); // Adds 'it' and 'eng' as available languages.\n    translateService.use('it');\n  }\n\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "CAP_REGEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/utils/regex.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/^[0-9]{5}$/",
                "rawdescription": "Italian CAP Regex",
                "description": "<p>Italian CAP Regex</p>\n"
            },
            {
                "name": "core",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/modules/components.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  AccordionComponent,\n  AlertComponent,\n  BadgeDirective,\n  ButtonDirective,\n  CalloutComponent,\n  CardComponent,\n  CarouselComponent,\n  CarouselItemComponent,\n  ChipComponent,\n  CollapseComponent,\n  DimmerButtonsComponent,\n  DimmerComponent,\n  DimmerIconComponent,\n  DropdownComponent,\n  DropdownItemComponent,\n  ForwardDirective,\n  LinkComponent,\n  ListComponent,\n  ListItemComponent,\n  ModalComponent,\n  NotificationsComponent,\n  PaginationComponent,\n  PopoverDirective,\n  ProgressBarComponent,\n  ProgressButtonComponent,\n  SpinnerComponent,\n  SteppersContainerComponent,\n  SteppersItemComponent,\n  TabContainerComponent,\n  TabItemComponent,\n  TableComponent,\n  TooltipDirective\n]",
                "rawdescription": "Core components",
                "description": "<p>Core components</p>\n"
            },
            {
                "name": "EMAIL_REGEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/utils/regex.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/",
                "rawdescription": "General Email Regex (RFC 5322 Official Standard)\nhttp://emailregex.com/",
                "description": "<p>General Email Regex (RFC 5322 Official Standard)\n<a href=\"http://emailregex.com/\">http://emailregex.com/</a></p>\n"
            },
            {
                "name": "form",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/modules/components.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  CheckboxComponent,\n  InputComponent,\n  PasswordInputComponent,\n  RadioButtonComponent,\n  SelectComponent,\n  TextareaComponent,\n  UploadDragDropComponent,\n  UploadFileListComponent\n]",
                "rawdescription": "Form components",
                "description": "<p>Form components</p>\n"
            },
            {
                "name": "ITALIAN_TAX_CODE_REGEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/utils/regex.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/^[A-Za-z]{6}[0-9]{2}[A-Za-z]{1}[0-9]{2}[A-Za-z]{1}[0-9]{3}[A-Za-z]{1}$/i",
                "rawdescription": "The italian tax code Regex (Codice Fiscale)",
                "description": "<p>The italian tax code Regex (Codice Fiscale)</p>\n"
            },
            {
                "name": "navigation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/modules/components.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  BackButtonComponent,\n  BackToTopComponent,\n  BreadcrumbComponent,\n  BreadcrumbItemComponent,\n  HeaderComponent\n]",
                "rawdescription": "Navigation Components",
                "description": "<p>Navigation Components</p>\n"
            },
            {
                "name": "PHONE_NUMBER_REGEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/utils/regex.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/^\\s*(?:\\+?(\\d{1,3}))?[-. (]*(\\d{3})[-. )]*(\\d{3})[-. ]*(\\d{3})(?: *x(\\d+))?\\s*$/",
                "rawdescription": "Phone number Regex",
                "description": "<p>Phone number Regex</p>\n"
            },
            {
                "name": "URL_REGEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/utils/regex.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})/",
                "rawdescription": "URL Regex",
                "description": "<p>URL Regex</p>\n"
            },
            {
                "name": "utils",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/modules/components.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  IconComponent,\n  NotFoundPageComponent,\n  LanguageSwitcherComponent,\n  MarkMatchingTextPipe\n]",
                "rawdescription": "Utils components",
                "description": "<p>Utils components</p>\n"
            },
            {
                "name": "VAT_NUMBER_REGEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/utils/regex.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/^[0-9]{11}$/",
                "rawdescription": "The VAT number Regex (Partita iva)",
                "description": "<p>The VAT number Regex (Partita iva)</p>\n"
            }
        ],
        "functions": [
            {
                "name": "isFalseBooleanInput",
                "file": "projects/design-angular-kit/src/lib/utils/boolean-input.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Check if boolean input has false value or is <code>undefined</code></p>\n",
                "args": [
                    {
                        "name": "booleanInput",
                        "type": "BooleanInput",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 411,
                            "end": 423,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "booleanInput"
                        },
                        "type": "BooleanInput",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 405,
                            "end": 410,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>the boolean input</p>\n"
                    }
                ]
            },
            {
                "name": "isTrueBooleanInput",
                "file": "projects/design-angular-kit/src/lib/utils/boolean-input.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Check if boolean input has true value and not is <code>undefined</code></p>\n",
                "args": [
                    {
                        "name": "booleanInput",
                        "type": "BooleanInput",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 133,
                            "end": 145,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "booleanInput"
                        },
                        "type": "BooleanInput",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 127,
                            "end": 132,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>the boolean input</p>\n"
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AlertColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"info\" | \"success\" | \"warning\" | \"danger\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "BadgeColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"secondary\" | \"success\" | \"warning\" | \"danger\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "BooleanInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "boolean | \"true\" | \"false\"",
                "file": "projects/design-angular-kit/src/lib/utils/boolean-input.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "ButtonColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"outline-primary\" | \"secondary\" | \"outline-secondary\" | \"success\" | \"outline-success\" | \"danger\" | \"outline-danger\" | \"warning\" | \"outline-warning\" | \"info\" | \"outline-info\" | \"light\" | \"outline-light\" | \"dark\" | \"outline-dark\" | \"link\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "ButtonSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"lg\" | \"sm\" | \"xs\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "ButtonType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"submit\" | \"button\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "CalloutAppearance",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"default\" | \"highlight\" | \"more\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "CalloutColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"success\" | \"warning\" | \"danger\" | \"important\" | \"note\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "CarouselType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"default\" | \"three-cols\" | \"three-cols-arrow-visible\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "ChipColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"secondary\" | \"success\" | \"danger\" | \"warning\"",
                "file": "projects/design-angular-kit/src/lib/components/core/chip/chip.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "DimmerColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "string | \"dimmer-primary\"",
                "file": "projects/design-angular-kit/src/lib/components/core/dimmer/dimmer.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "DropdownDirection",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"dropup\" | \"dropend\" | \"dropstart\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "ElementPlacement",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"top\" | \"bottom\" | \"left\" | \"right\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "IconColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"secondary\" | \"success\" | \"warning\" | \"danger\" | \"light\" | \"white\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/icon.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "IconName",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"arrow-down\" | \"arrow-down-circle\" | \"arrow-down-triangle\" | \"arrow-left\" | \"arrow-left-circle\" | \"arrow-left-triangle\" | \"arrow-right\" | \"arrow-right-circle\" | \"arrow-right-triangle\" | \"arrow-up\" | \"arrow-up-circle\" | \"arrow-up-triangle\" | \"ban\" | \"bookmark\" | \"box\" | \"burger\" | \"calendar\" | \"camera\" | \"card\" | \"chart-line\" | \"check\" | \"check-circle\" | \"chevron-left\" | \"chevron-right\" | \"clip\" | \"clock\" | \"close\" | \"close-big\" | \"close-circle\" | \"comment\" | \"copy\" | \"delete\" | \"download\" | \"error\" | \"exchange-circle\" | \"expand\" | \"external-link\" | \"flag\" | \"folder\" | \"fullscreen\" | \"funnel\" | \"hearing\" | \"help\" | \"help-circle\" | \"horn\" | \"inbox\" | \"info-circle\" | \"key\" | \"link\" | \"list\" | \"locked\" | \"logout\" | \"mail\" | \"mail-open\" | \"map-marker\" | \"map-marker-circle\" | \"map-marker-minus\" | \"map-marker-plus\" | \"maximize\" | \"maximize-alt\" | \"minimize\" | \"minus\" | \"minus-circle\" | \"more-actions\" | \"more-items\" | \"note\" | \"pa\" | \"password-invisible\" | \"password-visible\" | \"pencil\" | \"piattaforme\" | \"pin\" | \"plug\" | \"plus\" | \"plus-circle\" | \"presentation\" | \"print\" | \"refresh\" | \"restore\" | \"rss\" | \"rss-square\" | \"search\" | \"settings\" | \"share\" | \"software\" | \"star-full\" | \"star-outline\" | \"telephone\" | \"tool\" | \"unlocked\" | \"upload\" | \"user\" | \"video\" | \"warning\" | \"warning-circle\" | \"wifi\" | \"zoom-in\" | \"zoom-out\" | \"behance\" | \"facebook\" | \"facebook-square\" | \"figma\" | \"figma-square\" | \"flickr\" | \"flickr-square\" | \"github\" | \"instagram\" | \"linkedin\" | \"linkedin-square\" | \"mastodon\" | \"mastodon-square\" | \"medium\" | \"medium-square\" | \"pinterest\" | \"pinterest-square\" | \"quora\" | \"quora-square\" | \"reddit\" | \"reddit-square\" | \"slack\" | \"slack-square\" | \"snapchat\" | \"snapchat-square\" | \"stackexchange\" | \"stackexchange-square\" | \"stackoverflow\" | \"stackoverflow-square\" | \"telegram\" | \"tiktok\" | \"tiktok-square\" | \"twitter\" | \"twitter-square\" | \"vimeo\" | \"vimeo-square\" | \"whatsapp\" | \"whatsapp-square\" | \"youtube\" | \"google\" | \"designers-italia\" | \"team-digitale\" | \"file\" | \"files\" | \"file-audio\" | \"file-compressed\" | \"file-csv\" | \"file-json\" | \"file-odp\" | \"file-ods\" | \"file-odt\" | \"file-pdf\" | \"file-pdf-ext\" | \"file-sheet\" | \"file-slides\" | \"file-txt\" | \"file-video\" | \"file-xml\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/icon.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "IconSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"xs\" | \"sm\" | \"lg\" | \"xl\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/icon.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "InputControlType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"text\" | \"email\" | \"number\" | \"date\" | \"time\" | \"tel\" | \"color\" | \"url\" | \"search\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/form.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "ProgressBarColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"success\" | \"warning\" | \"danger\" | \"info\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "TableColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"secondary\" | \"success\" | \"danger\" | \"warning\" | \"info\" | \"light\" | \"dark\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "TableHeadColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"light\" | \"dark\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "TableResponsive",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"responsive\" | \"responsive-sm\" | \"responsive-md\" | \"responsive-lg\" | \"responsive-xl\" | \"responsive-xxl\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "VerticalAlignment",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"align-baseline\" | \"align-top\" | \"align-middle\" | \"align-bottom\" | \"align-text-bottom\" | \"align-text-top\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            }
        ],
        "enumerations": [
            {
                "name": "NotificationPosition",
                "childs": [
                    {
                        "name": "Top",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "top-fix mt-3"
                    },
                    {
                        "name": "Bottom",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "bottom-fix mb-3"
                    },
                    {
                        "name": "Left",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "left-fix ms-3"
                    },
                    {
                        "name": "Right",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "right-fix me-3"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts"
            },
            {
                "name": "NotificationType",
                "childs": [
                    {
                        "name": "Standard",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "standard"
                    },
                    {
                        "name": "Success",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "success"
                    },
                    {
                        "name": "Error",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "error"
                    },
                    {
                        "name": "Info",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "info"
                    },
                    {
                        "name": "Warning",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "warning"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts"
            }
        ],
        "groupedVariables": {
            "projects/design-angular-kit/src/lib/utils/regex.ts": [
                {
                    "name": "CAP_REGEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/utils/regex.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/^[0-9]{5}$/",
                    "rawdescription": "Italian CAP Regex",
                    "description": "<p>Italian CAP Regex</p>\n"
                },
                {
                    "name": "EMAIL_REGEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/utils/regex.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/",
                    "rawdescription": "General Email Regex (RFC 5322 Official Standard)\nhttp://emailregex.com/",
                    "description": "<p>General Email Regex (RFC 5322 Official Standard)\n<a href=\"http://emailregex.com/\">http://emailregex.com/</a></p>\n"
                },
                {
                    "name": "ITALIAN_TAX_CODE_REGEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/utils/regex.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/^[A-Za-z]{6}[0-9]{2}[A-Za-z]{1}[0-9]{2}[A-Za-z]{1}[0-9]{3}[A-Za-z]{1}$/i",
                    "rawdescription": "The italian tax code Regex (Codice Fiscale)",
                    "description": "<p>The italian tax code Regex (Codice Fiscale)</p>\n"
                },
                {
                    "name": "PHONE_NUMBER_REGEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/utils/regex.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/^\\s*(?:\\+?(\\d{1,3}))?[-. (]*(\\d{3})[-. )]*(\\d{3})[-. ]*(\\d{3})(?: *x(\\d+))?\\s*$/",
                    "rawdescription": "Phone number Regex",
                    "description": "<p>Phone number Regex</p>\n"
                },
                {
                    "name": "URL_REGEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/utils/regex.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})/",
                    "rawdescription": "URL Regex",
                    "description": "<p>URL Regex</p>\n"
                },
                {
                    "name": "VAT_NUMBER_REGEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/utils/regex.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/^[0-9]{11}$/",
                    "rawdescription": "The VAT number Regex (Partita iva)",
                    "description": "<p>The VAT number Regex (Partita iva)</p>\n"
                }
            ],
            "projects/design-angular-kit/src/lib/modules/components.module.ts": [
                {
                    "name": "core",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/modules/components.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  AccordionComponent,\n  AlertComponent,\n  BadgeDirective,\n  ButtonDirective,\n  CalloutComponent,\n  CardComponent,\n  CarouselComponent,\n  CarouselItemComponent,\n  ChipComponent,\n  CollapseComponent,\n  DimmerButtonsComponent,\n  DimmerComponent,\n  DimmerIconComponent,\n  DropdownComponent,\n  DropdownItemComponent,\n  ForwardDirective,\n  LinkComponent,\n  ListComponent,\n  ListItemComponent,\n  ModalComponent,\n  NotificationsComponent,\n  PaginationComponent,\n  PopoverDirective,\n  ProgressBarComponent,\n  ProgressButtonComponent,\n  SpinnerComponent,\n  SteppersContainerComponent,\n  SteppersItemComponent,\n  TabContainerComponent,\n  TabItemComponent,\n  TableComponent,\n  TooltipDirective\n]",
                    "rawdescription": "Core components",
                    "description": "<p>Core components</p>\n"
                },
                {
                    "name": "form",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/modules/components.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  CheckboxComponent,\n  InputComponent,\n  PasswordInputComponent,\n  RadioButtonComponent,\n  SelectComponent,\n  TextareaComponent,\n  UploadDragDropComponent,\n  UploadFileListComponent\n]",
                    "rawdescription": "Form components",
                    "description": "<p>Form components</p>\n"
                },
                {
                    "name": "navigation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/modules/components.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  BackButtonComponent,\n  BackToTopComponent,\n  BreadcrumbComponent,\n  BreadcrumbItemComponent,\n  HeaderComponent\n]",
                    "rawdescription": "Navigation Components",
                    "description": "<p>Navigation Components</p>\n"
                },
                {
                    "name": "utils",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/modules/components.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  IconComponent,\n  NotFoundPageComponent,\n  LanguageSwitcherComponent,\n  MarkMatchingTextPipe\n]",
                    "rawdescription": "Utils components",
                    "description": "<p>Utils components</p>\n"
                }
            ]
        },
        "groupedFunctions": {
            "projects/design-angular-kit/src/lib/utils/boolean-input.ts": [
                {
                    "name": "isFalseBooleanInput",
                    "file": "projects/design-angular-kit/src/lib/utils/boolean-input.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Check if boolean input has false value or is <code>undefined</code></p>\n",
                    "args": [
                        {
                            "name": "booleanInput",
                            "type": "BooleanInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 411,
                                "end": 423,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "booleanInput"
                            },
                            "type": "BooleanInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 405,
                                "end": 410,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the boolean input</p>\n"
                        }
                    ]
                },
                {
                    "name": "isTrueBooleanInput",
                    "file": "projects/design-angular-kit/src/lib/utils/boolean-input.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Check if boolean input has true value and not is <code>undefined</code></p>\n",
                    "args": [
                        {
                            "name": "booleanInput",
                            "type": "BooleanInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 133,
                                "end": 145,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "booleanInput"
                            },
                            "type": "BooleanInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 127,
                                "end": 132,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the boolean input</p>\n"
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "projects/design-angular-kit/src/lib/interfaces/core.ts": [
                {
                    "name": "NotificationPosition",
                    "childs": [
                        {
                            "name": "Top",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "top-fix mt-3"
                        },
                        {
                            "name": "Bottom",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "bottom-fix mb-3"
                        },
                        {
                            "name": "Left",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "left-fix ms-3"
                        },
                        {
                            "name": "Right",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "right-fix me-3"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts"
                },
                {
                    "name": "NotificationType",
                    "childs": [
                        {
                            "name": "Standard",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "standard"
                        },
                        {
                            "name": "Success",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "success"
                        },
                        {
                            "name": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "error"
                        },
                        {
                            "name": "Info",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "info"
                        },
                        {
                            "name": "Warning",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "warning"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/design-angular-kit/src/lib/interfaces/core.ts": [
                {
                    "name": "AlertColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"info\" | \"success\" | \"warning\" | \"danger\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "BadgeColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"secondary\" | \"success\" | \"warning\" | \"danger\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "ButtonColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"outline-primary\" | \"secondary\" | \"outline-secondary\" | \"success\" | \"outline-success\" | \"danger\" | \"outline-danger\" | \"warning\" | \"outline-warning\" | \"info\" | \"outline-info\" | \"light\" | \"outline-light\" | \"dark\" | \"outline-dark\" | \"link\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "ButtonSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"lg\" | \"sm\" | \"xs\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "ButtonType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"submit\" | \"button\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "CalloutAppearance",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"default\" | \"highlight\" | \"more\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "CalloutColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"success\" | \"warning\" | \"danger\" | \"important\" | \"note\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "CarouselType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"default\" | \"three-cols\" | \"three-cols-arrow-visible\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "DropdownDirection",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"dropup\" | \"dropend\" | \"dropstart\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "ElementPlacement",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"top\" | \"bottom\" | \"left\" | \"right\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "ProgressBarColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"success\" | \"warning\" | \"danger\" | \"info\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "TableColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"secondary\" | \"success\" | \"danger\" | \"warning\" | \"info\" | \"light\" | \"dark\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "TableHeadColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"light\" | \"dark\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "TableResponsive",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"responsive\" | \"responsive-sm\" | \"responsive-md\" | \"responsive-lg\" | \"responsive-xl\" | \"responsive-xxl\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "VerticalAlignment",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"align-baseline\" | \"align-top\" | \"align-middle\" | \"align-bottom\" | \"align-text-bottom\" | \"align-text-top\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/design-angular-kit/src/lib/utils/boolean-input.ts": [
                {
                    "name": "BooleanInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "boolean | \"true\" | \"false\"",
                    "file": "projects/design-angular-kit/src/lib/utils/boolean-input.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/design-angular-kit/src/lib/components/core/chip/chip.component.ts": [
                {
                    "name": "ChipColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"secondary\" | \"success\" | \"danger\" | \"warning\"",
                    "file": "projects/design-angular-kit/src/lib/components/core/chip/chip.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/design-angular-kit/src/lib/components/core/dimmer/dimmer.component.ts": [
                {
                    "name": "DimmerColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "string | \"dimmer-primary\"",
                    "file": "projects/design-angular-kit/src/lib/components/core/dimmer/dimmer.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/design-angular-kit/src/lib/interfaces/icon.ts": [
                {
                    "name": "IconColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"secondary\" | \"success\" | \"warning\" | \"danger\" | \"light\" | \"white\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/icon.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "IconName",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"arrow-down\" | \"arrow-down-circle\" | \"arrow-down-triangle\" | \"arrow-left\" | \"arrow-left-circle\" | \"arrow-left-triangle\" | \"arrow-right\" | \"arrow-right-circle\" | \"arrow-right-triangle\" | \"arrow-up\" | \"arrow-up-circle\" | \"arrow-up-triangle\" | \"ban\" | \"bookmark\" | \"box\" | \"burger\" | \"calendar\" | \"camera\" | \"card\" | \"chart-line\" | \"check\" | \"check-circle\" | \"chevron-left\" | \"chevron-right\" | \"clip\" | \"clock\" | \"close\" | \"close-big\" | \"close-circle\" | \"comment\" | \"copy\" | \"delete\" | \"download\" | \"error\" | \"exchange-circle\" | \"expand\" | \"external-link\" | \"flag\" | \"folder\" | \"fullscreen\" | \"funnel\" | \"hearing\" | \"help\" | \"help-circle\" | \"horn\" | \"inbox\" | \"info-circle\" | \"key\" | \"link\" | \"list\" | \"locked\" | \"logout\" | \"mail\" | \"mail-open\" | \"map-marker\" | \"map-marker-circle\" | \"map-marker-minus\" | \"map-marker-plus\" | \"maximize\" | \"maximize-alt\" | \"minimize\" | \"minus\" | \"minus-circle\" | \"more-actions\" | \"more-items\" | \"note\" | \"pa\" | \"password-invisible\" | \"password-visible\" | \"pencil\" | \"piattaforme\" | \"pin\" | \"plug\" | \"plus\" | \"plus-circle\" | \"presentation\" | \"print\" | \"refresh\" | \"restore\" | \"rss\" | \"rss-square\" | \"search\" | \"settings\" | \"share\" | \"software\" | \"star-full\" | \"star-outline\" | \"telephone\" | \"tool\" | \"unlocked\" | \"upload\" | \"user\" | \"video\" | \"warning\" | \"warning-circle\" | \"wifi\" | \"zoom-in\" | \"zoom-out\" | \"behance\" | \"facebook\" | \"facebook-square\" | \"figma\" | \"figma-square\" | \"flickr\" | \"flickr-square\" | \"github\" | \"instagram\" | \"linkedin\" | \"linkedin-square\" | \"mastodon\" | \"mastodon-square\" | \"medium\" | \"medium-square\" | \"pinterest\" | \"pinterest-square\" | \"quora\" | \"quora-square\" | \"reddit\" | \"reddit-square\" | \"slack\" | \"slack-square\" | \"snapchat\" | \"snapchat-square\" | \"stackexchange\" | \"stackexchange-square\" | \"stackoverflow\" | \"stackoverflow-square\" | \"telegram\" | \"tiktok\" | \"tiktok-square\" | \"twitter\" | \"twitter-square\" | \"vimeo\" | \"vimeo-square\" | \"whatsapp\" | \"whatsapp-square\" | \"youtube\" | \"google\" | \"designers-italia\" | \"team-digitale\" | \"file\" | \"files\" | \"file-audio\" | \"file-compressed\" | \"file-csv\" | \"file-json\" | \"file-odp\" | \"file-ods\" | \"file-odt\" | \"file-pdf\" | \"file-pdf-ext\" | \"file-sheet\" | \"file-slides\" | \"file-txt\" | \"file-video\" | \"file-xml\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/icon.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "IconSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"xs\" | \"sm\" | \"lg\" | \"xl\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/icon.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/design-angular-kit/src/lib/interfaces/form.ts": [
                {
                    "name": "InputControlType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"text\" | \"email\" | \"number\" | \"date\" | \"time\" | \"tel\" | \"color\" | \"url\" | \"search\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/form.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 62,
        "status": "good",
        "files": [
            {
                "filePath": "projects/design-angular-kit/src/lib/abstracts/abstract-form-component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AbstractFormComponent",
                "coveragePercent": 47,
                "coverageCount": "9/19",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/abstracts/abstract.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AbstractComponent",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/accordion/accordion.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccordionComponent",
                "coveragePercent": 60,
                "coverageCount": "3/5",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertComponent",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/badge/badge.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BadgeDirective",
                "coveragePercent": 50,
                "coverageCount": "2/4",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/button/button.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ButtonDirective",
                "coveragePercent": 46,
                "coverageCount": "6/13",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/callout/callout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CalloutComponent",
                "coveragePercent": 45,
                "coverageCount": "5/11",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 80,
                "coverageCount": "8/10",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/carousel/carousel-item/carousel-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CarouselItemComponent",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/carousel/carousel/carousel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CarouselComponent",
                "coveragePercent": 58,
                "coverageCount": "7/12",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/chip/chip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChipComponent",
                "coveragePercent": 45,
                "coverageCount": "9/20",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/collapse/collapse.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CollapseComponent",
                "coveragePercent": 64,
                "coverageCount": "11/17",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/dimmer/dimmer-buttons/dimmer-buttons.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DimmerButtonsComponent",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/dimmer/dimmer-icon/dimmer-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DimmerIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/dimmer/dimmer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DimmerComponent",
                "coveragePercent": 28,
                "coverageCount": "2/7",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/dropdown/dropdown-item/dropdown-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropdownItemComponent",
                "coveragePercent": 71,
                "coverageCount": "10/14",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/dropdown/dropdown/dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropdownComponent",
                "coveragePercent": 70,
                "coverageCount": "7/10",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/forward/forward.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ForwardDirective",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/link/link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LinkComponent",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/list/list-item/list-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListItemComponent",
                "coveragePercent": 80,
                "coverageCount": "8/10",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/list/list/list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListComponent",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/modal/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalComponent",
                "coveragePercent": 76,
                "coverageCount": "13/17",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/notifications/notifications.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotificationsComponent",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/pagination/pagination.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginationComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/popover/popover.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "PopoverDirective",
                "coveragePercent": 79,
                "coverageCount": "19/24",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressBarComponent",
                "coveragePercent": 80,
                "coverageCount": "4/5",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/progress-button/progress-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressButtonComponent",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/spinner/spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpinnerComponent",
                "coveragePercent": 75,
                "coverageCount": "3/4",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/steppers/steppers-container/steppers-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SteppersContainerComponent",
                "coveragePercent": 85,
                "coverageCount": "17/20",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/steppers/steppers-item/steppers-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SteppersItemComponent",
                "coveragePercent": 75,
                "coverageCount": "3/4",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/tab/tab-container/tab-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabContainerComponent",
                "coveragePercent": 50,
                "coverageCount": "4/8",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/tab/tab-item/tab-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabItemComponent",
                "coveragePercent": 77,
                "coverageCount": "7/9",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 90,
                "coverageCount": "10/11",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/tooltip/tooltip.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TooltipDirective",
                "coveragePercent": 76,
                "coverageCount": "16/21",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/form/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 60,
                "coverageCount": "14/23",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/form/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 65,
                "coverageCount": "25/38",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/form/password-input/password-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PasswordInputComponent",
                "coveragePercent": 60,
                "coverageCount": "17/28",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/form/radio-button/radio-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadioButtonComponent",
                "coveragePercent": 59,
                "coverageCount": "13/22",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/form/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 60,
                "coverageCount": "14/23",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/form/textarea/textarea.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextareaComponent",
                "coveragePercent": 57,
                "coverageCount": "12/21",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/form/upload-drag-drop/upload-drag-drop.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UploadDragDropComponent",
                "coveragePercent": 33,
                "coverageCount": "8/24",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/form/upload-file-list/upload-file-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UploadFileListComponent",
                "coveragePercent": 73,
                "coverageCount": "11/15",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/navigation/back-button/back-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BackButtonComponent",
                "coveragePercent": 66,
                "coverageCount": "6/9",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/navigation/back-to-top/back-to-top.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BackToTopComponent",
                "coveragePercent": 66,
                "coverageCount": "4/6",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/navigation/breadcrumbs/breadcrumb-item/breadcrumb-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbItemComponent",
                "coveragePercent": 77,
                "coverageCount": "7/9",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/navigation/breadcrumbs/breadcrumb/breadcrumb.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbComponent",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/navigation/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 16,
                "coverageCount": "2/12",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/utils/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 62,
                "coverageCount": "5/8",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/utils/language-switcher/language-switcher.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LanguageSwitcherComponent",
                "coveragePercent": 33,
                "coverageCount": "2/6",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/utils/not-found-page/not-found-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotFoundPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Notification",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/interfaces/form.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AutocompleteItem",
                "coveragePercent": 100,
                "coverageCount": "8/8",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/interfaces/form.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectControlGroup",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/interfaces/form.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectControlOption",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/interfaces/form.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UploadFileListItem",
                "coveragePercent": 85,
                "coverageCount": "6/7",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/interfaces/utils.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AvailableLanguage",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/modules/components.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "core",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/modules/components.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "form",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/modules/components.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "navigation",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/modules/components.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "utils",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/pipes/mark-matching-text.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "MarkMatchingTextPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/services/notifications/notifications.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NotificationsService",
                "coveragePercent": 77,
                "coverageCount": "7/9",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/utils/boolean-input.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isFalseBooleanInput",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/utils/boolean-input.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isTrueBooleanInput",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/utils/file-utils.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FileUtils",
                "coveragePercent": 80,
                "coverageCount": "4/5",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/utils/regex.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CAP_REGEX",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/utils/regex.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EMAIL_REGEX",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/utils/regex.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ITALIAN_TAX_CODE_REGEX",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/utils/regex.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PHONE_NUMBER_REGEX",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/utils/regex.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "URL_REGEX",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/utils/regex.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VAT_NUMBER_REGEX",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/validators/it-validators.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ItValidators",
                "coveragePercent": 66,
                "coverageCount": "4/6",
                "status": "good"
            }
        ]
    }
}
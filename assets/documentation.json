{
    "pipes": [],
    "interfaces": [],
    "injectables": [
        {
            "name": "TooltipConfig",
            "id": "injectable-TooltipConfig-8c9a4576ac9f6bbe99cd756e1397d629",
            "file": "projects/design-angular-kit/src/lib/tooltip/tooltip.config.ts",
            "properties": [
                {
                    "name": "container",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "disableTooltip",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "placement",
                    "defaultValue": "'right'",
                    "type": "PlacementArray",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methods": [],
            "description": "<p>Servizio di configurazione per la direttiva Ittooltip.\nIl servizio può essere iniettato, tipicamente in un root component, per impostare i valori delle proprietà in\nmodo tale da fornire i valori di default per tutti i tooltip utilizzati in un&#39;applicazione.</p>\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { PlacementArray } from './positioning';\n\n/**\n * Servizio di configurazione per la direttiva Ittooltip.\n * Il servizio può essere iniettato, tipicamente in un root component, per impostare i valori delle proprietà in\n * modo tale da fornire i valori di default per tutti i tooltip utilizzati in un'applicazione.\n */\n@Injectable({providedIn: 'root'})\nexport class TooltipConfig {\n  placement: PlacementArray = 'right';\n  container: string;\n  disableTooltip = false;\n}\n",
            "type": "injectable"
        },
        {
            "name": "UniqueSelectionDispatcher",
            "id": "injectable-UniqueSelectionDispatcher-94fe971e6fd6a2529a76fdc0f4edcb8c",
            "file": "projects/design-angular-kit/src/lib/radio/unique-selection-dispatcher.ts",
            "properties": [
                {
                    "name": "_listeners",
                    "defaultValue": "[]",
                    "type": "UniqueSelectionDispatcherListener[]",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "listen",
                    "args": [
                        {
                            "name": "listener",
                            "type": "UniqueSelectionDispatcherListener"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "description": "<p>Listen for future changes to item selection.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "listener",
                            "type": "UniqueSelectionDispatcherListener",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 1395,
                                "end": 1401,
                                "flags": 0,
                                "escapedText": "return"
                            },
                            "comment": "<p>Function used to deregister listener</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "notify",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        },
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "description": "<p>Notify other items that selection for the given name has been set.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1153,
                                "end": 1155,
                                "flags": 0,
                                "escapedText": "id"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 1147,
                                "end": 1152,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>ID of the item.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1184,
                                "end": 1188,
                                "flags": 0,
                                "escapedText": "name"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 1178,
                                "end": 1183,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Name of the item.</p>\n"
                        }
                    ]
                }
            ],
            "description": "<p>Class to coordinate unique selection based on name.\nIntended to be consumed as an Angular service.\nThis service is needed because native radio change events are only fired on the item currently\nbeing selected, and we still need to uncheck the previous selection.</p>\n<p>This service does not <em>store</em> any IDs and names because they may change at any time, so it is\nless error-prone if they are simply passed through when the events occur.</p>\n",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\n@Injectable({providedIn: 'root'})\nexport class UniqueSelectionDispatcher implements OnDestroy {\n  private _listeners: UniqueSelectionDispatcherListener[] = [];\n\n  /**\n   * Notify other items that selection for the given name has been set.\n   * @param id ID of the item.\n   * @param name Name of the item.\n   */\n  notify(id: string, name: string) {\n    for (const listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n\n  /**\n   * Listen for future changes to item selection.\n   * @return Function used to deregister listener\n   */\n  listen(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\n\n  ngOnDestroy() {\n    this._listeners = [];\n  }\n}\n",
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "CheckboxChange",
            "id": "class-CheckboxChange-061d883b3f4d581a0a4d05a1d1a8bf78",
            "file": "projects/design-angular-kit/src/lib/checkbox/checkbox.component.ts",
            "type": "class",
            "sourceCode": "import { Component, Input, Output, EventEmitter, ChangeDetectorRef, forwardRef, ChangeDetectionStrategy } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nlet identifier = 0;\n\nexport class CheckboxChange {\n  source: CheckboxComponent;\n  checked: boolean;\n}\n\n/**\n * Una checkbox con design bootstrap italia. Supporta tutte le funzionalità di una checkbox HTML5,\n * ed espone una API simile. Una `<it-checkbox>` può essere checked, unchecked, o disabled.\n */\n@Component({\n  selector: 'it-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.css'],\n  providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => CheckboxComponent), multi: true }],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CheckboxComponent implements ControlValueAccessor {\n  /**\n   * Se la checkbox è selezionata.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value !== this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked = false;\n\n  /**\n   * L'etichetta della checkbox.\n   */\n  @Input()\n  label: string;\n\n  /**\n   * Se la checkbox è disabilitata.\n   */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    if (value !== this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled = false;\n\n  /**\n   * Evento emesso quando il valore `checked` della checkbox cambia.\n   */\n  @Output() readonly change: EventEmitter<CheckboxChange> =\n    new EventEmitter<CheckboxChange>();\n\n    inputId = `checkbox-${identifier++}`;\n\n  private _onTouched: () => any = () => {};\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => { };\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef\n  ) { }\n\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  handleChange(event: Event) {\n    event.stopPropagation();\n    if (!this.disabled) {\n      this._toggle();\n      this._emitChangeEvent();\n    }\n  }\n\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  private _emitChangeEvent() {\n    const event = new CheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n}\n",
            "properties": [
                {
                    "name": "checked",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "source",
                    "type": "CheckboxComponent",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ContentRef",
            "id": "class-ContentRef-523bfb791c84a31c65717949ff12889f",
            "file": "projects/design-angular-kit/src/lib/tooltip/popup.ts",
            "type": "class",
            "sourceCode": "import {\n    Injector,\n    TemplateRef,\n    ViewRef,\n    ViewContainerRef,\n    Renderer2,\n    ComponentRef,\n    ComponentFactoryResolver\n} from '@angular/core';\n\nexport class ContentRef {\n    constructor(public nodes: any[], public viewRef?: ViewRef, public componentRef?: ComponentRef<any>) { }\n}\n\nexport class PopupService<T> {\n    private _windowRef: ComponentRef<T>;\n    private _contentRef: ContentRef;\n\n    constructor(\n        private _type: any, private _injector: Injector, private _viewContainerRef: ViewContainerRef,\n        private _renderer: Renderer2, private _componentFactoryResolver: ComponentFactoryResolver) { }\n\n    open(content?: string | TemplateRef<any>, context?: any): ComponentRef<T> {\n        if (!this._windowRef) {\n            this._contentRef = this._getContentRef(content, context);\n            this._windowRef = this._viewContainerRef.createComponent(\n                this._componentFactoryResolver.resolveComponentFactory<T>(this._type), 0, this._injector,\n                this._contentRef.nodes);\n        }\n\n        return this._windowRef;\n    }\n\n    close() {\n        if (this._windowRef) {\n            this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._windowRef.hostView));\n            this._windowRef = null;\n\n            if (this._contentRef.viewRef) {\n                this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._contentRef.viewRef));\n                this._contentRef = null;\n            }\n        }\n    }\n\n    private _getContentRef(content: string | TemplateRef<any>, context?: any): ContentRef {\n        if (!content) {\n            return new ContentRef([]);\n        } else if (content instanceof TemplateRef) {\n            const viewRef = this._viewContainerRef.createEmbeddedView(<TemplateRef<T>>content, context);\n            return new ContentRef([viewRef.rootNodes], viewRef);\n        } else {\n            return new ContentRef([[this._renderer.createText(`${content}`)]]);\n        }\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "nodes",
                        "type": "any[]"
                    },
                    {
                        "name": "viewRef",
                        "type": "ViewRef",
                        "optional": true
                    },
                    {
                        "name": "componentRef",
                        "type": "ComponentRef<any>",
                        "optional": true
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "nodes",
                        "type": "any[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewRef",
                        "type": "ViewRef",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "componentRef",
                        "type": "ComponentRef<any>",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "componentRef",
                    "type": "ComponentRef<any>",
                    "optional": true,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "nodes",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "viewRef",
                    "type": "ViewRef",
                    "optional": true,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PopupService",
            "id": "class-PopupService-523bfb791c84a31c65717949ff12889f",
            "file": "projects/design-angular-kit/src/lib/tooltip/popup.ts",
            "type": "class",
            "sourceCode": "import {\n    Injector,\n    TemplateRef,\n    ViewRef,\n    ViewContainerRef,\n    Renderer2,\n    ComponentRef,\n    ComponentFactoryResolver\n} from '@angular/core';\n\nexport class ContentRef {\n    constructor(public nodes: any[], public viewRef?: ViewRef, public componentRef?: ComponentRef<any>) { }\n}\n\nexport class PopupService<T> {\n    private _windowRef: ComponentRef<T>;\n    private _contentRef: ContentRef;\n\n    constructor(\n        private _type: any, private _injector: Injector, private _viewContainerRef: ViewContainerRef,\n        private _renderer: Renderer2, private _componentFactoryResolver: ComponentFactoryResolver) { }\n\n    open(content?: string | TemplateRef<any>, context?: any): ComponentRef<T> {\n        if (!this._windowRef) {\n            this._contentRef = this._getContentRef(content, context);\n            this._windowRef = this._viewContainerRef.createComponent(\n                this._componentFactoryResolver.resolveComponentFactory<T>(this._type), 0, this._injector,\n                this._contentRef.nodes);\n        }\n\n        return this._windowRef;\n    }\n\n    close() {\n        if (this._windowRef) {\n            this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._windowRef.hostView));\n            this._windowRef = null;\n\n            if (this._contentRef.viewRef) {\n                this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._contentRef.viewRef));\n                this._contentRef = null;\n            }\n        }\n    }\n\n    private _getContentRef(content: string | TemplateRef<any>, context?: any): ContentRef {\n        if (!content) {\n            return new ContentRef([]);\n        } else if (content instanceof TemplateRef) {\n            const viewRef = this._viewContainerRef.createEmbeddedView(<TemplateRef<T>>content, context);\n            return new ContentRef([viewRef.rootNodes], viewRef);\n        } else {\n            return new ContentRef([[this._renderer.createText(`${content}`)]]);\n        }\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_type",
                        "type": "any"
                    },
                    {
                        "name": "_injector",
                        "type": "Injector"
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "_componentFactoryResolver",
                        "type": "ComponentFactoryResolver"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "_type",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_contentRef",
                    "type": "ContentRef",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_windowRef",
                    "type": "ComponentRef<T>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "_getContentRef",
                    "args": [
                        {
                            "name": "content",
                            "type": "string | TemplateRef<any>"
                        },
                        {
                            "name": "context",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "ContentRef",
                    "typeParameters": [],
                    "line": 53,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "string | TemplateRef<any>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "content",
                            "type": "string | TemplateRef<any>",
                            "optional": true
                        },
                        {
                            "name": "context",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "string | TemplateRef<any>",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Positioning",
            "id": "class-Positioning-a45943c7e0df8c7de490f2f7d88e8858",
            "file": "projects/design-angular-kit/src/lib/tooltip/positioning.ts",
            "type": "class",
            "sourceCode": "export class Positioning {\n    private getAllStyles(element: HTMLElement) { return window.getComputedStyle(element); }\n\n    private getStyle(element: HTMLElement, prop: string): string { return this.getAllStyles(element)[prop]; }\n\n    private isStaticPositioned(element: HTMLElement): boolean {\n        return (this.getStyle(element, 'position') || 'static') === 'static';\n    }\n\n    private offsetParent(element: HTMLElement): HTMLElement {\n        let offsetParentEl = <HTMLElement>element.offsetParent || document.documentElement;\n\n        while (offsetParentEl && offsetParentEl !== document.documentElement && this.isStaticPositioned(offsetParentEl)) {\n            offsetParentEl = <HTMLElement>offsetParentEl.offsetParent;\n        }\n\n        return offsetParentEl || document.documentElement;\n    }\n\n    position(element: HTMLElement, round = true): ClientRect {\n        let elPosition: ClientRect;\n        let parentOffset: ClientRect = { width: 0, height: 0, top: 0, bottom: 0, left: 0, right: 0 };\n\n        if (this.getStyle(element, 'position') === 'fixed') {\n            elPosition = element.getBoundingClientRect();\n        } else {\n            const offsetParentEl = this.offsetParent(element);\n\n            elPosition = this.offset(element, false);\n\n            if (offsetParentEl !== document.documentElement) {\n                parentOffset = this.offset(offsetParentEl, false);\n            }\n\n            parentOffset.top += offsetParentEl.clientTop;\n            parentOffset.left += offsetParentEl.clientLeft;\n        }\n\n        elPosition.top -= parentOffset.top;\n        elPosition.bottom -= parentOffset.top;\n        elPosition.left -= parentOffset.left;\n        elPosition.right -= parentOffset.left;\n\n        if (round) {\n            elPosition.top = Math.round(elPosition.top);\n            elPosition.bottom = Math.round(elPosition.bottom);\n            elPosition.left = Math.round(elPosition.left);\n            elPosition.right = Math.round(elPosition.right);\n        }\n\n        return elPosition;\n    }\n\n    offset(element: HTMLElement, round = true): ClientRect {\n        const elBcr = element.getBoundingClientRect();\n        const viewportOffset = {\n            top: window.pageYOffset - document.documentElement.clientTop,\n            left: window.pageXOffset - document.documentElement.clientLeft\n        };\n\n        const elOffset = {\n            height: elBcr.height || element.offsetHeight,\n            width: elBcr.width || element.offsetWidth,\n            top: elBcr.top + viewportOffset.top,\n            bottom: elBcr.bottom + viewportOffset.top,\n            left: elBcr.left + viewportOffset.left,\n            right: elBcr.right + viewportOffset.left\n        };\n\n        if (round) {\n            elOffset.height = Math.round(elOffset.height);\n            elOffset.width = Math.round(elOffset.width);\n            elOffset.top = Math.round(elOffset.top);\n            elOffset.bottom = Math.round(elOffset.bottom);\n            elOffset.left = Math.round(elOffset.left);\n            elOffset.right = Math.round(elOffset.right);\n        }\n\n        return elOffset;\n    }\n\n    positionElements(hostElement: HTMLElement, targetElement: HTMLElement, placement: string, appendToBody?: boolean):\n        ClientRect {\n        const hostElPosition = appendToBody ? this.offset(hostElement, false) : this.position(hostElement, false);\n        const targetElStyles = this.getAllStyles(targetElement);\n        const targetElBCR = targetElement.getBoundingClientRect();\n        const placementPrimary = placement.split('-')[0] || 'top';\n        const placementSecondary = placement.split('-')[1] || 'center';\n\n        const targetElPosition: ClientRect = {\n            'height': targetElBCR.height || targetElement.offsetHeight,\n            'width': targetElBCR.width || targetElement.offsetWidth,\n            'top': 0,\n            'bottom': targetElBCR.height || targetElement.offsetHeight,\n            'left': 0,\n            'right': targetElBCR.width || targetElement.offsetWidth\n        };\n\n        switch (placementPrimary) {\n            case 'top':\n                targetElPosition.top =\n                    hostElPosition.top - (targetElement.offsetHeight + parseFloat(targetElStyles.marginBottom));\n                break;\n            case 'bottom':\n                targetElPosition.top = hostElPosition.top + hostElPosition.height;\n                break;\n            case 'left':\n                targetElPosition.left =\n                    hostElPosition.left - (targetElement.offsetWidth + parseFloat(targetElStyles.marginRight));\n                break;\n            case 'right':\n                targetElPosition.left = hostElPosition.left + hostElPosition.width;\n                break;\n        }\n\n        switch (placementSecondary) {\n            case 'top':\n                targetElPosition.top = hostElPosition.top;\n                break;\n            case 'bottom':\n                targetElPosition.top = hostElPosition.top + hostElPosition.height - targetElement.offsetHeight;\n                break;\n            case 'left':\n                targetElPosition.left = hostElPosition.left;\n                break;\n            case 'right':\n                targetElPosition.left = hostElPosition.left + hostElPosition.width - targetElement.offsetWidth;\n                break;\n            case 'center':\n                if (placementPrimary === 'top' || placementPrimary === 'bottom') {\n                    targetElPosition.left = hostElPosition.left + hostElPosition.width / 2 - targetElement.offsetWidth / 2;\n                } else {\n                    targetElPosition.top = hostElPosition.top + hostElPosition.height / 2 - targetElement.offsetHeight / 2;\n                }\n                break;\n        }\n\n        targetElPosition.top = Math.round(targetElPosition.top);\n        targetElPosition.bottom = Math.round(targetElPosition.bottom);\n        targetElPosition.left = Math.round(targetElPosition.left);\n        targetElPosition.right = Math.round(targetElPosition.right);\n\n        return targetElPosition;\n    }\n\n    // Restituisce i collocamenti disponibili per l'elemento target nella viewport in base all'elemento host\n    getAvailablePlacements(hostElement: HTMLElement, targetElement: HTMLElement): string[] {\n        const availablePlacements: Array<string> = [];\n        const hostElemClientRect = hostElement.getBoundingClientRect();\n        const targetElemClientRect = targetElement.getBoundingClientRect();\n        const html = document.documentElement;\n        const windowHeight = window.innerHeight || html.clientHeight;\n        const windowWidth = window.innerWidth || html.clientWidth;\n        const hostElemClientRectHorCenter = hostElemClientRect.left + hostElemClientRect.width / 2;\n        const hostElemClientRectVerCenter = hostElemClientRect.top + hostElemClientRect.height / 2;\n\n        // controlla se la larghezza dell'elemento target può essere collocata tra la sinistra dell'host e l'inizio della viewport\n        // e controlla anche se l'altezza del target è nella viewport\n        if (targetElemClientRect.width < hostElemClientRect.left) {\n            // controlla solo per la sinistra\n            if (hostElemClientRectVerCenter > targetElemClientRect.height / 2 &&\n                windowHeight - hostElemClientRectVerCenter > targetElemClientRect.height / 2) {\n                availablePlacements.splice(availablePlacements.length, 1, 'left');\n            }\n            // controlla solo per le varianti di sinistra left-top and left-bottom\n            this.setSecondaryPlacementForLeftRight(hostElemClientRect, targetElemClientRect, 'left', availablePlacements);\n        }\n\n        // controlla se l'altezza del target è minore della cima dell'host\n        if (targetElemClientRect.height < hostElemClientRect.top) {\n            if (hostElemClientRectHorCenter > targetElemClientRect.width / 2 &&\n                windowWidth - hostElemClientRectHorCenter > targetElemClientRect.width / 2) {\n                availablePlacements.splice(availablePlacements.length, 1, 'top');\n            }\n            this.setSecondaryPlacementForTopBottom(hostElemClientRect, targetElemClientRect, 'top', availablePlacements);\n        }\n\n        // controlla se la larghezza dell'elemento target può essere collocata tra la destra dell'host e la fine della viewport\n        // e controlla anche se l'altezza del target è nella viewport\n        if (windowWidth - hostElemClientRect.right > targetElemClientRect.width) {\n            // controlla solo per la destra\n            if (hostElemClientRectVerCenter > targetElemClientRect.height / 2 &&\n                windowHeight - hostElemClientRectVerCenter > targetElemClientRect.height / 2) {\n                availablePlacements.splice(availablePlacements.length, 1, 'right');\n            }\n            // controlla solo per le varianti di destra right-top and right-bottom\n            this.setSecondaryPlacementForLeftRight(hostElemClientRect, targetElemClientRect, 'right', availablePlacements);\n        }\n\n        // controlla se c'è abbastanza spazio tra la base dell'host e la fine della viewport per l'altezza del target\n        if (windowHeight - hostElemClientRect.bottom > targetElemClientRect.height) {\n            if (hostElemClientRectHorCenter > targetElemClientRect.width / 2 &&\n                windowWidth - hostElemClientRectHorCenter > targetElemClientRect.width / 2) {\n                availablePlacements.splice(availablePlacements.length, 1, 'bottom');\n            }\n            this.setSecondaryPlacementForTopBottom(hostElemClientRect, targetElemClientRect, 'bottom', availablePlacements);\n        }\n\n        return availablePlacements;\n    }\n\n    /**\n     * Controlla se il collocamento secondario per sinistra e destra è disponibile, come left-top, left-bottom, right-top e right-bottom\n     * primaryplacement: left|right\n     * availablePlacementArr: array con i collocamenti disponibili\n     */\n    private setSecondaryPlacementForLeftRight(\n        hostElemClientRect: ClientRect, targetElemClientRect: ClientRect, primaryPlacement: string,\n        availablePlacementArr: Array<string>) {\n        const html = document.documentElement;\n        // check for left-bottom\n        if (targetElemClientRect.height <= hostElemClientRect.bottom) {\n            availablePlacementArr.splice(availablePlacementArr.length, 1, primaryPlacement + '-bottom');\n        }\n        if ((window.innerHeight || html.clientHeight) - hostElemClientRect.top >= targetElemClientRect.height) {\n            availablePlacementArr.splice(availablePlacementArr.length, 1, primaryPlacement + '-top');\n        }\n    }\n\n    /**\n     * Controlla se il collocamento secondario per sopra e sotto è disponibile, come top-left, top-right, bottom-left, bottom-right\n     * primaryplacement: top|bottom\n     * availablePlacementArr: array con i collocamenti disponibili\n     */\n    private setSecondaryPlacementForTopBottom(\n        hostElemClientRect: ClientRect, targetElemClientRect: ClientRect, primaryPlacement: string,\n        availablePlacementArr: Array<string>) {\n        const html = document.documentElement;\n        // check for left-bottom\n        if ((window.innerWidth || html.clientWidth) - hostElemClientRect.left >= targetElemClientRect.width) {\n            availablePlacementArr.splice(availablePlacementArr.length, 1, primaryPlacement + '-left');\n        }\n        if (targetElemClientRect.width <= hostElemClientRect.right) {\n            availablePlacementArr.splice(availablePlacementArr.length, 1, primaryPlacement + '-right');\n        }\n    }\n}\n\nconst positionService = new Positioning();\n\n/*\n * Accetta l'array del collocamento e applica il collocamento adatto in base alla viewport.\n * Ritorna il collocamento applicato.\n * In caso di collocamento auto, i collocamenti sono selezionati in ordine\n *   'top', 'bottom', 'left', 'right',\n *   'top-left', 'top-right',\n *   'bottom-left', 'bottom-right',\n *   'left-top', 'left-bottom',\n *   'right-top', 'right-bottom'.\n * */\nexport function positionElements(\n    hostElement: HTMLElement, targetElement: HTMLElement, placement: string | Placement | PlacementArray,\n    appendToBody?: boolean): Placement {\n    const placementVals: Array<Placement> = Array.isArray(placement) ? placement : [placement as Placement];\n\n    // Sostituisce il collocamento auto con altri collocamenti\n    let hasAuto = placementVals.findIndex(val => val === 'auto');\n    if (hasAuto >= 0) {\n        ['top', 'bottom', 'left', 'right', 'top-left', 'top-right', 'bottom-left', 'bottom-right', 'left-top',\n            'left-bottom', 'right-top', 'right-bottom',\n        ].forEach(function (obj) {\n            if (placementVals.find(val => val.search('^' + obj) !== -1) == null) {\n                placementVals.splice(hasAuto++, 1, obj as Placement);\n            }\n        });\n    }\n\n    // coordinate per dove posizionare\n    let topVal = 0, leftVal = 0;\n    let appliedPlacement: Placement;\n    // prendere i collocamenti disponibili\n    const availablePlacements = positionService.getAvailablePlacements(hostElement, targetElement);\n    // iterare sui collocamenti acquisiti\n    for (const { item, index } of toItemIndexes(placementVals)) {\n        // Controlla se il collocamento passato è presente nel collocamento disponibile, altrimenti applica l'ultimo collocamento nella\n        // lista del collocamento passato\n        if ((availablePlacements.find(val => val === item) != null) || (placementVals.length === index + 1)) {\n            appliedPlacement = <Placement>item;\n            const pos = positionService.positionElements(hostElement, targetElement, item, appendToBody);\n            topVal = pos.top;\n            leftVal = pos.left;\n            break;\n        }\n    }\n    targetElement.style.top = `${topVal}px`;\n    targetElement.style.left = `${leftVal}px`;\n    return appliedPlacement;\n}\n\n// Funzione per prendere l'indice e l'oggetto di un array\nfunction toItemIndexes<T>(a: T[]) {\n    return a.map((item, index) => ({ item, index }));\n}\n\nexport type Placement = 'auto' | 'top' | 'bottom' | 'left' | 'right' | 'top-left' | 'top-right' | 'bottom-left' |\n    'bottom-right' | 'left-top' | 'left-bottom' | 'right-top' | 'right-bottom';\n\nexport type PlacementArray = Placement | Array<Placement>;\n",
            "properties": [],
            "methods": [
                {
                    "name": "getAllStyles",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAvailablePlacements",
                    "args": [
                        {
                            "name": "hostElement",
                            "type": "HTMLElement"
                        },
                        {
                            "name": "targetElement",
                            "type": "HTMLElement"
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 154,
                    "jsdoctags": [
                        {
                            "name": "hostElement",
                            "type": "HTMLElement",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "targetElement",
                            "type": "HTMLElement",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStyle",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement"
                        },
                        {
                            "name": "prop",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "prop",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isStaticPositioned",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "offset",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement"
                        },
                        {
                            "name": "round",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "ClientRect",
                    "typeParameters": [],
                    "line": 61,
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "round",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "offsetParent",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement"
                        }
                    ],
                    "optional": false,
                    "returnType": "HTMLElement",
                    "typeParameters": [],
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "position",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement"
                        },
                        {
                            "name": "round",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "ClientRect",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "round",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "positionElements",
                    "args": [
                        {
                            "name": "hostElement",
                            "type": "HTMLElement"
                        },
                        {
                            "name": "targetElement",
                            "type": "HTMLElement"
                        },
                        {
                            "name": "placement",
                            "type": "string"
                        },
                        {
                            "name": "appendToBody",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "ClientRect",
                    "typeParameters": [],
                    "line": 89,
                    "jsdoctags": [
                        {
                            "name": "hostElement",
                            "type": "HTMLElement",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "targetElement",
                            "type": "HTMLElement",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "placement",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appendToBody",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSecondaryPlacementForLeftRight",
                    "args": [
                        {
                            "name": "hostElemClientRect",
                            "type": "ClientRect"
                        },
                        {
                            "name": "targetElemClientRect",
                            "type": "ClientRect"
                        },
                        {
                            "name": "primaryPlacement",
                            "type": "string"
                        },
                        {
                            "name": "availablePlacementArr",
                            "type": "Array<string>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 214,
                    "description": "<p>Controlla se il collocamento secondario per sinistra e destra è disponibile, come left-top, left-bottom, right-top e right-bottom\nprimaryplacement: left|right\navailablePlacementArr: array con i collocamenti disponibili</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "hostElemClientRect",
                            "type": "ClientRect",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "targetElemClientRect",
                            "type": "ClientRect",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "primaryPlacement",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "availablePlacementArr",
                            "type": "Array<string>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSecondaryPlacementForTopBottom",
                    "args": [
                        {
                            "name": "hostElemClientRect",
                            "type": "ClientRect"
                        },
                        {
                            "name": "targetElemClientRect",
                            "type": "ClientRect"
                        },
                        {
                            "name": "primaryPlacement",
                            "type": "string"
                        },
                        {
                            "name": "availablePlacementArr",
                            "type": "Array<string>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 232,
                    "description": "<p>Controlla se il collocamento secondario per sopra e sotto è disponibile, come top-left, top-right, bottom-left, bottom-right\nprimaryplacement: top|bottom\navailablePlacementArr: array con i collocamenti disponibili</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "hostElemClientRect",
                            "type": "ClientRect",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "targetElemClientRect",
                            "type": "ClientRect",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "primaryPlacement",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "availablePlacementArr",
                            "type": "Array<string>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "jsdoctags": [
                {
                    "pos": 7,
                    "end": 17,
                    "flags": 0,
                    "kind": 284,
                    "atToken": {
                        "pos": 7,
                        "end": 8,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 8,
                        "end": 15,
                        "flags": 0,
                        "escapedText": "license"
                    },
                    "comment": "Copyright Angular ng-bootstrap team All Rights Reserved.\n\nUse of this source code is governed by an MIT-style license that can be\nfound in the LICENSE file at https://raw.githubusercontent.com/ng-bootstrap/ng-bootstrap/master/LICENSE"
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RadioChange",
            "id": "class-RadioChange-f64fd0c7b01c8d4779c6a1f6316e64e0",
            "file": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
            "type": "class",
            "sourceCode": "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  forwardRef,\n  ChangeDetectionStrategy,\n  AfterContentInit,\n  Directive,\n  ContentChildren,\n  QueryList,\n  OnInit,\n  OnDestroy,\n  Optional,\n  HostBinding\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { UniqueSelectionDispatcher } from './unique-selection-dispatcher';\n\nlet identifier = 0;\n\nfunction _coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n\nexport class RadioChange {\n  constructor(\n    public source: RadioButtonComponent,\n    public value: any\n  ) { }\n}\n\n@Directive({\n  selector: 'it-radio-group', // tslint:disable-line\n  exportAs: 'itRadioGroup',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioGroupDirective),\n    multi: true\n  }]\n})\nexport class RadioGroupDirective implements AfterContentInit, ControlValueAccessor {\n\n  @HostBinding('attr.role') role = 'radiogroup';\n\n  /**\n   * Il valore selezionato per il gruppo. Dovrebbe essere uguale al valore del radio button selezionato se\n   * *esiste* un radio button con un valore corrispondente. Se *non esiste* un radio button corrispondente\n   * questo valore persiste ed è applicato nel caso in cui un nuovo radio button viene aggiunto con il valore\n   * corrispondente.\n   */\n  private _value: any = null;\n\n  /** L'attributo HTML name da applicare ai radio button in questo gruppo */\n  private _name = `it-radio-group-${identifier++}`;\n\n  /** Il radio button attualmente selezionato. */\n  private _selected: RadioButtonComponent | null = null;\n\n  /** se `value` è stato settato al suo valore iniziale. */\n  private _isInitialized = false;\n\n  /** Se il radio group è disabilitato. */\n  private _disabled = false;\n\n\n\n  /**\n   * Evento emesso quando il valore del gruppo cambia.\n   * Gli eventi di change sono emessi soltanto quando il valore cambia a causa dell'interazione dell'utente\n   * con il radio button (stesso comportamento di `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<RadioChange> = new EventEmitter<RadioChange>();\n\n  /** radio buttons figli. */\n  @ContentChildren(forwardRef(() => RadioButtonComponent), { descendants: true }) _radios: QueryList<RadioButtonComponent>; // tslint:disable-line\n\n  /** Il metodo da chiamare per aggiornare ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => { };\n\n  onTouched: () => any = () => { };\n\n  /** Nome del gruppo di radio button. Tutti i radio button all'interno del gruppo avranno questo nome. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Valore del radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Il radio button selezionato. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: RadioButtonComponent | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Se il gruppo è disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = _coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef\n  ) { }\n\n  /**\n   * Inizializza le proprietà quando il contenuto dei figliè disponibile.\n   * Questo permette di propagare gli attributi rilevanti ai radio buttons associati.\n   */\n  ngAfterContentInit(): void {\n    this._isInitialized = true;\n  }\n\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Aggiorna il radio button `selected` a seconda del suo _value. */\n  private _updateSelectedRadioFromValue(): void {\n    this._selected = null;\n    this._radios.forEach(radio => {\n      radio.checked = this.value === radio.value;\n      if (radio.checked) {\n        this._selected = radio;\n      }\n    });\n  }\n\n  /** Invia l'evento change con la selezione corrente e il valore del gruppo. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new RadioChange(this._selected, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  writeValue(value: any): void {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  registerOnChange(fn: (value: any) => void): void {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n}\n\n/**\n * Un radio button con design bootstrap italia. Supporta tutte le funzionalità di una radio HTML5,\n * ed espone una API simile. Una `<it-radio-button>` può essere checked, unchecked, o disabled.\n */\n@Component({\n  selector: 'it-radio-button',\n  templateUrl: './radio.component.html',\n  styleUrls: ['./radio.component.scss'],\n  exportAs: 'itRadioButton',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RadioButtonComponent implements OnInit, OnDestroy {\n\n  id = `radio-${identifier++}`;\n\n  /** Attributo 'name' usato per raggruppare i radio button per un'unica selezione. */\n  @Input() name: string;\n\n  /** L'etichetta delradio button. */\n  @Input()\n  label: string;\n\n  /** se il radio button è checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = _coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Il valore di questo radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Se il radio button è disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = !!value;\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /**\n   * Evento emesso quando il valore `checked` del radio button cambia.\n   */\n  @Output() readonly change: EventEmitter<RadioChange> = new EventEmitter<RadioChange>();\n\n  /** Il radio group padre. Può essere presente o meno. */\n  radioGroup: RadioGroupDirective;\n\n  /** Se il radio button è checked. */\n  private _checked = false;\n\n  /** Se il radio button è disabled. */\n  private _disabled: boolean;\n\n  /** il valore assegnato al radio button. */\n  private _value: any = null;\n\n  private _removeUniqueSelectionListener: () => void = () => { };\n\n  constructor(\n    @Optional() radioGroup: RadioGroupDirective,\n    private _changeDetector: ChangeDetectorRef,\n    private _radioDispatcher: UniqueSelectionDispatcher\n  ) {\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /**\n   * Segna il radio button come da controllare per la change detection.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit(): void {\n    if (this.radioGroup) {\n      // Se il radio button è all'interno di un gruppo, determina se deve essere selezionato\n      this.checked = this.radioGroup.value === this._value;\n      // Copia il `name` del radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngOnDestroy() {\n    this._removeUniqueSelectionListener();\n  }\n\n  private _emitChangeEvent(): void {\n    this.change.emit(new RadioChange(this, this._value));\n  }\n\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "source",
                        "type": "RadioButtonComponent"
                    },
                    {
                        "name": "value",
                        "type": "any"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "source",
                        "type": "RadioButtonComponent",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "source",
                    "type": "RadioButtonComponent",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ToggleChange",
            "id": "class-ToggleChange-96bbfccd611f40d2afe13f6321b42ce3",
            "file": "projects/design-angular-kit/src/lib/toggle/toggle.component.ts",
            "type": "class",
            "sourceCode": "import { Component, Input, Output, EventEmitter, ChangeDetectorRef, forwardRef, ChangeDetectionStrategy } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nlet identifier = 0;\n\nexport class ToggleChange {\n  source: ToggleComponent;\n  checked: boolean;\n}\n\n/**\n * Una toggle con design bootstrap italia. Supporta tutte le funzionalità di una checkbox HTML5,\n * ed espone una API simile. Una `<it-toggle>` può essere checked, unchecked, o disabled.\n */\n@Component({\n  selector: 'it-toggle',\n  templateUrl: './toggle.component.html',\n  styleUrls: ['./toggle.component.css'],\n  providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ToggleComponent), multi: true }],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ToggleComponent implements ControlValueAccessor {\n  /**\n   * Se la toggle è selezionata.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value !== this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked = false;\n\n  /**\n   * L'etichetta della toggle.\n   */\n  @Input()\n  label: string;\n\n  /**\n   * Se la toggle è disabilitata.\n   */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    if (value !== this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled = false;\n\n  /**\n   * Evento emesso quando il valore `checked` della toggle cambia.\n   */\n  @Output() readonly change: EventEmitter<ToggleChange> =\n    new EventEmitter<ToggleChange>();\n\n    inputId = `toggle-${identifier++}`;\n\n  private _onTouched: () => any = () => {};\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => { };\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef\n  ) { }\n\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  handleChange(event: Event) {\n    event.stopPropagation();\n    if (!this.disabled) {\n      this._toggle();\n      this._emitChangeEvent();\n    }\n  }\n\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  private _emitChangeEvent() {\n    const event = new ToggleChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n}\n",
            "properties": [
                {
                    "name": "checked",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "source",
                    "type": "ToggleComponent",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Trigger",
            "id": "class-Trigger-84d625e97878e2ae767e28f4d6bb0896",
            "file": "projects/design-angular-kit/src/lib/tooltip/triggers.ts",
            "type": "class",
            "sourceCode": "export class Trigger {\n    constructor(public open: string, public close?: string) {\n        if (!close) {\n            this.close = open;\n        }\n    }\n\n    isManual() { return this.open === 'manual' || this.close === 'manual'; }\n}\n\nconst DEFAULT_ALIASES = {\n    'hover': ['mouseenter', 'mouseleave'],\n    'focus': ['focus', 'blur']\n};\n\nexport function parseTriggers(triggers: string, aliases = DEFAULT_ALIASES): Trigger[] {\n    const trimmedTriggers = (triggers || '').trim();\n\n    if (trimmedTriggers.length === 0) {\n        return [];\n    }\n\n    const parsedTriggers = trimmedTriggers.split(/\\s+/).map(trigger => trigger.split(':')).map((triggerPair) => {\n        const alias = aliases[triggerPair[0]] || triggerPair;\n        return new Trigger(alias[0], alias[1]);\n    });\n\n    const manualTriggers = parsedTriggers.filter(triggerPair => triggerPair.isManual());\n\n    if (manualTriggers.length > 1) {\n        throw new Error('Triggers parse error: only one manual trigger is allowed');\n    }\n\n    if (manualTriggers.length === 1 && parsedTriggers.length > 1) {\n        throw new Error('Triggers parse error: manual trigger can\\'t be mixed with other triggers');\n    }\n\n    return parsedTriggers;\n}\n\nconst noopFn = () => { };\n\nexport function listenToTriggers(renderer: any, nativeElement: any, triggers: string, openFn, closeFn, toggleFn) {\n    const parsedTriggers = parseTriggers(triggers);\n    const listeners = [];\n\n    if (parsedTriggers.length === 1 && parsedTriggers[0].isManual()) {\n        return noopFn;\n    }\n\n    parsedTriggers.forEach((trigger: Trigger) => {\n        if (trigger.open === trigger.close) {\n            listeners.push(renderer.listen(nativeElement, trigger.open, toggleFn));\n        } else {\n            listeners.push(\n                renderer.listen(nativeElement, trigger.open, openFn), renderer.listen(nativeElement, trigger.close, closeFn));\n        }\n    });\n\n    return () => { listeners.forEach(unsubscribeFn => unsubscribeFn()); };\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "open",
                        "type": "string"
                    },
                    {
                        "name": "close",
                        "type": "string",
                        "optional": true
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "open",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "close",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "close",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "open",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "isManual",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "jsdoctags": [
                {
                    "pos": 7,
                    "end": 17,
                    "flags": 0,
                    "kind": 284,
                    "atToken": {
                        "pos": 7,
                        "end": 8,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 8,
                        "end": 15,
                        "flags": 0,
                        "escapedText": "license"
                    },
                    "comment": "Copyright Angular ng-bootstrap team All Rights Reserved.\n\nUse of this source code is governed by an MIT-style license that can be\nfound in the LICENSE file at https://raw.githubusercontent.com/ng-bootstrap/ng-bootstrap/master/LICENSE"
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Util",
            "id": "class-Util-3bc296cb8174f177e5e978ba0d32c847",
            "file": "projects/design-angular-kit/src/lib/util/util.ts",
            "type": "class",
            "sourceCode": "export class Util {\n  static coerceBooleanProperty(value: any): boolean {\n    return value != null && `${value}` !== 'false';\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "coerceBooleanProperty",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 2,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "BadgeDirective",
            "id": "directive-BadgeDirective-c3214969219962e0b0e00e1851100d38",
            "file": "projects/design-angular-kit/src/lib/badge/badge.directive.ts",
            "type": "directive",
            "description": "<p>Una badge con design bootstrap italia.</p>\n",
            "sourceCode": "import { Directive, ElementRef, Input, HostBinding } from '@angular/core';\nimport { ThemeColor, THEME_COLORS } from '../models/ThemeColor';\nimport { Util } from '../util/util';\n\n/**\n * Una badge con design bootstrap italia.\n */\n@Directive({\n  selector: '[it-badge]', // tslint:disable-line\n  exportAs: 'itBadge'\n})\nexport class BadgeDirective {\n\n  /**\n   * (Opzionale) indica il colore del badge. Può essere `primary`, `secondary`, `danger`, `warning`, `info`, `success`, `light` o `dark`.\n   * Se non viene fornito o il valore è diverso da quelli previsti il suo valore di default è `light`.\n   */\n  @Input()\n  get badgeColor(): any {\n    return this._badgeColor;\n  }\n  set badgeColor(value: any) {\n    if (ThemeColor.is(value)) {\n      this._badgeColor = value;\n    } else {\n      this._badgeColor = THEME_COLORS.LIGHT;\n    }\n  }\n  private _badgeColor = THEME_COLORS.LIGHT;\n\n  /**\n   * La direttiva che abilita l'elemento come badge. Mostra il testo come contenuto del badge.\n   * Se valutato ad `undefined`, `null` o stringa vuota il badge non viene mostrato.\n   */\n  @Input('it-badge')\n  @HostBinding('innerText')\n  get badgeText(): string { return this._badgeText; }\n  set badgeText(value: string) {\n    if (value) {\n      this._badgeText = value;\n    } else {\n      this._badgeText = '';\n    }\n  }\n  private _badgeText = '';\n\n  private _isPill = false;\n  /**\n   * Indica se il badge è arrotondato o meno.\n   */\n  @Input()\n  get isPill(): boolean { return this._isPill; }\n  set isPill(value: boolean) {\n    this._isPill = Util.coerceBooleanProperty(value);\n  }\n\n  private getBadgeColorClassName(): string {\n    return `badge-${this._badgeColor}`;\n  }\n\n  @HostBinding('class')\n  get hostClasses(): string {\n    return [\n      'badge',\n      this.getBadgeColorClassName(),\n      this.isPill ? 'badge-pill' : '',\n    ].join(' ');\n  }\n\n  constructor(private el: ElementRef) { }\n\n}\n",
            "selector": "[it-badge]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "badgeColor",
                    "description": "<p>(Opzionale) indica il colore del badge. Può essere <code>primary</code>, <code>secondary</code>, <code>danger</code>, <code>warning</code>, <code>info</code>, <code>success</code>, <code>light</code> o <code>dark</code>.\nSe non viene fornito o il valore è diverso da quelli previsti il suo valore di default è <code>light</code>.</p>\n",
                    "line": 19,
                    "type": "any"
                },
                {
                    "name": "isPill",
                    "description": "<p>Indica se il badge è arrotondato o meno.</p>\n",
                    "line": 52,
                    "type": "boolean"
                },
                {
                    "name": "it-badge",
                    "description": "<p>La direttiva che abilita l&#39;elemento come badge. Mostra il testo come contenuto del badge.\nSe valutato ad <code>undefined</code>, <code>null</code> o stringa vuota il badge non viene mostrato.</p>\n",
                    "line": 37,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "hostBindings": [
                {
                    "name": "class",
                    "line": 62,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_badgeColor",
                    "defaultValue": "THEME_COLORS.LIGHT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_badgeText",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_isPill",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getBadgeColorClassName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef"
                    }
                ],
                "line": 68,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "badgeColor": {
                    "name": "badgeColor",
                    "setSignature": {
                        "name": "badgeColor",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "any"
                            }
                        ],
                        "returnType": "void",
                        "line": 22,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "badgeText": {
                    "name": "badgeText",
                    "setSignature": {
                        "name": "badgeText",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 38,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "isPill": {
                    "name": "isPill",
                    "setSignature": {
                        "name": "isPill",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 53,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "RadioGroupDirective",
            "id": "directive-RadioGroupDirective-f64fd0c7b01c8d4779c6a1f6316e64e0",
            "file": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  forwardRef,\n  ChangeDetectionStrategy,\n  AfterContentInit,\n  Directive,\n  ContentChildren,\n  QueryList,\n  OnInit,\n  OnDestroy,\n  Optional,\n  HostBinding\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { UniqueSelectionDispatcher } from './unique-selection-dispatcher';\n\nlet identifier = 0;\n\nfunction _coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n\nexport class RadioChange {\n  constructor(\n    public source: RadioButtonComponent,\n    public value: any\n  ) { }\n}\n\n@Directive({\n  selector: 'it-radio-group', // tslint:disable-line\n  exportAs: 'itRadioGroup',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioGroupDirective),\n    multi: true\n  }]\n})\nexport class RadioGroupDirective implements AfterContentInit, ControlValueAccessor {\n\n  @HostBinding('attr.role') role = 'radiogroup';\n\n  /**\n   * Il valore selezionato per il gruppo. Dovrebbe essere uguale al valore del radio button selezionato se\n   * *esiste* un radio button con un valore corrispondente. Se *non esiste* un radio button corrispondente\n   * questo valore persiste ed è applicato nel caso in cui un nuovo radio button viene aggiunto con il valore\n   * corrispondente.\n   */\n  private _value: any = null;\n\n  /** L'attributo HTML name da applicare ai radio button in questo gruppo */\n  private _name = `it-radio-group-${identifier++}`;\n\n  /** Il radio button attualmente selezionato. */\n  private _selected: RadioButtonComponent | null = null;\n\n  /** se `value` è stato settato al suo valore iniziale. */\n  private _isInitialized = false;\n\n  /** Se il radio group è disabilitato. */\n  private _disabled = false;\n\n\n\n  /**\n   * Evento emesso quando il valore del gruppo cambia.\n   * Gli eventi di change sono emessi soltanto quando il valore cambia a causa dell'interazione dell'utente\n   * con il radio button (stesso comportamento di `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<RadioChange> = new EventEmitter<RadioChange>();\n\n  /** radio buttons figli. */\n  @ContentChildren(forwardRef(() => RadioButtonComponent), { descendants: true }) _radios: QueryList<RadioButtonComponent>; // tslint:disable-line\n\n  /** Il metodo da chiamare per aggiornare ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => { };\n\n  onTouched: () => any = () => { };\n\n  /** Nome del gruppo di radio button. Tutti i radio button all'interno del gruppo avranno questo nome. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Valore del radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Il radio button selezionato. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: RadioButtonComponent | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Se il gruppo è disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = _coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef\n  ) { }\n\n  /**\n   * Inizializza le proprietà quando il contenuto dei figliè disponibile.\n   * Questo permette di propagare gli attributi rilevanti ai radio buttons associati.\n   */\n  ngAfterContentInit(): void {\n    this._isInitialized = true;\n  }\n\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Aggiorna il radio button `selected` a seconda del suo _value. */\n  private _updateSelectedRadioFromValue(): void {\n    this._selected = null;\n    this._radios.forEach(radio => {\n      radio.checked = this.value === radio.value;\n      if (radio.checked) {\n        this._selected = radio;\n      }\n    });\n  }\n\n  /** Invia l'evento change con la selezione corrente e il valore del gruppo. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new RadioChange(this._selected, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  writeValue(value: any): void {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  registerOnChange(fn: (value: any) => void): void {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n}\n\n/**\n * Un radio button con design bootstrap italia. Supporta tutte le funzionalità di una radio HTML5,\n * ed espone una API simile. Una `<it-radio-button>` può essere checked, unchecked, o disabled.\n */\n@Component({\n  selector: 'it-radio-button',\n  templateUrl: './radio.component.html',\n  styleUrls: ['./radio.component.scss'],\n  exportAs: 'itRadioButton',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RadioButtonComponent implements OnInit, OnDestroy {\n\n  id = `radio-${identifier++}`;\n\n  /** Attributo 'name' usato per raggruppare i radio button per un'unica selezione. */\n  @Input() name: string;\n\n  /** L'etichetta delradio button. */\n  @Input()\n  label: string;\n\n  /** se il radio button è checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = _coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Il valore di questo radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Se il radio button è disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = !!value;\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /**\n   * Evento emesso quando il valore `checked` del radio button cambia.\n   */\n  @Output() readonly change: EventEmitter<RadioChange> = new EventEmitter<RadioChange>();\n\n  /** Il radio group padre. Può essere presente o meno. */\n  radioGroup: RadioGroupDirective;\n\n  /** Se il radio button è checked. */\n  private _checked = false;\n\n  /** Se il radio button è disabled. */\n  private _disabled: boolean;\n\n  /** il valore assegnato al radio button. */\n  private _value: any = null;\n\n  private _removeUniqueSelectionListener: () => void = () => { };\n\n  constructor(\n    @Optional() radioGroup: RadioGroupDirective,\n    private _changeDetector: ChangeDetectorRef,\n    private _radioDispatcher: UniqueSelectionDispatcher\n  ) {\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /**\n   * Segna il radio button come da controllare per la change detection.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit(): void {\n    if (this.radioGroup) {\n      // Se il radio button è all'interno di un gruppo, determina se deve essere selezionato\n      this.checked = this.radioGroup.value === this._value;\n      // Copia il `name` del radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngOnDestroy() {\n    this._removeUniqueSelectionListener();\n  }\n\n  private _emitChangeEvent(): void {\n    this.change.emit(new RadioChange(this, this._value));\n  }\n\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n}\n",
            "selector": "it-radio-group",
            "providers": [
                {
                    "name": "{\n    : , : (() => ), : true\n}"
                }
            ],
            "inputsClass": [
                {
                    "name": "disabled",
                    "description": "<p>Se il gruppo è disabled </p>\n",
                    "line": 121,
                    "type": "boolean"
                },
                {
                    "name": "name",
                    "description": "<p>Nome del gruppo di radio button. Tutti i radio button all&#39;interno del gruppo avranno questo nome. </p>\n",
                    "line": 86,
                    "type": "string"
                },
                {
                    "name": "selected",
                    "description": "<p>Il radio button selezionato. </p>\n",
                    "line": 112
                },
                {
                    "name": "value",
                    "description": "<p>Valore del radio button. </p>\n",
                    "line": 94,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter<RadioChange>()",
                    "description": "<p>Evento emesso quando il valore del gruppo cambia.\nGli eventi di change sono emessi soltanto quando il valore cambia a causa dell&#39;interazione dell&#39;utente\ncon il radio button (stesso comportamento di <code>&lt;input type-&quot;radio&quot;&gt;</code>).</p>\n",
                    "line": 74,
                    "type": "EventEmitter<RadioChange>"
                }
            ],
            "hostBindings": [
                {
                    "name": "attr.role",
                    "defaultValue": "'radiogroup'",
                    "line": 45
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_controlValueAccessorChangeFn",
                    "defaultValue": "() => { }",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Il metodo da chiamare per aggiornare ngModel </p>\n",
                    "line": 80
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "<p>Se il radio group è disabilitato. </p>\n",
                    "line": 65,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_isInitialized",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "<p>se <code>value</code> è stato settato al suo valore iniziale. </p>\n",
                    "line": 62,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_name",
                    "defaultValue": "`it-radio-group-${identifier++}`",
                    "type": "",
                    "optional": false,
                    "description": "<p>L&#39;attributo HTML name da applicare ai radio button in questo gruppo </p>\n",
                    "line": 56,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_radios",
                    "type": "QueryList<RadioButtonComponent>",
                    "optional": false,
                    "description": "<p>radio buttons figli. </p>\n",
                    "line": 77,
                    "decorators": [
                        {
                            "name": "ContentChildren"
                        }
                    ]
                },
                {
                    "name": "_selected",
                    "defaultValue": "null",
                    "type": "RadioButtonComponent | null",
                    "optional": false,
                    "description": "<p>Il radio button attualmente selezionato. </p>\n",
                    "line": 59,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_value",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Il valore selezionato per il gruppo. Dovrebbe essere uguale al valore del radio button selezionato se\n<em>esiste</em> un radio button con un valore corrispondente. Se <em>non esiste</em> un radio button corrispondente\nquesto valore persiste ed è applicato nel caso in cui un nuovo radio button viene aggiunto con il valore\ncorrispondente.</p>\n",
                    "line": 53,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => { }",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 82
                }
            ],
            "methodsClass": [
                {
                    "name": "_checkSelectedRadioButton",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104
                },
                {
                    "name": "_emitChangeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "description": "<p>Invia l&#39;evento change con la selezione corrente e il valore del gruppo. </p>\n"
                },
                {
                    "name": "_markRadiosForCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171
                },
                {
                    "name": "_touch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139
                },
                {
                    "name": "_updateRadioButtonNames",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_updateSelectedRadioFromValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "description": "<p>Aggiorna il radio button <code>selected</code> a seconda del suo _value. </p>\n",
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "description": "<p>Inizializza le proprietà quando il contenuto dei figliè disponibile.\nQuesto permette di propagare gli attributi rilevanti ai radio buttons associati.</p>\n"
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "AfterContentInit",
                "ControlValueAccessor"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_changeDetector",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 125,
                "jsdoctags": [
                    {
                        "name": "_changeDetector",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "name": {
                    "name": "name",
                    "setSignature": {
                        "name": "name",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 87,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "args": [
                            {
                                "name": "newValue",
                                "type": "any"
                            }
                        ],
                        "returnType": "void",
                        "line": 95,
                        "jsdoctags": [
                            {
                                "name": "newValue",
                                "type": "any",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "selected": {
                    "name": "selected",
                    "setSignature": {
                        "name": "selected",
                        "type": "void",
                        "args": [
                            {
                                "name": "selected",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 113,
                        "jsdoctags": [
                            {
                                "name": "selected",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 122,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "TooltipDirective",
            "id": "directive-TooltipDirective-7e7d590852c39b7c4a478af7ff4b73a0",
            "file": "projects/design-angular-kit/src/lib/tooltip/tooltip.directive.ts",
            "type": "directive",
            "description": "<p>Una direttiva per la creazione di un tooltip.</p>\n",
            "sourceCode": "import {\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n  OnDestroy,\n  OnChanges,\n  Injector,\n  Renderer2,\n  ComponentRef,\n  ElementRef,\n  TemplateRef,\n  ViewContainerRef,\n  ComponentFactoryResolver,\n  NgZone,\n  SimpleChanges,\n  HostListener,\n} from '@angular/core';\n\nimport { listenToTriggers } from './triggers';\nimport { positionElements, Placement, PlacementArray } from './positioning';\nimport { PopupService } from './popup';\nimport { TooltipConfig } from './tooltip.config';\nimport { TooltipComponent } from './tooltip.component';\nimport { Subscription } from 'rxjs';\nimport { Util } from '../util/util';\nimport { INTERACTION_TRIGGERS } from '../models/InteractionTrigger';\n\nconst TRIGGER = INTERACTION_TRIGGERS.HOVER;\n\nlet identifier = 0;\n\n/**\n * Una direttiva per la creazione di un tooltip.\n */\n@Directive({\n  selector: '[it-tooltip]', // tslint:disable-line\n  exportAs: 'it-tooltip'\n})\nexport class TooltipDirective implements OnInit, OnDestroy, OnChanges {\n  /**\n   * Contenuto da mostrare nel tooltip. In assenza di contenuto, il tooltip non si aprirà.\n   */\n  @Input('it-tooltip')\n  get itTooltip(): string | TemplateRef<any> { return this._itTooltip; }\n  set itTooltip(value: string | TemplateRef<any>) { this._itTooltip = value; }\n  private _itTooltip: string | TemplateRef<any>;\n\n  /**\n   * Il collocamento accettato dal tooltip:\n   *    \"top\", \"top-left\", \"top-right\", \"bottom\", \"bottom-left\", \"bottom-right\",\n   *    \"left\", \"left-top\", \"left-bottom\", \"right\", \"right-top\", \"right-bottom\"\n   * ed array dei valori soprariportati.\n   */\n  @Input()\n  get placement(): PlacementArray { return this._placement; }\n  set placement(value: PlacementArray) { this._placement = value; }\n  private _placement: PlacementArray;\n\n  /**\n   * Un selettore che specifica l'elemento in cui il tooltip dovrebbe essere aggiunto.\n   * Attualmente supporta solo \"body\".\n   */\n  @Input()\n  get container(): string { return this._container; }\n  set container(value: string) { this._container = value; }\n  private _container: string;\n\n  /**\n   * Evento da emettere quando il tooltip sta per essere mostrato\n   */\n  @Output('show')\n  get showEvent(): EventEmitter<TooltipDirective> { return this._showEvent; }\n  set showEvent(value: EventEmitter<TooltipDirective>) { this._showEvent = value; }\n  private _showEvent = new EventEmitter<TooltipDirective>();\n\n  /**\n   * Evento da emettere quando il tooltip è mostrato\n   */\n  @Output('shown')\n  get shownEvent(): EventEmitter<TooltipDirective> { return this._shownEvent; }\n  set shownEvent(value: EventEmitter<TooltipDirective>) { this._shownEvent = value; }\n  private _shownEvent = new EventEmitter<TooltipDirective>();\n\n  /**\n   * Evento da emettere quando il tooltip viene inserito nel DOM\n   */\n  @Output('inserted')\n  get insertedEvent(): EventEmitter<TooltipDirective> { return this._insertedEvent; }\n  set insertedEvent(value: EventEmitter<TooltipDirective>) { this._insertedEvent = value; }\n  private _insertedEvent = new EventEmitter<TooltipDirective>();\n\n  /**\n   * Evento da emettere quando il tooltip sta per essere nascosto\n   */\n  @Output('hide')\n  get hideEvent(): EventEmitter<TooltipDirective> { return this._hideEvent; }\n  set hideEvent(value: EventEmitter<TooltipDirective>) { this._hideEvent = value; }\n  private _hideEvent = new EventEmitter<TooltipDirective>();\n\n  /**\n   * Evento da emettere quando il tooltip è nascosto\n   */\n  @Output('hidden')\n  get hiddenEvent(): EventEmitter<TooltipDirective> { return this._hiddenEvent; }\n  set hiddenEvent(value: EventEmitter<TooltipDirective>) { this._hiddenEvent = value; }\n  private _hiddenEvent = new EventEmitter<TooltipDirective>();\n\n  /**\n   * Un flag utilizzato per indicare se un tooltip è disabilitato, così da non doverlo mostrare.\n   */\n  @Input('disabled')\n  get disableTooltip(): boolean { return this._disableTooltip; }\n  set disableTooltip(value: boolean) { this._disableTooltip = Util.coerceBooleanProperty(value); }\n  private _disableTooltip = false;\n\n  private _itTooltipWindowId = `it-tooltip-${identifier++}`;\n  private _popupService: PopupService<TooltipComponent>;\n  private _windowRef: ComponentRef<TooltipComponent>;\n  private _unregisterListenersFn;\n  private _zoneSubscription: Subscription;\n  private _isDisabled(): boolean {\n    if (this.disableTooltip) {\n      return true;\n    }\n    if (!this.itTooltip) {\n      return true;\n    }\n    return false;\n  }\n\n  constructor(\n      private _elementRef: ElementRef<HTMLElement>,\n      private _renderer: Renderer2,\n      injector: Injector,\n      componentFactoryResolver: ComponentFactoryResolver,\n      viewContainerRef: ViewContainerRef,\n      config: TooltipConfig,\n      ngZone: NgZone\n  ) {\n    this.placement = config.placement;\n    this.container = config.container;\n    this.disableTooltip = config.disableTooltip;\n    this._popupService = new PopupService<TooltipComponent>(\n      TooltipComponent, injector, viewContainerRef, _renderer, componentFactoryResolver);\n\n    this._zoneSubscription = ngZone.onStable.subscribe(() => {\n      if (this._windowRef) {\n        this._windowRef.instance.applyPlacement(\n          positionElements(\n            this._elementRef.nativeElement, this._windowRef.location.nativeElement,\n            this.placement, this.container === 'body'\n          )\n        );\n      }\n    });\n  }\n\n  /**\n   * Apre il tooltip di un elemento. È considerato un azionamento \"manuale\" del tooltip.\n   * Il context è un valore opzionale da iniettare nel template del tooltip quando esso viene creato.\n   */\n  show(context?: any) {\n    if (!this._isDisabled()) {\n      // Scatena l'evento per segnalare l'inizio del processo per visualizzare il tooltip\n      this.showEvent.emit(this);\n\n      if (!this._windowRef) {\n        this._windowRef = this._popupService.open(this.itTooltip, context);\n\n        const tooltipComponent = this._windowRef.instance;\n        tooltipComponent.id = this._itTooltipWindowId;\n\n        this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', this._itTooltipWindowId);\n\n        if (this.container === 'body') {\n          window.document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);\n        }\n\n        this._windowRef.changeDetectorRef.detectChanges();\n        this._windowRef.changeDetectorRef.markForCheck();\n\n        // Posiziona il tooltip attorno all'elemento\n        tooltipComponent.applyPlacement(\n          positionElements(\n            this._elementRef.nativeElement, this._windowRef.location.nativeElement,\n            this.placement, this.container === 'body'\n          )\n        );\n\n        // Scatena l'evento per segnalare l'inserimento nel DOM\n        this.insertedEvent.emit(this);\n      } else {\n        const tooltipComponent = this._windowRef.instance;\n        tooltipComponent.hidden = false;\n      }\n\n      // Scatena l'evento per segnalare che il tooltip è stato visualizzato\n      this.shownEvent.emit(this);\n    }\n  }\n\n  /**\n   * Chiude il tooltip di un elemento. È considerato un azionamento \"manuale\" del tooltip.\n   */\n  hide() {\n    // Scatena l'evento per segnalare l'inizio del processo per nascondere il tooltip\n    this.hideEvent.emit(this);\n    if (this._windowRef) {\n      const tooltipComponent = this._windowRef.instance;\n      tooltipComponent.hidden = true;\n\n      // Scatena l'evento per segnalare che il tooltip è stato nascosto\n      this.hiddenEvent.emit(this);\n    }\n  }\n\n  /**\n   * Apre/chiude il un tooltip di un elemento. È considerato un azionamento \"manuale\" del tooltip.\n   */\n  toggle() {\n    if (this._windowRef) {\n      if (this._windowRef.instance.hidden) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    } else {\n      this.show();\n    }\n  }\n\n  /**\n   * Nasconde e distrugge il tooltip di un elemento.\n   */\n  dispose() {\n    const isShown = this._windowRef ? !this._windowRef.instance.hidden : false;\n    if (isShown) {\n      this.hide();\n    }\n\n    if (this._windowRef) {\n      this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');\n      this._popupService.close();\n      this._windowRef = null;\n    }\n  }\n\n  /**\n   * Fornisce al tooltip di un elemento la possibilità di essere mostrato.\n   */\n  enable() {\n    if (this._isDisabled()) {\n      this.disableTooltip = false;\n    }\n  }\n\n  /**\n   * Rimuove la capacità di mostrare il tooltip di un elemento.\n   */\n  disable() {\n    if (!this._isDisabled()) {\n      this.disableTooltip = true;\n    }\n  }\n\n  /**\n   * Attiva/disattiva la possibilità che il tooltip di un elemento sia mostrato o nascosto.\n   */\n  toggleEnabled() {\n    if (this._isDisabled()) {\n      this.enable();\n    } else {\n      this.disable();\n    }\n  }\n\n  ngOnInit() {\n    this._unregisterListenersFn = listenToTriggers(\n      this._renderer, this._elementRef.nativeElement, TRIGGER,\n      this.show.bind(this), this.hide.bind(this), this.toggle.bind(this)\n    );\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Chiude il tooltip se il contenuto risulta vuoto, o se disableTooltip è impostato a vero\n    if ((changes['itTooltip'] || changes['disableTooltip']) && this._isDisabled()) {\n      this.hide();\n    } else if (changes['placement']) {\n      if (this._windowRef) {\n        this._windowRef.instance.applyPlacement(\n          positionElements(\n            this._elementRef.nativeElement, this._windowRef.location.nativeElement,\n            this.placement, this.container === 'body'\n          )\n        );\n      }\n    } else if (changes['container']) {\n      const isShown = this._windowRef ? !this._windowRef.instance.hidden : false;\n      this.dispose();\n      if (isShown) {\n        this.show();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this.dispose();\n    this._unregisterListenersFn();\n    this._zoneSubscription.unsubscribe();\n  }\n\n  @HostListener('focus')\n  protected handleFocus() {\n    this.show();\n  }\n\n  @HostListener('blur')\n  protected handleBlur() {\n    this.hide();\n  }\n}\n",
            "selector": "[it-tooltip]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "container",
                    "description": "<p>Un selettore che specifica l&#39;elemento in cui il tooltip dovrebbe essere aggiunto.\nAttualmente supporta solo &quot;body&quot;.</p>\n",
                    "line": 73,
                    "type": "string"
                },
                {
                    "name": "disabled",
                    "description": "<p>Un flag utilizzato per indicare se un tooltip è disabilitato, così da non doverlo mostrare.</p>\n",
                    "line": 121,
                    "type": "boolean"
                },
                {
                    "name": "it-tooltip",
                    "description": "<p>Contenuto da mostrare nel tooltip. In assenza di contenuto, il tooltip non si aprirà.</p>\n",
                    "line": 53,
                    "type": "string | TemplateRef<any>"
                },
                {
                    "name": "placement",
                    "description": "<p>Il collocamento accettato dal tooltip:\n    &quot;top&quot;, &quot;top-left&quot;, &quot;top-right&quot;, &quot;bottom&quot;, &quot;bottom-left&quot;, &quot;bottom-right&quot;,\n    &quot;left&quot;, &quot;left-top&quot;, &quot;left-bottom&quot;, &quot;right&quot;, &quot;right-top&quot;, &quot;right-bottom&quot;\ned array dei valori soprariportati.</p>\n",
                    "line": 64,
                    "type": "PlacementArray"
                }
            ],
            "outputsClass": [
                {
                    "name": "hidden",
                    "description": "<p>Evento da emettere quando il tooltip è nascosto</p>\n",
                    "line": 113,
                    "type": "EventEmitter<TooltipDirective>"
                },
                {
                    "name": "hide",
                    "description": "<p>Evento da emettere quando il tooltip sta per essere nascosto</p>\n",
                    "line": 105,
                    "type": "EventEmitter<TooltipDirective>"
                },
                {
                    "name": "inserted",
                    "description": "<p>Evento da emettere quando il tooltip viene inserito nel DOM</p>\n",
                    "line": 97,
                    "type": "EventEmitter<TooltipDirective>"
                },
                {
                    "name": "show",
                    "description": "<p>Evento da emettere quando il tooltip sta per essere mostrato</p>\n",
                    "line": 81,
                    "type": "EventEmitter<TooltipDirective>"
                },
                {
                    "name": "shown",
                    "description": "<p>Evento da emettere quando il tooltip è mostrato</p>\n",
                    "line": 89,
                    "type": "EventEmitter<TooltipDirective>"
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "blur",
                    "args": [],
                    "argsDecorator": [],
                    "line": 327
                },
                {
                    "name": "focus",
                    "args": [],
                    "argsDecorator": [],
                    "line": 322
                }
            ],
            "propertiesClass": [
                {
                    "name": "_container",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_disableTooltip",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 123,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_hiddenEvent",
                    "defaultValue": "new EventEmitter<TooltipDirective>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 115,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_hideEvent",
                    "defaultValue": "new EventEmitter<TooltipDirective>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 107,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_insertedEvent",
                    "defaultValue": "new EventEmitter<TooltipDirective>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_itTooltip",
                    "type": "string | TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_itTooltipWindowId",
                    "defaultValue": "`it-tooltip-${identifier++}`",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 125,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_placement",
                    "type": "PlacementArray",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_popupService",
                    "type": "PopupService<TooltipComponent>",
                    "optional": false,
                    "description": "",
                    "line": 126,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_showEvent",
                    "defaultValue": "new EventEmitter<TooltipDirective>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_shownEvent",
                    "defaultValue": "new EventEmitter<TooltipDirective>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_unregisterListenersFn",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 128,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_windowRef",
                    "type": "ComponentRef<TooltipComponent>",
                    "optional": false,
                    "description": "",
                    "line": 127,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_zoneSubscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 129,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_isDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 130,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "disable",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 269,
                    "description": "<p>Rimuove la capacità di mostrare il tooltip di un elemento.</p>\n"
                },
                {
                    "name": "dispose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 244,
                    "description": "<p>Nasconde e distrugge il tooltip di un elemento.</p>\n"
                },
                {
                    "name": "enable",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 260,
                    "description": "<p>Fornisce al tooltip di un elemento la possibilità di essere mostrato.</p>\n"
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 214,
                    "description": "<p>Chiude il tooltip di un elemento. È considerato un azionamento &quot;manuale&quot; del tooltip.</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 293,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 315
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 286
                },
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "context",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "description": "<p>Apre il tooltip di un elemento. È considerato un azionamento &quot;manuale&quot; del tooltip.\nIl context è un valore opzionale da iniettare nel template del tooltip quando esso viene creato.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "context",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 229,
                    "description": "<p>Apre/chiude il un tooltip di un elemento. È considerato un azionamento &quot;manuale&quot; del tooltip.</p>\n"
                },
                {
                    "name": "toggleEnabled",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 278,
                    "description": "<p>Attiva/disattiva la possibilità che il tooltip di un elemento sia mostrato o nascosto.</p>\n"
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy",
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>"
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "injector",
                        "type": "Injector"
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "config",
                        "type": "TooltipConfig"
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone"
                    }
                ],
                "line": 138,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "config",
                        "type": "TooltipConfig",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "itTooltip": {
                    "name": "itTooltip",
                    "setSignature": {
                        "name": "itTooltip",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 54,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "placement": {
                    "name": "placement",
                    "setSignature": {
                        "name": "placement",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 65,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "container": {
                    "name": "container",
                    "setSignature": {
                        "name": "container",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 74,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "showEvent": {
                    "name": "showEvent",
                    "setSignature": {
                        "name": "showEvent",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 82,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "shownEvent": {
                    "name": "shownEvent",
                    "setSignature": {
                        "name": "shownEvent",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 90,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "insertedEvent": {
                    "name": "insertedEvent",
                    "setSignature": {
                        "name": "insertedEvent",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 98,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "hideEvent": {
                    "name": "hideEvent",
                    "setSignature": {
                        "name": "hideEvent",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 106,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "hiddenEvent": {
                    "name": "hiddenEvent",
                    "setSignature": {
                        "name": "hiddenEvent",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 114,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "disableTooltip": {
                    "name": "disableTooltip",
                    "setSignature": {
                        "name": "disableTooltip",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 122,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-3099c24c7b4788edf94c96720a59209f",
            "file": "projects/design-angular-kit/src/lib/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-button",
            "styleUrls": [
                "button.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "block",
                    "description": "<p>Indica se il pulsante occupa tutta l&#39;ampiezza a sua disposizione.</p>\n",
                    "line": 42,
                    "type": "boolean"
                },
                {
                    "name": "color",
                    "description": "<p>Stabilisce il colore del pulsante a seconda delle classi di bootstrap.\nPuò avere valori:</p>\n<ul>\n<li> primary\n<li> secondary\n<li> danger\n<li> warning\n<li> info\n<li> success\n<li> light\n<li> dark\n</ul>",
                    "line": 61,
                    "type": "any"
                },
                {
                    "name": "disabled",
                    "description": "<p>Se presente, il pulsante avrà un effetto di trasparenza e non reagirà al click</p>\n",
                    "line": 24,
                    "type": "boolean"
                },
                {
                    "name": "outline",
                    "description": "<p>Stabilisce se lo stile del pulsante avrà un contorno.\nAccetta una espressione booleana o può essere usato come attributo senza valore.\nDeve funzionare solo in congiunzione con un colore definito, altrimenti l&#39;attributo viene ignorato.</p>\n",
                    "line": 34,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "description": "<p>Indica la grandezza del pulsante. Può assumere i valori:</p>\n<ul>\n<li> lg\n<li> sm\n<li> xs\n</ul>",
                    "line": 82,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_block",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_color",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_outline",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_size",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "id",
                    "defaultValue": "`button-${identifier++}`",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Un bottone con design bootstrap italia. Supporta tutte le funzionalità di un bottone HTML5.</p>\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { ThemeColor } from '../models/ThemeColor';\nimport { ButtonSize } from '../models/ButtonSize';\nimport { Util } from '../util/util';\n\nlet identifier = 0;\n\n/**\n * Un bottone con design bootstrap italia. Supporta tutte le funzionalità di un bottone HTML5.\n */\n@Component({\n  selector: 'it-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.css']\n})\nexport class ButtonComponent {\n\n  id = `button-${identifier++}`;\n\n  /**\n   * Se presente, il pulsante avrà un effetto di trasparenza e non reagirà al click\n   */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) { this._disabled = Util.coerceBooleanProperty(value); }\n  private _disabled = false;\n\n  /**\n   * Stabilisce se lo stile del pulsante avrà un contorno.\n   * Accetta una espressione booleana o può essere usato come attributo senza valore.\n   * Deve funzionare solo in congiunzione con un colore definito, altrimenti l'attributo viene ignorato.\n   */\n  @Input()\n  get outline(): boolean { return this._outline; }\n  set outline(value: boolean) { this._outline = Util.coerceBooleanProperty(value); }\n  private _outline = false;\n\n  /**\n   * Indica se il pulsante occupa tutta l'ampiezza a sua disposizione.\n   */\n  @Input()\n  get block(): boolean { return this._block; }\n  set block(value: boolean) { this._block = Util.coerceBooleanProperty(value); }\n  private _block = false;\n\n  /**\n   * Stabilisce il colore del pulsante a seconda delle classi di bootstrap.\n   * Può avere valori:\n   * <ul>\n   * <li> primary\n   * <li> secondary\n   * <li> danger\n   * <li> warning\n   * <li> info\n   * <li> success\n   * <li> light\n   * <li> dark\n   * </ul>\n   */\n  @Input()\n  get color(): any {\n    return this._color;\n  }\n  set color(value: any) {\n    if (ThemeColor.is(value)) {\n      this._color = value;\n    } else {\n      this._color = undefined;\n    }\n  }\n  private _color;\n\n  /**\n   * Indica la grandezza del pulsante. Può assumere i valori:\n   * <ul>\n   * <li> lg\n   * <li> sm\n   * <li> xs\n   * </ul>\n   */\n  @Input()\n  get size(): any {\n    return this._size;\n  }\n  set size(value: any) {\n    if (ButtonSize.is(value)) {\n      this._size = value;\n    } else {\n      this._size = undefined;\n    }\n  }\n  private _size;\n\n  get buttonClass() {\n    let cssClass = 'btn';\n\n    if (this.color) {\n      if (this.outline) {\n        cssClass += ` btn-outline-${this.color}`;\n      } else {\n        cssClass += ` btn-${this.color}`;\n      }\n    }\n\n    if (this.size) {\n      cssClass += ` btn-${this.size}`;\n    }\n\n    if (this.block) {\n      cssClass += ' btn-block';\n    }\n\n    if (this.disabled) {\n      cssClass += ' disabled';\n    }\n\n    return cssClass;\n  }\n\n}\n",
            "accessors": {
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 25,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "outline": {
                    "name": "outline",
                    "setSignature": {
                        "name": "outline",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 35,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "block": {
                    "name": "block",
                    "setSignature": {
                        "name": "block",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 43,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "color": {
                    "name": "color",
                    "setSignature": {
                        "name": "color",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "any"
                            }
                        ],
                        "returnType": "void",
                        "line": 64,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "size": {
                    "name": "size",
                    "setSignature": {
                        "name": "size",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "any"
                            }
                        ],
                        "returnType": "void",
                        "line": 85,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "buttonClass": {
                    "name": "buttonClass",
                    "getSignature": {
                        "name": "buttonClass",
                        "type": "",
                        "returnType": "",
                        "line": 94
                    }
                }
            },
            "templateData": "<button type=\"button\" [id]=\"id\" [class]=\"buttonClass\" [disabled]=\"disabled\" [attr.aria-disabled]=\"disabled\">\n  <ng-content></ng-content>\n</button>\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-061d883b3f4d581a0a4d05a1d1a8bf78",
            "file": "projects/design-angular-kit/src/lib/checkbox/checkbox.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ : , : (() => ), : true }"
                }
            ],
            "selector": "it-checkbox",
            "styleUrls": [
                "checkbox.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "description": "<p>Se la checkbox è selezionata.</p>\n",
                    "line": 27,
                    "type": "boolean"
                },
                {
                    "name": "disabled",
                    "description": "<p>Se la checkbox è disabilitata.</p>\n",
                    "line": 46,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "description": "<p>L&#39;etichetta della checkbox.</p>\n",
                    "line": 40,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter<CheckboxChange>()",
                    "description": "<p>Evento emesso quando il valore <code>checked</code> della checkbox cambia.</p>\n",
                    "line": 58,
                    "type": "EventEmitter<CheckboxChange>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_checked",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_controlValueAccessorChangeFn",
                    "defaultValue": "() => { }",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_onTouched",
                    "defaultValue": "() => {}",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "inputId",
                    "defaultValue": "`checkbox-${identifier++}`",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                }
            ],
            "methodsClass": [
                {
                    "name": "_emitChangeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "handleChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Una checkbox con design bootstrap italia. Supporta tutte le funzionalità di una checkbox HTML5,\ned espone una API simile. Una <code>&lt;it-checkbox&gt;</code> può essere checked, unchecked, o disabled.</p>\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, ChangeDetectorRef, forwardRef, ChangeDetectionStrategy } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nlet identifier = 0;\n\nexport class CheckboxChange {\n  source: CheckboxComponent;\n  checked: boolean;\n}\n\n/**\n * Una checkbox con design bootstrap italia. Supporta tutte le funzionalità di una checkbox HTML5,\n * ed espone una API simile. Una `<it-checkbox>` può essere checked, unchecked, o disabled.\n */\n@Component({\n  selector: 'it-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.css'],\n  providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => CheckboxComponent), multi: true }],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CheckboxComponent implements ControlValueAccessor {\n  /**\n   * Se la checkbox è selezionata.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value !== this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked = false;\n\n  /**\n   * L'etichetta della checkbox.\n   */\n  @Input()\n  label: string;\n\n  /**\n   * Se la checkbox è disabilitata.\n   */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    if (value !== this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled = false;\n\n  /**\n   * Evento emesso quando il valore `checked` della checkbox cambia.\n   */\n  @Output() readonly change: EventEmitter<CheckboxChange> =\n    new EventEmitter<CheckboxChange>();\n\n    inputId = `checkbox-${identifier++}`;\n\n  private _onTouched: () => any = () => {};\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => { };\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef\n  ) { }\n\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  handleChange(event: Event) {\n    event.stopPropagation();\n    if (!this.disabled) {\n      this._toggle();\n      this._emitChangeEvent();\n    }\n  }\n\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  private _emitChangeEvent() {\n    const event = new CheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "checked": {
                    "name": "checked",
                    "setSignature": {
                        "name": "checked",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 28,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 47,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=form-check>\n  <input type=checkbox\n    [id]=inputId\n    [checked]=checked\n    [disabled]=disabled\n    (change)=handleChange($event)>\n  <label\n    [attr.for]=inputId>{{label}}</label>\n</div>\n"
        },
        {
            "name": "ProgressBarComponent",
            "id": "component-ProgressBarComponent-4b50cab345688be6ce20081228e12c40",
            "file": "projects/design-angular-kit/src/lib/progress-bar/progress-bar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-progress-bar",
            "styleUrls": [
                "progress-bar.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./progress-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "description": "<p>Il colore della barra di avanzamento.</p>\n",
                    "line": 77,
                    "type": "any"
                },
                {
                    "name": "height",
                    "description": "<p>L&#39;altezza della barra di avanzamento.</p>\n",
                    "line": 37,
                    "type": "number"
                },
                {
                    "name": "label",
                    "description": "<p>L&#39;etichetta della barra di avanzamento.</p>\n",
                    "line": 69,
                    "type": "string"
                },
                {
                    "name": "max",
                    "description": "<p>Il valore massimo della barra di avanzamento.</p>\n",
                    "line": 53,
                    "type": "number"
                },
                {
                    "name": "min",
                    "description": "<p>Il valore minimo della barra di avanzamento.</p>\n",
                    "line": 45,
                    "type": "number"
                },
                {
                    "name": "value",
                    "description": "<p>L&#39;attuale valore della barra di avanzamento.</p>\n",
                    "line": 61,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_color",
                    "defaultValue": "THEME_COLORS.PRIMARY",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_height",
                    "defaultValue": "ProgressBarComponent.PROGRESS_BAR_DEFAULT_HEIGHT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_label",
                    "defaultValue": "ProgressBarComponent.PROGRESS_BAR_DEFAULT_LABEL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_max",
                    "defaultValue": "ProgressBarComponent.PROGRESS_BAR_DEFAULT_MAX",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_min",
                    "defaultValue": "ProgressBarComponent.PROGRESS_BAR_DEFAULT_MIN",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_value",
                    "defaultValue": "ProgressBarComponent.PROGRESS_BAR_DEFAULT_VALUE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "PROGRESS_BAR_DEFAULT_HEIGHT",
                    "defaultValue": "20",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "PROGRESS_BAR_DEFAULT_LABEL",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "PROGRESS_BAR_DEFAULT_MAX",
                    "defaultValue": "100",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "PROGRESS_BAR_DEFAULT_MIN",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "PROGRESS_BAR_DEFAULT_VALUE",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "progressbarId",
                    "defaultValue": "`it-progress-bar-${progressbarId++}`",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "pgClass",
                    "args": [],
                    "optional": false,
                    "returnType": "{ 'progress-bar': boolean; }",
                    "typeParameters": [],
                    "line": 97
                },
                {
                    "name": "pgStyle",
                    "args": [],
                    "optional": false,
                    "returnType": "{ 'width': string; }",
                    "typeParameters": [],
                    "line": 93
                },
                {
                    "name": "valuePercentage",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 89
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Una barra di avanzamento con design bootstrap italia.</p>\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ThemeColor, THEME_COLORS } from '../models/ThemeColor';\n\nlet progressbarId = 0;\n\n/**\n * Una barra di avanzamento con design bootstrap italia.\n */\n@Component({\n  selector: 'it-progress-bar',\n  templateUrl: './progress-bar.component.html',\n  styleUrls: ['./progress-bar.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ProgressBarComponent {\n\n  public static readonly PROGRESS_BAR_DEFAULT_MIN = 0;\n  public static readonly PROGRESS_BAR_DEFAULT_MAX = 100;\n  public static readonly PROGRESS_BAR_DEFAULT_VALUE = 0;\n  public static readonly PROGRESS_BAR_DEFAULT_HEIGHT = 20;\n  public static readonly PROGRESS_BAR_DEFAULT_LABEL = '';\n\n  progressbarId = `it-progress-bar-${progressbarId++}`;\n\n  /**\n   * L'altezza della barra di avanzamento.\n   */\n  @Input()\n  get height(): number { return this._height; }\n  set height(v: number) { this._height = v; }\n  private _height = ProgressBarComponent.PROGRESS_BAR_DEFAULT_HEIGHT;\n\n  /**\n   * Il valore minimo della barra di avanzamento.\n   */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) { this._min = Math.round(v); }\n  private _min = ProgressBarComponent.PROGRESS_BAR_DEFAULT_MIN;\n\n  /**\n   * Il valore massimo della barra di avanzamento.\n   */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) { this._max = Math.round(v); }\n  private _max = ProgressBarComponent.PROGRESS_BAR_DEFAULT_MAX;\n\n  /**\n   * L'attuale valore della barra di avanzamento.\n   */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = Math.min(Math.max(v, this._min), this._max); }\n  private _value = ProgressBarComponent.PROGRESS_BAR_DEFAULT_VALUE;\n\n  /**\n   * L'etichetta della barra di avanzamento.\n   */\n  @Input()\n  get label(): string { return this._label; }\n  set label(v: string) { this._label = v; }\n  private _label = ProgressBarComponent.PROGRESS_BAR_DEFAULT_LABEL;\n\n  /**\n   * Il colore della barra di avanzamento.\n   */\n  @Input()\n  get color(): any {\n    return this._color;\n  }\n  set color(value: any) {\n    if (ThemeColor.is(value)) {\n      this._color = value;\n    } else {\n      this._color = THEME_COLORS.PRIMARY;\n    }\n  }\n  private _color = THEME_COLORS.PRIMARY;\n\n  valuePercentage(): number {\n    return ((this.value - this.min) * 100) / (this.max - this.min);\n  }\n\n  pgStyle() {\n    return { 'width' : this.valuePercentage() + '%' };\n  }\n\n  pgClass() {\n    const progressbarClass = { 'progress-bar' : true };\n    if (this.color) {\n      progressbarClass[`bg-${this.color}`] = true;\n    }\n    return progressbarClass;\n  }\n\n  constructor() { }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 103
            },
            "accessors": {
                "height": {
                    "name": "height",
                    "setSignature": {
                        "name": "height",
                        "type": "void",
                        "args": [
                            {
                                "name": "v",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 38,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "min": {
                    "name": "min",
                    "setSignature": {
                        "name": "min",
                        "type": "void",
                        "args": [
                            {
                                "name": "v",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 46,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "max": {
                    "name": "max",
                    "setSignature": {
                        "name": "max",
                        "type": "void",
                        "args": [
                            {
                                "name": "v",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 54,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "args": [
                            {
                                "name": "v",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 62,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "label": {
                    "name": "label",
                    "setSignature": {
                        "name": "label",
                        "type": "void",
                        "args": [
                            {
                                "name": "v",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 70,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "color": {
                    "name": "color",
                    "setSignature": {
                        "name": "color",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "any"
                            }
                        ],
                        "returnType": "void",
                        "line": 80,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"progress\" [ngStyle]=\"{'height': height + 'px'}\">\n  <div role=\"progressbar\" [id]=\"progressbarId\" [ngClass]=\"pgClass()\" [ngStyle]=\"pgStyle()\"\n    [attr.aria-valuenow]=\"value\" [attr.aria-valuemin]=\"min\" [attr.aria-valuemax]=\"max\" >\n    {{label}}\n  </div>\n</div>"
        },
        {
            "name": "RadioButtonComponent",
            "id": "component-RadioButtonComponent-f64fd0c7b01c8d4779c6a1f6316e64e0",
            "file": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "itRadioButton",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-radio-button",
            "styleUrls": [
                "radio.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./radio.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "description": "<p>se il radio button è checked. </p>\n",
                    "line": 215,
                    "type": "boolean"
                },
                {
                    "name": "disabled",
                    "description": "<p>Se il radio button è disabled. </p>\n",
                    "line": 253,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "description": "<p>L&#39;etichetta delradio button. </p>\n",
                    "line": 211,
                    "type": "string"
                },
                {
                    "name": "name",
                    "description": "<p>Attributo &#39;name&#39; usato per raggruppare i radio button per un&#39;unica selezione. </p>\n",
                    "line": 207,
                    "type": "string"
                },
                {
                    "name": "value",
                    "description": "<p>Il valore di questo radio button. </p>\n",
                    "line": 236,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter<RadioChange>()",
                    "description": "<p>Evento emesso quando il valore <code>checked</code> del radio button cambia.</p>\n",
                    "line": 267,
                    "type": "EventEmitter<RadioChange>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_checked",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "<p>Se il radio button è checked. </p>\n",
                    "line": 273,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_disabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Se il radio button è disabled. </p>\n",
                    "line": 276,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_removeUniqueSelectionListener",
                    "defaultValue": "() => { }",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 281,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_value",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "<p>il valore assegnato al radio button. </p>\n",
                    "line": 279,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "id",
                    "defaultValue": "`radio-${identifier++}`",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 204
                },
                {
                    "name": "radioGroup",
                    "type": "RadioGroupDirective",
                    "optional": false,
                    "description": "<p>Il radio group padre. Può essere presente o meno. </p>\n",
                    "line": 270
                }
            ],
            "methodsClass": [
                {
                    "name": "_emitChangeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 318,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_markForCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 301,
                    "description": "<p>Segna il radio button come da controllare per la change detection.</p>\n"
                },
                {
                    "name": "_onInputChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 322,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 314
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 305
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Un radio button con design bootstrap italia. Supporta tutte le funzionalità di una radio HTML5,\ned espone una API simile. Una <code>&lt;it-radio-button&gt;</code> può essere checked, unchecked, o disabled.</p>\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  forwardRef,\n  ChangeDetectionStrategy,\n  AfterContentInit,\n  Directive,\n  ContentChildren,\n  QueryList,\n  OnInit,\n  OnDestroy,\n  Optional,\n  HostBinding\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { UniqueSelectionDispatcher } from './unique-selection-dispatcher';\n\nlet identifier = 0;\n\nfunction _coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n\nexport class RadioChange {\n  constructor(\n    public source: RadioButtonComponent,\n    public value: any\n  ) { }\n}\n\n@Directive({\n  selector: 'it-radio-group', // tslint:disable-line\n  exportAs: 'itRadioGroup',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioGroupDirective),\n    multi: true\n  }]\n})\nexport class RadioGroupDirective implements AfterContentInit, ControlValueAccessor {\n\n  @HostBinding('attr.role') role = 'radiogroup';\n\n  /**\n   * Il valore selezionato per il gruppo. Dovrebbe essere uguale al valore del radio button selezionato se\n   * *esiste* un radio button con un valore corrispondente. Se *non esiste* un radio button corrispondente\n   * questo valore persiste ed è applicato nel caso in cui un nuovo radio button viene aggiunto con il valore\n   * corrispondente.\n   */\n  private _value: any = null;\n\n  /** L'attributo HTML name da applicare ai radio button in questo gruppo */\n  private _name = `it-radio-group-${identifier++}`;\n\n  /** Il radio button attualmente selezionato. */\n  private _selected: RadioButtonComponent | null = null;\n\n  /** se `value` è stato settato al suo valore iniziale. */\n  private _isInitialized = false;\n\n  /** Se il radio group è disabilitato. */\n  private _disabled = false;\n\n\n\n  /**\n   * Evento emesso quando il valore del gruppo cambia.\n   * Gli eventi di change sono emessi soltanto quando il valore cambia a causa dell'interazione dell'utente\n   * con il radio button (stesso comportamento di `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<RadioChange> = new EventEmitter<RadioChange>();\n\n  /** radio buttons figli. */\n  @ContentChildren(forwardRef(() => RadioButtonComponent), { descendants: true }) _radios: QueryList<RadioButtonComponent>; // tslint:disable-line\n\n  /** Il metodo da chiamare per aggiornare ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => { };\n\n  onTouched: () => any = () => { };\n\n  /** Nome del gruppo di radio button. Tutti i radio button all'interno del gruppo avranno questo nome. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Valore del radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Il radio button selezionato. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: RadioButtonComponent | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Se il gruppo è disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = _coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef\n  ) { }\n\n  /**\n   * Inizializza le proprietà quando il contenuto dei figliè disponibile.\n   * Questo permette di propagare gli attributi rilevanti ai radio buttons associati.\n   */\n  ngAfterContentInit(): void {\n    this._isInitialized = true;\n  }\n\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Aggiorna il radio button `selected` a seconda del suo _value. */\n  private _updateSelectedRadioFromValue(): void {\n    this._selected = null;\n    this._radios.forEach(radio => {\n      radio.checked = this.value === radio.value;\n      if (radio.checked) {\n        this._selected = radio;\n      }\n    });\n  }\n\n  /** Invia l'evento change con la selezione corrente e il valore del gruppo. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new RadioChange(this._selected, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  writeValue(value: any): void {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  registerOnChange(fn: (value: any) => void): void {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n}\n\n/**\n * Un radio button con design bootstrap italia. Supporta tutte le funzionalità di una radio HTML5,\n * ed espone una API simile. Una `<it-radio-button>` può essere checked, unchecked, o disabled.\n */\n@Component({\n  selector: 'it-radio-button',\n  templateUrl: './radio.component.html',\n  styleUrls: ['./radio.component.scss'],\n  exportAs: 'itRadioButton',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RadioButtonComponent implements OnInit, OnDestroy {\n\n  id = `radio-${identifier++}`;\n\n  /** Attributo 'name' usato per raggruppare i radio button per un'unica selezione. */\n  @Input() name: string;\n\n  /** L'etichetta delradio button. */\n  @Input()\n  label: string;\n\n  /** se il radio button è checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = _coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Il valore di questo radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Se il radio button è disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = !!value;\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /**\n   * Evento emesso quando il valore `checked` del radio button cambia.\n   */\n  @Output() readonly change: EventEmitter<RadioChange> = new EventEmitter<RadioChange>();\n\n  /** Il radio group padre. Può essere presente o meno. */\n  radioGroup: RadioGroupDirective;\n\n  /** Se il radio button è checked. */\n  private _checked = false;\n\n  /** Se il radio button è disabled. */\n  private _disabled: boolean;\n\n  /** il valore assegnato al radio button. */\n  private _value: any = null;\n\n  private _removeUniqueSelectionListener: () => void = () => { };\n\n  constructor(\n    @Optional() radioGroup: RadioGroupDirective,\n    private _changeDetector: ChangeDetectorRef,\n    private _radioDispatcher: UniqueSelectionDispatcher\n  ) {\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /**\n   * Segna il radio button come da controllare per la change detection.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit(): void {\n    if (this.radioGroup) {\n      // Se il radio button è all'interno di un gruppo, determina se deve essere selezionato\n      this.checked = this.radioGroup.value === this._value;\n      // Copia il `name` del radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngOnDestroy() {\n    this._removeUniqueSelectionListener();\n  }\n\n  private _emitChangeEvent(): void {\n    this.change.emit(new RadioChange(this, this._value));\n  }\n\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "radioGroup",
                        "type": "RadioGroupDirective"
                    },
                    {
                        "name": "_changeDetector",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "_radioDispatcher",
                        "type": "UniqueSelectionDispatcher"
                    }
                ],
                "line": 281,
                "jsdoctags": [
                    {
                        "name": "radioGroup",
                        "type": "RadioGroupDirective",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_changeDetector",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_radioDispatcher",
                        "type": "UniqueSelectionDispatcher",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "checked": {
                    "name": "checked",
                    "setSignature": {
                        "name": "checked",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 216,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "any"
                            }
                        ],
                        "returnType": "void",
                        "line": 237,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 256,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"form-check\">\n  <input type=\"radio\"\n    [id]=\"id\"\n    [checked]=\"checked\"\n    [disabled]=\"disabled\"\n    [attr.name]=\"name\"\n    (change)=\"_onInputChange($event)\">\n  <label\n    [attr.for]=\"id\">{{label}}</label>\n</div>\n"
        },
        {
            "name": "ToggleComponent",
            "id": "component-ToggleComponent-96bbfccd611f40d2afe13f6321b42ce3",
            "file": "projects/design-angular-kit/src/lib/toggle/toggle.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ : , : (() => ), : true }"
                }
            ],
            "selector": "it-toggle",
            "styleUrls": [
                "toggle.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./toggle.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "description": "<p>Se la toggle è selezionata.</p>\n",
                    "line": 27,
                    "type": "boolean"
                },
                {
                    "name": "disabled",
                    "description": "<p>Se la toggle è disabilitata.</p>\n",
                    "line": 46,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "description": "<p>L&#39;etichetta della toggle.</p>\n",
                    "line": 40,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter<ToggleChange>()",
                    "description": "<p>Evento emesso quando il valore <code>checked</code> della toggle cambia.</p>\n",
                    "line": 58,
                    "type": "EventEmitter<ToggleChange>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_checked",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_controlValueAccessorChangeFn",
                    "defaultValue": "() => { }",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_onTouched",
                    "defaultValue": "() => {}",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "inputId",
                    "defaultValue": "`toggle-${identifier++}`",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                }
            ],
            "methodsClass": [
                {
                    "name": "_emitChangeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "handleChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Una toggle con design bootstrap italia. Supporta tutte le funzionalità di una checkbox HTML5,\ned espone una API simile. Una <code>&lt;it-toggle&gt;</code> può essere checked, unchecked, o disabled.</p>\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, ChangeDetectorRef, forwardRef, ChangeDetectionStrategy } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nlet identifier = 0;\n\nexport class ToggleChange {\n  source: ToggleComponent;\n  checked: boolean;\n}\n\n/**\n * Una toggle con design bootstrap italia. Supporta tutte le funzionalità di una checkbox HTML5,\n * ed espone una API simile. Una `<it-toggle>` può essere checked, unchecked, o disabled.\n */\n@Component({\n  selector: 'it-toggle',\n  templateUrl: './toggle.component.html',\n  styleUrls: ['./toggle.component.css'],\n  providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ToggleComponent), multi: true }],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ToggleComponent implements ControlValueAccessor {\n  /**\n   * Se la toggle è selezionata.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value !== this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked = false;\n\n  /**\n   * L'etichetta della toggle.\n   */\n  @Input()\n  label: string;\n\n  /**\n   * Se la toggle è disabilitata.\n   */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    if (value !== this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled = false;\n\n  /**\n   * Evento emesso quando il valore `checked` della toggle cambia.\n   */\n  @Output() readonly change: EventEmitter<ToggleChange> =\n    new EventEmitter<ToggleChange>();\n\n    inputId = `toggle-${identifier++}`;\n\n  private _onTouched: () => any = () => {};\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => { };\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef\n  ) { }\n\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  handleChange(event: Event) {\n    event.stopPropagation();\n    if (!this.disabled) {\n      this._toggle();\n      this._emitChangeEvent();\n    }\n  }\n\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  private _emitChangeEvent() {\n    const event = new ToggleChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "checked": {
                    "name": "checked",
                    "setSignature": {
                        "name": "checked",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 28,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 47,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"form-check\">\n  <div class=\"toggles\">\n    <label [attr.for]=inputId>\n      {{label}}\n      <input type=checkbox\n        [id]=inputId\n        [checked]=checked\n        [disabled]=disabled\n        (change)=handleChange($event)>\n      <span class=\"lever\"></span>\n    </label>\n  </div>\n</div>"
        },
        {
            "name": "TooltipComponent",
            "id": "component-TooltipComponent-32313650dff33b95e2fd41babc99476b",
            "file": "projects/design-angular-kit/src/lib/tooltip/tooltip.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-tooltip-window",
            "styleUrls": [
                "tooltip.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./tooltip.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "hidden",
                    "defaultValue": "false",
                    "line": 21
                },
                {
                    "name": "id",
                    "line": 20,
                    "type": "string"
                },
                {
                    "name": "placement",
                    "defaultValue": "'right'",
                    "line": 18,
                    "type": "Placement"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "applyPlacement",
                    "args": [
                        {
                            "name": "_placement",
                            "type": "Placement"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "_placement",
                            "type": "Placement",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [
                {
                    "name": "attr.role",
                    "defaultValue": "'tooltip'",
                    "line": 23
                },
                {
                    "name": "class",
                    "line": 24,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "description": "",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, ElementRef, Renderer2, Input, HostBinding } from '@angular/core';\nimport { Placement } from './positioning';\n\n@Component({\n  selector: 'it-tooltip-window',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: './tooltip.component.html',\n  styleUrls: ['./tooltip.component.css']\n})\nexport class TooltipComponent {\n  @Input() placement: Placement = 'right';\n\n  @Input() @HostBinding('id') id: string;\n  @Input() @HostBinding('hidden') hidden = false;\n\n  @HostBinding('attr.role') role = 'tooltip';\n  @HostBinding('class') get myCssClass(): string {\n    return 'tooltip show bs-tooltip-' + this.placement.split('-')[0] + ' bs-tooltip-' + this.placement;\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>, private _renderer: Renderer2) {}\n\n  applyPlacement(_placement: Placement) {\n    // Rimuovi le classi della posizione precedente\n    this._renderer.removeClass(this._element.nativeElement, 'bs-tooltip-' + this.placement.toString().split('-')[0]);\n    this._renderer.removeClass(this._element.nativeElement, 'bs-tooltip-' + this.placement.toString());\n\n    // Imposta la nuova posizione\n    this.placement = _placement;\n\n    // Applica le classi della nuova posizione\n    this._renderer.addClass(this._element.nativeElement, 'bs-tooltip-' + this.placement.toString().split('-')[0]);\n    this._renderer.addClass(this._element.nativeElement, 'bs-tooltip-' + this.placement.toString());\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_element",
                        "type": "ElementRef<HTMLElement>"
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "_element",
                        "type": "ElementRef<HTMLElement>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"arrow\"></div>\n<div class=\"tooltip-inner\">\n  <ng-content></ng-content>\n</div>"
        }
    ],
    "modules": [
        {
            "name": "DesignAngularKitModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BadgeDirective"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "CheckboxComponent"
                        },
                        {
                            "name": "ProgressBarComponent"
                        },
                        {
                            "name": "RadioButtonComponent"
                        },
                        {
                            "name": "RadioGroupDirective"
                        },
                        {
                            "name": "ToggleComponent"
                        },
                        {
                            "name": "TooltipComponent"
                        },
                        {
                            "name": "TooltipDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BadgeDirective"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "CheckboxComponent"
                        },
                        {
                            "name": "ProgressBarComponent"
                        },
                        {
                            "name": "RadioButtonComponent"
                        },
                        {
                            "name": "RadioGroupDirective"
                        },
                        {
                            "name": "ToggleComponent"
                        },
                        {
                            "name": "TooltipDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "BUTTON_SIZES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/ButtonSize.ts",
                "type": "object",
                "defaultValue": "{\n  LG: LG,\n  SM: SM,\n  XS: XS,\n}"
            },
            {
                "name": "ButtonSize",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/ButtonSize.ts",
                "type": "",
                "defaultValue": "t.keyof({\n  lg: null,\n  sm: null,\n  xs: null,\n})"
            },
            {
                "name": "CLICK",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                "type": "string",
                "defaultValue": "'click'"
            },
            {
                "name": "DANGER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "type": "string",
                "defaultValue": "'danger'"
            },
            {
                "name": "DARK",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "type": "string",
                "defaultValue": "'dark'"
            },
            {
                "name": "DEFAULT_ALIASES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/tooltip/triggers.ts",
                "type": "object",
                "defaultValue": "{\n    'hover': ['mouseenter', 'mouseleave'],\n    'focus': ['focus', 'blur']\n}"
            },
            {
                "name": "FOCUS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                "type": "string",
                "defaultValue": "'focus'"
            },
            {
                "name": "HOVER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                "type": "string",
                "defaultValue": "'hover'"
            },
            {
                "name": "identifier",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/tooltip/tooltip.directive.ts",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "identifier",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/toggle/toggle.component.ts",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "identifier",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/button/button.component.ts",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "identifier",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "identifier",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/checkbox/checkbox.component.ts",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "INFO",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "type": "string",
                "defaultValue": "'info'"
            },
            {
                "name": "INTERACTION_TRIGGERS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                "type": "object",
                "defaultValue": "{\n  CLICK: CLICK,\n  FOCUS: FOCUS,\n  HOVER: HOVER,\n}"
            },
            {
                "name": "InteractionTrigger",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                "type": "",
                "defaultValue": "t.keyof({\n  click: null,\n  focus: null,\n  hover: null,\n})"
            },
            {
                "name": "LG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/ButtonSize.ts",
                "type": "string",
                "defaultValue": "'lg'"
            },
            {
                "name": "LIGHT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "type": "string",
                "defaultValue": "'light'"
            },
            {
                "name": "noopFn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/tooltip/triggers.ts",
                "type": "",
                "defaultValue": "() => { }"
            },
            {
                "name": "positionService",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/tooltip/positioning.ts",
                "type": "",
                "defaultValue": "new Positioning()"
            },
            {
                "name": "PRIMARY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "type": "string",
                "defaultValue": "'primary'"
            },
            {
                "name": "progressbarId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/progress-bar/progress-bar.component.ts",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "SECONDARY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "type": "string",
                "defaultValue": "'secondary'"
            },
            {
                "name": "SM",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/ButtonSize.ts",
                "type": "string",
                "defaultValue": "'sm'"
            },
            {
                "name": "SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "type": "string",
                "defaultValue": "'success'"
            },
            {
                "name": "THEME_COLORS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "type": "object",
                "defaultValue": "{\n  PRIMARY: PRIMARY,\n  SECONDARY: SECONDARY,\n  DANGER: DANGER,\n  WARNING: WARNING,\n  INFO: INFO,\n  SUCCESS: SUCCESS,\n  LIGHT: LIGHT,\n  DARK: DARK\n}"
            },
            {
                "name": "ThemeColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "type": "",
                "defaultValue": "t.keyof({\n  primary: null,\n  secondary: null,\n  danger: null,\n  warning: null,\n  info: null,\n  success: null,\n  light: null,\n  dark: null,\n})"
            },
            {
                "name": "TRIGGER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/tooltip/tooltip.directive.ts",
                "type": "",
                "defaultValue": "INTERACTION_TRIGGERS.HOVER"
            },
            {
                "name": "WARNING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "type": "string",
                "defaultValue": "'warning'"
            },
            {
                "name": "XS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/models/ButtonSize.ts",
                "type": "string",
                "defaultValue": "'xs'"
            }
        ],
        "functions": [
            {
                "name": "_coerceBooleanProperty",
                "file": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "type": "any"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "value",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "listenToTriggers",
                "file": "projects/design-angular-kit/src/lib/tooltip/triggers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "any"
                    },
                    {
                        "name": "nativeElement",
                        "type": "any"
                    },
                    {
                        "name": "triggers"
                    },
                    {
                        "name": "openFn",
                        "type": ""
                    },
                    {
                        "name": "closeFn",
                        "type": ""
                    },
                    {
                        "name": "toggleFn",
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "nativeElement",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "triggers",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "openFn",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "closeFn",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toggleFn",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "parseTriggers",
                "file": "projects/design-angular-kit/src/lib/tooltip/triggers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "triggers"
                    },
                    {
                        "name": "aliases",
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "triggers",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "aliases",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "positionElements",
                "file": "projects/design-angular-kit/src/lib/tooltip/positioning.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "hostElement"
                    },
                    {
                        "name": "targetElement"
                    },
                    {
                        "name": "placement"
                    },
                    {
                        "name": "appendToBody",
                        "type": "boolean",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "hostElement",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "targetElement",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "placement",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appendToBody",
                        "type": "boolean",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "toItemIndexes",
                "file": "projects/design-angular-kit/src/lib/tooltip/positioning.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "a"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "a",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "Placement",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"auto\" | \"top\" | \"bottom\" | \"left\" | \"right\" | \"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\" | \"left-top\" | \"left-bottom\" | \"right-top\" | \"right-bottom\"",
                "file": "projects/design-angular-kit/src/lib/tooltip/positioning.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PlacementArray",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Placement | Array<Placement>",
                "file": "projects/design-angular-kit/src/lib/tooltip/positioning.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "UniqueSelectionDispatcherListener",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/design-angular-kit/src/lib/radio/unique-selection-dispatcher.ts",
                "description": "",
                "kind": 162
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/design-angular-kit/src/lib/models/ButtonSize.ts": [
                {
                    "name": "BUTTON_SIZES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/ButtonSize.ts",
                    "type": "object",
                    "defaultValue": "{\n  LG: LG,\n  SM: SM,\n  XS: XS,\n}"
                },
                {
                    "name": "ButtonSize",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/ButtonSize.ts",
                    "type": "",
                    "defaultValue": "t.keyof({\n  lg: null,\n  sm: null,\n  xs: null,\n})"
                },
                {
                    "name": "LG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/ButtonSize.ts",
                    "type": "string",
                    "defaultValue": "'lg'"
                },
                {
                    "name": "SM",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/ButtonSize.ts",
                    "type": "string",
                    "defaultValue": "'sm'"
                },
                {
                    "name": "XS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/ButtonSize.ts",
                    "type": "string",
                    "defaultValue": "'xs'"
                }
            ],
            "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts": [
                {
                    "name": "CLICK",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                    "type": "string",
                    "defaultValue": "'click'"
                },
                {
                    "name": "FOCUS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                    "type": "string",
                    "defaultValue": "'focus'"
                },
                {
                    "name": "HOVER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                    "type": "string",
                    "defaultValue": "'hover'"
                },
                {
                    "name": "INTERACTION_TRIGGERS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                    "type": "object",
                    "defaultValue": "{\n  CLICK: CLICK,\n  FOCUS: FOCUS,\n  HOVER: HOVER,\n}"
                },
                {
                    "name": "InteractionTrigger",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                    "type": "",
                    "defaultValue": "t.keyof({\n  click: null,\n  focus: null,\n  hover: null,\n})"
                }
            ],
            "projects/design-angular-kit/src/lib/models/ThemeColor.ts": [
                {
                    "name": "DANGER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                    "type": "string",
                    "defaultValue": "'danger'"
                },
                {
                    "name": "DARK",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                    "type": "string",
                    "defaultValue": "'dark'"
                },
                {
                    "name": "INFO",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                    "type": "string",
                    "defaultValue": "'info'"
                },
                {
                    "name": "LIGHT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                    "type": "string",
                    "defaultValue": "'light'"
                },
                {
                    "name": "PRIMARY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                    "type": "string",
                    "defaultValue": "'primary'"
                },
                {
                    "name": "SECONDARY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                    "type": "string",
                    "defaultValue": "'secondary'"
                },
                {
                    "name": "SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                    "type": "string",
                    "defaultValue": "'success'"
                },
                {
                    "name": "THEME_COLORS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                    "type": "object",
                    "defaultValue": "{\n  PRIMARY: PRIMARY,\n  SECONDARY: SECONDARY,\n  DANGER: DANGER,\n  WARNING: WARNING,\n  INFO: INFO,\n  SUCCESS: SUCCESS,\n  LIGHT: LIGHT,\n  DARK: DARK\n}"
                },
                {
                    "name": "ThemeColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                    "type": "",
                    "defaultValue": "t.keyof({\n  primary: null,\n  secondary: null,\n  danger: null,\n  warning: null,\n  info: null,\n  success: null,\n  light: null,\n  dark: null,\n})"
                },
                {
                    "name": "WARNING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                    "type": "string",
                    "defaultValue": "'warning'"
                }
            ],
            "projects/design-angular-kit/src/lib/tooltip/triggers.ts": [
                {
                    "name": "DEFAULT_ALIASES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/tooltip/triggers.ts",
                    "type": "object",
                    "defaultValue": "{\n    'hover': ['mouseenter', 'mouseleave'],\n    'focus': ['focus', 'blur']\n}"
                },
                {
                    "name": "noopFn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/tooltip/triggers.ts",
                    "type": "",
                    "defaultValue": "() => { }"
                }
            ],
            "projects/design-angular-kit/src/lib/tooltip/tooltip.directive.ts": [
                {
                    "name": "identifier",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/tooltip/tooltip.directive.ts",
                    "type": "number",
                    "defaultValue": "0"
                },
                {
                    "name": "TRIGGER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/tooltip/tooltip.directive.ts",
                    "type": "",
                    "defaultValue": "INTERACTION_TRIGGERS.HOVER"
                }
            ],
            "projects/design-angular-kit/src/lib/toggle/toggle.component.ts": [
                {
                    "name": "identifier",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/toggle/toggle.component.ts",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "projects/design-angular-kit/src/lib/button/button.component.ts": [
                {
                    "name": "identifier",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/button/button.component.ts",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "projects/design-angular-kit/src/lib/radio/radio.component.ts": [
                {
                    "name": "identifier",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "projects/design-angular-kit/src/lib/checkbox/checkbox.component.ts": [
                {
                    "name": "identifier",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/checkbox/checkbox.component.ts",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "projects/design-angular-kit/src/lib/tooltip/positioning.ts": [
                {
                    "name": "positionService",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/tooltip/positioning.ts",
                    "type": "",
                    "defaultValue": "new Positioning()"
                }
            ],
            "projects/design-angular-kit/src/lib/progress-bar/progress-bar.component.ts": [
                {
                    "name": "progressbarId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/progress-bar/progress-bar.component.ts",
                    "type": "number",
                    "defaultValue": "0"
                }
            ]
        },
        "groupedFunctions": {
            "projects/design-angular-kit/src/lib/radio/radio.component.ts": [
                {
                    "name": "_coerceBooleanProperty",
                    "file": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/design-angular-kit/src/lib/tooltip/triggers.ts": [
                {
                    "name": "listenToTriggers",
                    "file": "projects/design-angular-kit/src/lib/tooltip/triggers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "renderer",
                            "type": "any"
                        },
                        {
                            "name": "nativeElement",
                            "type": "any"
                        },
                        {
                            "name": "triggers"
                        },
                        {
                            "name": "openFn",
                            "type": ""
                        },
                        {
                            "name": "closeFn",
                            "type": ""
                        },
                        {
                            "name": "toggleFn",
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "renderer",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nativeElement",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "triggers",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "openFn",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "closeFn",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "toggleFn",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseTriggers",
                    "file": "projects/design-angular-kit/src/lib/tooltip/triggers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "triggers"
                        },
                        {
                            "name": "aliases",
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "triggers",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "aliases",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/design-angular-kit/src/lib/tooltip/positioning.ts": [
                {
                    "name": "positionElements",
                    "file": "projects/design-angular-kit/src/lib/tooltip/positioning.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "hostElement"
                        },
                        {
                            "name": "targetElement"
                        },
                        {
                            "name": "placement"
                        },
                        {
                            "name": "appendToBody",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "hostElement",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "targetElement",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "placement",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appendToBody",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toItemIndexes",
                    "file": "projects/design-angular-kit/src/lib/tooltip/positioning.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "a"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "a",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/design-angular-kit/src/lib/tooltip/positioning.ts": [
                {
                    "name": "Placement",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"auto\" | \"top\" | \"bottom\" | \"left\" | \"right\" | \"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\" | \"left-top\" | \"left-bottom\" | \"right-top\" | \"right-bottom\"",
                    "file": "projects/design-angular-kit/src/lib/tooltip/positioning.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "PlacementArray",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Placement | Array<Placement>",
                    "file": "projects/design-angular-kit/src/lib/tooltip/positioning.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/design-angular-kit/src/lib/radio/unique-selection-dispatcher.ts": [
                {
                    "name": "UniqueSelectionDispatcherListener",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/design-angular-kit/src/lib/radio/unique-selection-dispatcher.ts",
                    "description": "",
                    "kind": 162
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 8,
        "status": "low",
        "files": [
            {
                "filePath": "projects/design-angular-kit/src/lib/badge/badge.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BadgeDirective",
                "coveragePercent": 40,
                "coverageCount": "4/10",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 50,
                "coverageCount": "6/12",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/button/button.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "identifier",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 29,
                "coverageCount": "5/17",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/checkbox/checkbox.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CheckboxChange",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/checkbox/checkbox.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "identifier",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/ButtonSize.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BUTTON_SIZES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/ButtonSize.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ButtonSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/ButtonSize.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/ButtonSize.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SM",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/ButtonSize.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "XS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CLICK",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FOCUS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HOVER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INTERACTION_TRIGGERS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/InteractionTrigger.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InteractionTrigger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DANGER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DARK",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INFO",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LIGHT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PRIMARY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SECONDARY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "THEME_COLORS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ThemeColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/models/ThemeColor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WARNING",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressBarComponent",
                "coveragePercent": 30,
                "coverageCount": "7/23",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/progress-bar/progress-bar.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "progressbarId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadioButtonComponent",
                "coveragePercent": 63,
                "coverageCount": "12/19",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "RadioGroupDirective",
                "coveragePercent": 57,
                "coverageCount": "15/26",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RadioChange",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "_coerceBooleanProperty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "identifier",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/radio/unique-selection-dispatcher.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UniqueSelectionDispatcher",
                "coveragePercent": 60,
                "coverageCount": "3/5",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/toggle/toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToggleComponent",
                "coveragePercent": 29,
                "coverageCount": "5/17",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/toggle/toggle.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ToggleChange",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/toggle/toggle.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "identifier",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/tooltip/popup.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ContentRef",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/tooltip/popup.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PopupService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/tooltip/positioning.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Positioning",
                "coveragePercent": 18,
                "coverageCount": "2/11",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/tooltip/positioning.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "positionElements",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/tooltip/positioning.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "toItemIndexes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/tooltip/positioning.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "positionService",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/tooltip/tooltip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TooltipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/tooltip/tooltip.config.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TooltipConfig",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/tooltip/tooltip.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TooltipDirective",
                "coveragePercent": 44,
                "coverageCount": "17/38",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/tooltip/tooltip.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "identifier",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/tooltip/tooltip.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TRIGGER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/tooltip/triggers.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Trigger",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/tooltip/triggers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "listenToTriggers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/tooltip/triggers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "parseTriggers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/tooltip/triggers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_ALIASES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/tooltip/triggers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "noopFn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/util/util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Util",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}
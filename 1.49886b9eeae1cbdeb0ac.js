(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{HiJM:function(e,n,t){"use strict";t.d(n,"a",function(){return s});var i=0,o=0,a=0,r=0,l=0,s=function(){function e(){this.idTab="source-display-tab-"+i++,this.idTabContent="source-display-tab-content-"+o++,this.idTabHtml="tab-html-"+a++,this.idTypescript="tab-typescript-"+r++,this.idTabCss="tab-css-"+l++}return e.prototype.ngOnInit=function(){this.html&&(this.html=this.html.replace(/\/{\/{/g,"{{"),this.html=this.html.replace(/\/}\/}/g,"}}")),this.typescript&&(this.typescript=this.typescript.replace(/\/{\/{/g,"{{"),this.typescript=this.typescript.replace(/\/}\/}/g,"}}")),this.css&&(this.css=this.css.replace(/\/{\/{/g,"{{"),this.css=this.css.replace(/\/}\/}/g,"}}"))},e}()},OQP5:function(e,n,t){"use strict";t.d(n,"c",function(){return m}),t.d(n,"b",function(){return d}),t.d(n,"a",function(){return c}),t.d(n,"d",function(){return u}),t.d(n,"e",function(){return p});var i=t("CcnG"),o=t("26FU"),a=t("0/uQ"),r=t("VnD/"),l=t("t9fZ"),s=t("67Y/"),p=new i.o("OPTIONS"),d=function(){function e(e){this.options={theme:"github",path:"assets/lib/hljs",auto:!0},this._isReady$=new o.a(!1),this.options=Object.assign({},this.options,e),"undefined"!=typeof hljs?(hljs.configure(this.options.config),this._isReady$.next(!0)):(this._loadScript(),this._loadTheme())}return Object.defineProperty(e.prototype,"isReady",{get:function(){return this._isReady$.pipe(Object(r.a)(function(e){return e}),Object(l.a)(1))},enumerable:!0,configurable:!0}),e.prototype.highlight=function(e,n,t,i){if("undefined"!=typeof hljs)return hljs.highlight(e,n,t,i)},e.prototype.highlightAuto=function(e,n){if("undefined"!=typeof hljs)return hljs.highlightAuto(e,n)},e.prototype.fixMarkup=function(e){if("undefined"!=typeof hljs)return hljs.fixMarkup(e)},e.prototype.highlightBlock=function(e){"undefined"!=typeof hljs&&hljs.highlightBlock(e)},e.prototype.configure=function(e){"undefined"!=typeof hljs&&hljs.configure(this.options.config)},e.prototype.initHighlighting=function(){"undefined"!=typeof hljs&&hljs.initHighlighting()},e.prototype.initHighlightingOnLoad=function(){"undefined"!=typeof hljs&&hljs.initHighlightingOnLoad()},e.prototype.registerLanguage=function(e,n){"undefined"!=typeof hljs&&hljs.registerLanguage(e,n)},e.prototype.listLanguages=function(){if("undefined"!=typeof hljs)return hljs.listLanguages()},e.prototype.getLanguage=function(e){if("undefined"!=typeof hljs)return hljs.getLanguage(e)},e.prototype._loadScript=function(){var e=this,n=document.createElement("script");n.async=!0,n.type="text/javascript",n.onload=function(){hljs.configure(e.options.config),e._isReady$.next(!0)},n.src=this.options.path+"/highlight.pack.js",document.head.appendChild(n)},e.prototype._loadTheme=function(){var e=document.createElement("link");e.rel="stylesheet",e.type="text/css",e.href=this.options.path+"/styles/"+this.options.theme+".css",document.head.appendChild(e)},e}(),c=function(){function e(e,n,t){this.renderer=n,this.hljs=t,this.highlighted=new i.m,this.el=e.nativeElement}return Object.defineProperty(e.prototype,"setCode",{set:function(e){var n=this;this.code=e,this.hljs.isReady.subscribe(function(){return n.highlightElement(n.el,e)})},enumerable:!0,configurable:!0}),e.prototype.ngOnInit=function(){var e=this;!this.code&&this.hljs.options.auto&&this.hljs.isReady.subscribe(function(){e.highlightTextContent(),e.domObs=new MutationObserver(function(){return e.highlightTextContent()}),e.domObs.observe(e.el,{childList:!0,subtree:!0})})},e.prototype.highlightTextContent=function(){this.highlight?this.highlightChildren(this.el,"all"===this.highlight?"pre code":this.highlight):"code"===this.el.tagName.toLowerCase()?this.highlightElement(this.el,this.el.innerText.trim()):console.warn("[HighlightDirective]: Use 'highlight' on <code> element only")},e.prototype.highlightElement=function(e,n){var t=this.hljs.highlightAuto(n,this.language);t.value!==e.innerHTML&&(this.renderer.addClass(e,"hljs"),this.renderer.setProperty(e,"innerHTML",t.value),this.highlighted.emit(t))},e.prototype.highlightChildren=function(e,n){var t=this,i=e.querySelectorAll(n);Object(a.a)(i).pipe(Object(r.a)(function(e){return 1===e.childNodes.length&&"#text"===e.childNodes[0].nodeName}),Object(s.a)(function(e){return t.highlightElement(e,e.innerText.trim())}),Object(l.a)(1)).subscribe()},e.prototype.ngOnDestroy=function(){!this.code&&this.hljs.options.auto&&this.domObs.disconnect()},e}();function u(e){return new d(e)}var m=function(){function e(){}return e.forRoot=function(n){return{ngModule:e,providers:[{provide:p,useValue:n},{provide:d,useFactory:u,deps:[p]}]}},e}()},PCNd:function(e,n,t){"use strict";t.d(n,"a",function(){return i});var i=function(){}},dxD6:function(e){e.exports={b:[{name:"BadgeDirective",id:"directive-BadgeDirective-c3214969219962e0b0e00e1851100d38",file:"projects/design-angular-kit/src/lib/badge/badge.directive.ts",type:"directive",description:"<p>Una badge con design bootstrap italia.</p>\n",sourceCode:"import { Directive, ElementRef, Input, HostBinding } from '@angular/core';\nimport { ThemeColor, THEME_COLORS } from '../models/ThemeColor';\nimport { Util } from '../util/util';\n\n/**\n * Una badge con design bootstrap italia.\n */\n@Directive({\n  selector: '[it-badge]', // tslint:disable-line\n  exportAs: 'itBadge'\n})\nexport class BadgeDirective {\n\n  /**\n   * (Opzionale) indica il colore del badge. Pu\xf2 essere `primary`, `secondary`, `danger`, `warning`, `info`, `success`, `light` o `dark`.\n   * Se non viene fornito o il valore \xe8 diverso da quelli previsti il suo valore di default \xe8 `light`.\n   */\n  @Input()\n  get badgeColor(): any {\n    return this._badgeColor;\n  }\n  set badgeColor(value: any) {\n    if (ThemeColor.is(value)) {\n      this._badgeColor = value;\n    } else {\n      this._badgeColor = THEME_COLORS.LIGHT;\n    }\n  }\n  private _badgeColor = THEME_COLORS.LIGHT;\n\n  /**\n   * La direttiva che abilita l'elemento come badge. Mostra il testo come contenuto del badge.\n   * Se valutato ad `undefined`, `null` o stringa vuota il badge non viene mostrato.\n   */\n  @Input('it-badge')\n  @HostBinding('innerText')\n  get badgeText(): string { return this._badgeText; }\n  set badgeText(value: string) {\n    if (value) {\n      this._badgeText = value;\n    } else {\n      this._badgeText = '';\n    }\n  }\n  private _badgeText = '';\n\n  private _isPill = false;\n  /**\n   * Indica se il badge \xe8 arrotondato o meno.\n   */\n  @Input()\n  get isPill(): boolean { return this._isPill; }\n  set isPill(value: boolean) {\n    this._isPill = Util.coerceBooleanProperty(value);\n  }\n\n  private getBadgeColorClassName(): string {\n    return `badge-${this._badgeColor}`;\n  }\n\n  @HostBinding('class')\n  get hostClasses(): string {\n    return [\n      'badge',\n      this.getBadgeColorClassName(),\n      this.isPill ? 'badge-pill' : '',\n    ].join(' ');\n  }\n\n  constructor(private el: ElementRef) { }\n\n}\n",selector:"[it-badge]",providers:[],inputsClass:[{name:"badgeColor",description:"<p>(Opzionale) indica il colore del badge. Pu\xf2 essere <code>primary</code>, <code>secondary</code>, <code>danger</code>, <code>warning</code>, <code>info</code>, <code>success</code>, <code>light</code> o <code>dark</code>.\nSe non viene fornito o il valore \xe8 diverso da quelli previsti il suo valore di default \xe8 <code>light</code>.</p>\n",line:19,type:"any"},{name:"isPill",description:"<p>Indica se il badge \xe8 arrotondato o meno.</p>\n",line:52,type:"boolean"},{name:"it-badge",description:"<p>La direttiva che abilita l&#39;elemento come badge. Mostra il testo come contenuto del badge.\nSe valutato ad <code>undefined</code>, <code>null</code> o stringa vuota il badge non viene mostrato.</p>\n",line:37,type:"string"}],outputsClass:[],hostBindings:[{name:"class",line:62,type:"string"}],hostListeners:[],propertiesClass:[{name:"_badgeColor",defaultValue:"THEME_COLORS.LIGHT",type:"",optional:!1,description:"",line:29,modifierKind:[112]},{name:"_badgeText",defaultValue:"''",type:"string",optional:!1,description:"",line:45,modifierKind:[112]},{name:"_isPill",defaultValue:"false",type:"",optional:!1,description:"",line:47,modifierKind:[112]}],methodsClass:[{name:"getBadgeColorClassName",args:[],optional:!1,returnType:"string",typeParameters:[],line:57,modifierKind:[112]}],constructorObj:{name:"constructor",description:"",args:[{name:"el",type:"ElementRef"}],line:68,jsdoctags:[{name:"el",type:"ElementRef",tagName:{text:"param"}}]},accessors:{badgeColor:{name:"badgeColor",setSignature:{name:"badgeColor",type:"void",args:[{name:"value",type:"any"}],returnType:"void",line:22,jsdoctags:[{name:"value",type:"any",tagName:{text:"param"}}]}},badgeText:{name:"badgeText",setSignature:{name:"badgeText",type:"void",args:[{name:"value",type:"string"}],returnType:"void",line:38,jsdoctags:[{name:"value",type:"string",tagName:{text:"param"}}]}},isPill:{name:"isPill",setSignature:{name:"isPill",type:"void",args:[{name:"value",type:"boolean"}],returnType:"void",line:53,jsdoctags:[{name:"value",type:"boolean",tagName:{text:"param"}}]}}}},{name:"PopoverDirective",id:"directive-PopoverDirective-118736281c288dddd50447b52b2c6e72",file:"projects/design-angular-kit/src/lib/popover/popover.directive.ts",type:"directive",description:"<p>Una direttiva per la creazione di un popover.</p>\n",sourceCode:"import {\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n  OnDestroy,\n  OnChanges,\n  Injector,\n  Renderer2,\n  ComponentRef,\n  ElementRef,\n  TemplateRef,\n  ViewContainerRef,\n  ComponentFactoryResolver,\n  NgZone,\n  SimpleChanges,\n} from '@angular/core';\n\nimport { listenToTriggers } from './triggers';\nimport { positionElements, Placement, PlacementArray } from './positioning';\nimport { PopupService } from './popup';\nimport { PopoverConfig } from './popover.config';\nimport { PopoverComponent } from './popover.component';\nimport { Subscription } from 'rxjs';\nimport { POPOVER_TRIGGERS, PopoverTrigger } from '../models/InteractionTrigger';\nimport { Util } from '../util/util';\n\nlet identifier = 0;\n\n/**\n * Una direttiva per la creazione di un popover.\n */\n@Directive({\n  selector: '[it-popover]', // tslint:disable-line\n  exportAs: 'it-popover'\n})\nexport class PopoverDirective implements OnInit, OnDestroy, OnChanges {\n  /**\n   * Contenuto da mostrare nel popover. In assenza di titolo e contenuto, il popover non si aprir\xe0.\n   */\n  @Input('it-popover')\n  get itPopover(): string | TemplateRef<any> { return this._itPopover; }\n  set itPopover(value: string | TemplateRef<any>) { this._itPopover = value; }\n  private _itPopover: string | TemplateRef<any>;\n\n  /**\n   * Titolo del popover. In assenza di titolo e contenuto, il popover non si aprir\xe0.\n   */\n  @Input()\n  get title(): string { return this._title; }\n  set title(value: string) { this._title = value; }\n  private _title: string;\n\n  /**\n   * Il collocamento accettato dal popover:\n   *    \"top\", \"top-left\", \"top-right\", \"bottom\", \"bottom-left\", \"bottom-right\",\n   *    \"left\", \"left-top\", \"left-bottom\", \"right\", \"right-top\", \"right-bottom\"\n   * ed array dei valori soprariportati.\n   */\n  @Input()\n  get placement(): PlacementArray { return this._placement; }\n  set placement(value: PlacementArray) { this._placement = value; }\n  private _placement: PlacementArray;\n\n  /**\n   * Specifica gli eventi che dovrebbero innescare il popover. Supporta una lista con nomi di eventi separati da spazi.\n   */\n  @Input()\n  get triggers(): any {\n    return this._triggers;\n  }\n  set triggers(value: any) {\n    if (PopoverTrigger.is(value)) {\n      this._triggers = value;\n    } else {\n      this._triggers = POPOVER_TRIGGERS.CLICK;\n    }\n  }\n  private _triggers;\n\n  /**\n   * Un selettore che specifica l'elemento in cui il popover dovrebbe essere aggiunto.\n   * Attualmente supporta solo \"body\".\n   */\n  @Input()\n  get container(): string { return this._container; }\n  set container(value: string) { this._container = value; }\n  private _container: string;\n\n  /**\n   * Evento da emettere quando il popover sta per essere mostrato\n   */\n  @Output('show')\n  get showEvent(): EventEmitter<PopoverDirective> { return this._showEvent; }\n  set showEvent(value: EventEmitter<PopoverDirective>) { this._showEvent = value; }\n  private _showEvent = new EventEmitter<PopoverDirective>();\n\n  /**\n   * Evento da emettere quando il popover \xe8 mostrato\n   */\n  @Output('shown')\n  get shownEvent(): EventEmitter<PopoverDirective> { return this._shownEvent; }\n  set shownEvent(value: EventEmitter<PopoverDirective>) { this._shownEvent = value; }\n  private _shownEvent = new EventEmitter<PopoverDirective>();\n\n  /**\n   * Evento da emettere quando il popover viene inserito nel DOM\n   */\n  @Output('inserted')\n  get insertedEvent(): EventEmitter<PopoverDirective> { return this._insertedEvent; }\n  set insertedEvent(value: EventEmitter<PopoverDirective>) { this._insertedEvent = value; }\n  private _insertedEvent = new EventEmitter<PopoverDirective>();\n\n  /**\n   * Evento da emettere quando il popover sta per essere nascosto\n   */\n  @Output('hide')\n  get hideEvent(): EventEmitter<PopoverDirective> { return this._hideEvent; }\n  set hideEvent(value: EventEmitter<PopoverDirective>) { this._hideEvent = value; }\n  private _hideEvent = new EventEmitter<PopoverDirective>();\n\n  /**\n   * Evento da emettere quando il popover \xe8 nascosto\n   */\n  @Output('hidden')\n  get hiddenEvent(): EventEmitter<PopoverDirective> { return this._hiddenEvent; }\n  set hiddenEvent(value: EventEmitter<PopoverDirective>) { this._hiddenEvent = value; }\n  private _hiddenEvent = new EventEmitter<PopoverDirective>();\n\n  /**\n   * Un flag utilizzato per indicare se un popover \xe8 disabilitato, cos\xec da non doverlo mostrare.\n   */\n  @Input('disabled')\n  get disablePopover(): boolean { return this._disablePopover; }\n  set disablePopover(value: boolean) { this._disablePopover = Util.coerceBooleanProperty(value); }\n  private _disablePopover = false;\n\n  private _itPopoverWindowId = `it-popover-${identifier++}`;\n  private _popupService: PopupService<PopoverComponent>;\n  private _windowRef: ComponentRef<PopoverComponent>;\n  private _unregisterListenersFn;\n  private _zoneSubscription: Subscription;\n  private _isDisabled(): boolean {\n    if (this.disablePopover) {\n      return true;\n    }\n    if (!this.itPopover && !this.title) {\n      return true;\n    }\n    return false;\n  }\n\n  constructor(\n      private _elementRef: ElementRef<HTMLElement>,\n      private _renderer: Renderer2,\n      injector: Injector,\n      componentFactoryResolver: ComponentFactoryResolver,\n      viewContainerRef: ViewContainerRef,\n      config: PopoverConfig,\n      ngZone: NgZone\n  ) {\n    this.placement = config.placement;\n    this.triggers = config.triggers;\n    this.container = config.container;\n    this.disablePopover = config.disablePopover;\n    this._popupService = new PopupService<PopoverComponent>(\n      PopoverComponent, injector, viewContainerRef, _renderer, componentFactoryResolver);\n\n    this._zoneSubscription = ngZone.onStable.subscribe(() => {\n      if (this._windowRef) {\n        this._windowRef.instance.applyPlacement(\n          positionElements(\n            this._elementRef.nativeElement, this._windowRef.location.nativeElement,\n            this.placement, this.container === 'body'\n          )\n        );\n      }\n    });\n  }\n\n  /**\n   * Apre il popover di un elemento. \xc8 considerato un azionamento \"manuale\" del popover.\n   * Il context \xe8 un valore opzionale da iniettare nel template del popover quando esso viene creato.\n   */\n  show(context?: any) {\n    if (!this._isDisabled()) {\n      // Scatena l'evento per segnalare l'inizio del processo per visualizzare il popover\n      this.showEvent.emit(this);\n\n      if (!this._windowRef) {\n        this._windowRef = this._popupService.open(this.itPopover, context);\n\n        const popoverComponent = this._windowRef.instance;\n        popoverComponent.title = this.title;\n        popoverComponent.id = this._itPopoverWindowId;\n\n        this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', this._itPopoverWindowId);\n\n        if (this.container === 'body') {\n          window.document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);\n        }\n\n        this._windowRef.changeDetectorRef.detectChanges();\n        this._windowRef.changeDetectorRef.markForCheck();\n\n        // Posiziona il popover attorno all'elemento\n        popoverComponent.applyPlacement(\n          positionElements(\n            this._elementRef.nativeElement, this._windowRef.location.nativeElement,\n            this.placement, this.container === 'body'\n          )\n        );\n\n        // Scatena l'evento per segnalare l'inserimento nel DOM\n        this.insertedEvent.emit(this);\n      } else {\n        const popoverComponent = this._windowRef.instance;\n        popoverComponent.hidden = false;\n      }\n\n      // Scatena l'evento per segnalare che il popover \xe8 stato visualizzato\n      this.shownEvent.emit(this);\n    }\n  }\n\n  /**\n   * Chiude il popover di un elemento. \xc8 considerato un azionamento \"manuale\" del popover.\n   */\n  hide() {\n    // Scatena l'evento per segnalare l'inizio del processo per nascondere il popover\n    this.hideEvent.emit(this);\n    if (this._windowRef) {\n      const popoverComponent = this._windowRef.instance;\n      popoverComponent.hidden = true;\n\n      // Scatena l'evento per segnalare che il popover \xe8 stato nascosto\n      this.hiddenEvent.emit(this);\n    }\n  }\n\n  /**\n   * Apre/chiude il un popover di un elemento. \xc8 considerato un azionamento \"manuale\" del popover.\n   */\n  toggle() {\n    if (this._windowRef) {\n      if (this._windowRef.instance.hidden) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    } else {\n      this.show();\n    }\n  }\n\n  /**\n   * Nasconde e distrugge il popover di un elemento.\n   */\n  dispose() {\n    const isShown = this._windowRef ? !this._windowRef.instance.hidden : false;\n    if (isShown) {\n      this.hide();\n    }\n\n    if (this._windowRef) {\n      this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');\n      this._popupService.close();\n      this._windowRef = null;\n    }\n  }\n\n  /**\n   * Fornisce al popover di un elemento la possibilit\xe0 di essere mostrato.\n   */\n  enable() {\n    if (this._isDisabled()) {\n      this.disablePopover = false;\n    }\n  }\n\n  /**\n   * Rimuove la capacit\xe0 di mostrare il popover di un elemento.\n   */\n  disable() {\n    if (!this._isDisabled()) {\n      this.disablePopover = true;\n    }\n  }\n\n  /**\n   * Attiva/disattiva la possibilit\xe0 che il popover di un elemento sia mostrato o nascosto.\n   */\n  toggleEnabled() {\n    if (this._isDisabled()) {\n      this.enable();\n    } else {\n      this.disable();\n    }\n  }\n\n  ngOnInit() {\n    this._unregisterListenersFn = listenToTriggers(\n      this._renderer, this._elementRef.nativeElement, this.triggers,\n      this.show.bind(this), this.hide.bind(this), this.toggle.bind(this)\n    );\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Chiude il popover se titolo e contenuti risultano vuoti, o se disablePopover \xe8 impostato a vero\n    if (changes['itPopover'] || changes['title'] || changes['disablePopover']) {\n      if (this._windowRef) {\n        const isShown = !this._windowRef.instance.hidden;\n        if (changes['itPopover']) {\n          this._windowRef.instance.setNewContent(this.itPopover);\n          this._windowRef.changeDetectorRef.detectChanges();\n          this._windowRef.changeDetectorRef.markForCheck();\n        }\n        if (changes['title']) {\n          this._windowRef.instance.title = this.title;\n        }\n\n\n        if (isShown) {\n          if (!this._isDisabled()) {\n            this.show();\n          } else {\n            this.hide();\n          }\n        }\n      }\n    } else if (changes['placement']) {\n      if (this._windowRef) {\n        this._windowRef.instance.applyPlacement(\n          positionElements(\n            this._elementRef.nativeElement, this._windowRef.location.nativeElement,\n            this.placement, this.container === 'body'\n          )\n        );\n      }\n    } else if (changes['container']) {\n      const isShown = this._windowRef ? !this._windowRef.instance.hidden : false;\n      this.dispose();\n      if (isShown) {\n        this.show();\n      }\n    } else if (changes['triggers']) {\n      this.dispose();\n\n      const triggersChangers = changes['triggers'];\n      if (triggersChangers.previousValue !== triggersChangers.currentValue && !triggersChangers.firstChange) {\n        this._unregisterListenersFn();\n        this._unregisterListenersFn = listenToTriggers(\n          this._renderer, this._elementRef.nativeElement, this.triggers,\n          this.show.bind(this), this.hide.bind(this), this.toggle.bind(this)\n        );\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this.dispose();\n    this._unregisterListenersFn();\n    this._zoneSubscription.unsubscribe();\n  }\n\n}\n",selector:"[it-popover]",providers:[],inputsClass:[{name:"container",description:"<p>Un selettore che specifica l&#39;elemento in cui il popover dovrebbe essere aggiunto.\nAttualmente supporta solo &quot;body&quot;.</p>\n",line:94,type:"string"},{name:"disabled",description:"<p>Un flag utilizzato per indicare se un popover \xe8 disabilitato, cos\xec da non doverlo mostrare.</p>\n",line:142,type:"boolean"},{name:"it-popover",description:"<p>Contenuto da mostrare nel popover. In assenza di titolo e contenuto, il popover non si aprir\xe0.</p>\n",line:50,type:"string | TemplateRef<any>"},{name:"placement",description:"<p>Il collocamento accettato dal popover:\n    &quot;top&quot;, &quot;top-left&quot;, &quot;top-right&quot;, &quot;bottom&quot;, &quot;bottom-left&quot;, &quot;bottom-right&quot;,\n    &quot;left&quot;, &quot;left-top&quot;, &quot;left-bottom&quot;, &quot;right&quot;, &quot;right-top&quot;, &quot;right-bottom&quot;\ned array dei valori soprariportati.</p>\n",line:69,type:"PlacementArray"},{name:"title",description:"<p>Titolo del popover. In assenza di titolo e contenuto, il popover non si aprir\xe0.</p>\n",line:58,type:"string"},{name:"triggers",description:"<p>Specifica gli eventi che dovrebbero innescare il popover. Supporta una lista con nomi di eventi separati da spazi.</p>\n",line:77,type:"any"}],outputsClass:[{name:"hidden",description:"<p>Evento da emettere quando il popover \xe8 nascosto</p>\n",line:134,type:"EventEmitter<PopoverDirective>"},{name:"hide",description:"<p>Evento da emettere quando il popover sta per essere nascosto</p>\n",line:126,type:"EventEmitter<PopoverDirective>"},{name:"inserted",description:"<p>Evento da emettere quando il popover viene inserito nel DOM</p>\n",line:118,type:"EventEmitter<PopoverDirective>"},{name:"show",description:"<p>Evento da emettere quando il popover sta per essere mostrato</p>\n",line:102,type:"EventEmitter<PopoverDirective>"},{name:"shown",description:"<p>Evento da emettere quando il popover \xe8 mostrato</p>\n",line:110,type:"EventEmitter<PopoverDirective>"}],hostBindings:[],hostListeners:[],propertiesClass:[{name:"_container",type:"string",optional:!1,description:"",line:96,modifierKind:[112]},{name:"_disablePopover",defaultValue:"false",type:"",optional:!1,description:"",line:144,modifierKind:[112]},{name:"_hiddenEvent",defaultValue:"new EventEmitter<PopoverDirective>()",type:"",optional:!1,description:"",line:136,modifierKind:[112]},{name:"_hideEvent",defaultValue:"new EventEmitter<PopoverDirective>()",type:"",optional:!1,description:"",line:128,modifierKind:[112]},{name:"_insertedEvent",defaultValue:"new EventEmitter<PopoverDirective>()",type:"",optional:!1,description:"",line:120,modifierKind:[112]},{name:"_itPopover",type:"string | TemplateRef<any>",optional:!1,description:"",line:52,modifierKind:[112]},{name:"_itPopoverWindowId",defaultValue:"`it-popover-${identifier++}`",type:"",optional:!1,description:"",line:146,modifierKind:[112]},{name:"_placement",type:"PlacementArray",optional:!1,description:"",line:71,modifierKind:[112]},{name:"_popupService",type:"PopupService<PopoverComponent>",optional:!1,description:"",line:147,modifierKind:[112]},{name:"_showEvent",defaultValue:"new EventEmitter<PopoverDirective>()",type:"",optional:!1,description:"",line:104,modifierKind:[112]},{name:"_shownEvent",defaultValue:"new EventEmitter<PopoverDirective>()",type:"",optional:!1,description:"",line:112,modifierKind:[112]},{name:"_title",type:"string",optional:!1,description:"",line:60,modifierKind:[112]},{name:"_triggers",type:"",optional:!1,description:"",line:87,modifierKind:[112]},{name:"_unregisterListenersFn",type:"",optional:!1,description:"",line:149,modifierKind:[112]},{name:"_windowRef",type:"ComponentRef<PopoverComponent>",optional:!1,description:"",line:148,modifierKind:[112]},{name:"_zoneSubscription",type:"Subscription",optional:!1,description:"",line:150,modifierKind:[112]}],methodsClass:[{name:"_isDisabled",args:[],optional:!1,returnType:"boolean",typeParameters:[],line:151,modifierKind:[112]},{name:"disable",args:[],optional:!1,returnType:"void",typeParameters:[],line:292,description:"<p>Rimuove la capacit\xe0 di mostrare il popover di un elemento.</p>\n"},{name:"dispose",args:[],optional:!1,returnType:"void",typeParameters:[],line:267,description:"<p>Nasconde e distrugge il popover di un elemento.</p>\n"},{name:"enable",args:[],optional:!1,returnType:"void",typeParameters:[],line:283,description:"<p>Fornisce al popover di un elemento la possibilit\xe0 di essere mostrato.</p>\n"},{name:"hide",args:[],optional:!1,returnType:"void",typeParameters:[],line:237,description:"<p>Chiude il popover di un elemento. \xc8 considerato un azionamento &quot;manuale&quot; del popover.</p>\n"},{name:"ngOnChanges",args:[{name:"changes",type:"SimpleChanges"}],optional:!1,returnType:"void",typeParameters:[],line:316,jsdoctags:[{name:"changes",type:"SimpleChanges",tagName:{text:"param"}}]},{name:"ngOnDestroy",args:[],optional:!1,returnType:"void",typeParameters:[],line:368},{name:"ngOnInit",args:[],optional:!1,returnType:"void",typeParameters:[],line:309},{name:"show",args:[{name:"context",type:"any",optional:!0}],optional:!1,returnType:"void",typeParameters:[],line:193,description:"<p>Apre il popover di un elemento. \xc8 considerato un azionamento &quot;manuale&quot; del popover.\nIl context \xe8 un valore opzionale da iniettare nel template del popover quando esso viene creato.</p>\n",jsdoctags:[{name:"context",type:"any",optional:!0,tagName:{text:"param"}}]},{name:"toggle",args:[],optional:!1,returnType:"void",typeParameters:[],line:252,description:"<p>Apre/chiude il un popover di un elemento. \xc8 considerato un azionamento &quot;manuale&quot; del popover.</p>\n"},{name:"toggleEnabled",args:[],optional:!1,returnType:"void",typeParameters:[],line:301,description:"<p>Attiva/disattiva la possibilit\xe0 che il popover di un elemento sia mostrato o nascosto.</p>\n"}],implements:["OnInit","OnDestroy","OnChanges"],constructorObj:{name:"constructor",description:"",args:[{name:"_elementRef",type:"ElementRef<HTMLElement>"},{name:"_renderer",type:"Renderer2"},{name:"injector",type:"Injector"},{name:"componentFactoryResolver",type:"ComponentFactoryResolver"},{name:"viewContainerRef",type:"ViewContainerRef"},{name:"config",type:"PopoverConfig"},{name:"ngZone",type:"NgZone"}],line:159,jsdoctags:[{name:"_elementRef",type:"ElementRef<HTMLElement>",tagName:{text:"param"}},{name:"_renderer",type:"Renderer2",tagName:{text:"param"}},{name:"injector",type:"Injector",tagName:{text:"param"}},{name:"componentFactoryResolver",type:"ComponentFactoryResolver",tagName:{text:"param"}},{name:"viewContainerRef",type:"ViewContainerRef",tagName:{text:"param"}},{name:"config",type:"PopoverConfig",tagName:{text:"param"}},{name:"ngZone",type:"NgZone",tagName:{text:"param"}}]},accessors:{itPopover:{name:"itPopover",setSignature:{name:"itPopover",type:"void",args:[{name:"value",type:""}],returnType:"void",line:51,jsdoctags:[{name:"value",type:"",tagName:{text:"param"}}]}},title:{name:"title",setSignature:{name:"title",type:"void",args:[{name:"value",type:"string"}],returnType:"void",line:59,jsdoctags:[{name:"value",type:"string",tagName:{text:"param"}}]}},placement:{name:"placement",setSignature:{name:"placement",type:"void",args:[{name:"value",type:""}],returnType:"void",line:70,jsdoctags:[{name:"value",type:"",tagName:{text:"param"}}]}},triggers:{name:"triggers",setSignature:{name:"triggers",type:"void",args:[{name:"value",type:"any"}],returnType:"void",line:80,jsdoctags:[{name:"value",type:"any",tagName:{text:"param"}}]}},container:{name:"container",setSignature:{name:"container",type:"void",args:[{name:"value",type:"string"}],returnType:"void",line:95,jsdoctags:[{name:"value",type:"string",tagName:{text:"param"}}]}},showEvent:{name:"showEvent",setSignature:{name:"showEvent",type:"void",args:[{name:"value",type:""}],returnType:"void",line:103,jsdoctags:[{name:"value",type:"",tagName:{text:"param"}}]}},shownEvent:{name:"shownEvent",setSignature:{name:"shownEvent",type:"void",args:[{name:"value",type:""}],returnType:"void",line:111,jsdoctags:[{name:"value",type:"",tagName:{text:"param"}}]}},insertedEvent:{name:"insertedEvent",setSignature:{name:"insertedEvent",type:"void",args:[{name:"value",type:""}],returnType:"void",line:119,jsdoctags:[{name:"value",type:"",tagName:{text:"param"}}]}},hideEvent:{name:"hideEvent",setSignature:{name:"hideEvent",type:"void",args:[{name:"value",type:""}],returnType:"void",line:127,jsdoctags:[{name:"value",type:"",tagName:{text:"param"}}]}},hiddenEvent:{name:"hiddenEvent",setSignature:{name:"hiddenEvent",type:"void",args:[{name:"value",type:""}],returnType:"void",line:135,jsdoctags:[{name:"value",type:"",tagName:{text:"param"}}]}},disablePopover:{name:"disablePopover",setSignature:{name:"disablePopover",type:"void",args:[{name:"value",type:"boolean"}],returnType:"void",line:143,jsdoctags:[{name:"value",type:"boolean",tagName:{text:"param"}}]}}}},{name:"RadioGroupDirective",id:"directive-RadioGroupDirective-f64fd0c7b01c8d4779c6a1f6316e64e0",file:"projects/design-angular-kit/src/lib/radio/radio.component.ts",type:"directive",description:"",sourceCode:"import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  forwardRef,\n  ChangeDetectionStrategy,\n  AfterContentInit,\n  Directive,\n  ContentChildren,\n  QueryList,\n  OnInit,\n  OnDestroy,\n  Optional,\n  HostBinding\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { UniqueSelectionDispatcher } from './unique-selection-dispatcher';\n\nlet identifier = 0;\n\nfunction _coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n\nexport class RadioChange {\n  constructor(\n    public source: RadioButtonComponent,\n    public value: any\n  ) { }\n}\n\n@Directive({\n  selector: 'it-radio-group', // tslint:disable-line\n  exportAs: 'itRadioGroup',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioGroupDirective),\n    multi: true\n  }]\n})\nexport class RadioGroupDirective implements AfterContentInit, ControlValueAccessor {\n\n  @HostBinding('attr.role') role = 'radiogroup';\n\n  /**\n   * Il valore selezionato per il gruppo. Dovrebbe essere uguale al valore del radio button selezionato se\n   * *esiste* un radio button con un valore corrispondente. Se *non esiste* un radio button corrispondente\n   * questo valore persiste ed \xe8 applicato nel caso in cui un nuovo radio button viene aggiunto con il valore\n   * corrispondente.\n   */\n  private _value: any = null;\n\n  /** L'attributo HTML name da applicare ai radio button in questo gruppo */\n  private _name = `it-radio-group-${identifier++}`;\n\n  /** Il radio button attualmente selezionato. */\n  private _selected: RadioButtonComponent | null = null;\n\n  /** se `value` \xe8 stato settato al suo valore iniziale. */\n  private _isInitialized = false;\n\n  /** Se il radio group \xe8 disabilitato. */\n  private _disabled = false;\n\n\n\n  /**\n   * Evento emesso quando il valore del gruppo cambia.\n   * Gli eventi di change sono emessi soltanto quando il valore cambia a causa dell'interazione dell'utente\n   * con il radio button (stesso comportamento di `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<RadioChange> = new EventEmitter<RadioChange>();\n\n  /** radio buttons figli. */\n  @ContentChildren(forwardRef(() => RadioButtonComponent), { descendants: true }) _radios: QueryList<RadioButtonComponent>; // tslint:disable-line\n\n  /** Il metodo da chiamare per aggiornare ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => { };\n\n  onTouched: () => any = () => { };\n\n  /** Nome del gruppo di radio button. Tutti i radio button all'interno del gruppo avranno questo nome. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Valore del radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Il radio button selezionato. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: RadioButtonComponent | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Se il gruppo \xe8 disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = _coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef\n  ) { }\n\n  /**\n   * Inizializza le propriet\xe0 quando il contenuto dei figli\xe8 disponibile.\n   * Questo permette di propagare gli attributi rilevanti ai radio buttons associati.\n   */\n  ngAfterContentInit(): void {\n    this._isInitialized = true;\n  }\n\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Aggiorna il radio button `selected` a seconda del suo _value. */\n  private _updateSelectedRadioFromValue(): void {\n    this._selected = null;\n    this._radios.forEach(radio => {\n      radio.checked = this.value === radio.value;\n      if (radio.checked) {\n        this._selected = radio;\n      }\n    });\n  }\n\n  /** Invia l'evento change con la selezione corrente e il valore del gruppo. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new RadioChange(this._selected, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  writeValue(value: any): void {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  registerOnChange(fn: (value: any) => void): void {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n}\n\n/**\n * Un radio button con design bootstrap italia. Supporta tutte le funzionalit\xe0 di una radio HTML5,\n * ed espone una API simile. Una `<it-radio-button>` pu\xf2 essere checked, unchecked, o disabled.\n */\n@Component({\n  selector: 'it-radio-button',\n  templateUrl: './radio.component.html',\n  styleUrls: ['./radio.component.scss'],\n  exportAs: 'itRadioButton',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RadioButtonComponent implements OnInit, OnDestroy {\n\n  id = `radio-${identifier++}`;\n\n  /** Attributo 'name' usato per raggruppare i radio button per un'unica selezione. */\n  @Input() name: string;\n\n  /** L'etichetta delradio button. */\n  @Input()\n  label: string;\n\n  /** se il radio button \xe8 checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = _coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Il valore di questo radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Se il radio button \xe8 disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = !!value;\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /**\n   * Evento emesso quando il valore `checked` del radio button cambia.\n   */\n  @Output() readonly change: EventEmitter<RadioChange> = new EventEmitter<RadioChange>();\n\n  /** Il radio group padre. Pu\xf2 essere presente o meno. */\n  radioGroup: RadioGroupDirective;\n\n  /** Se il radio button \xe8 checked. */\n  private _checked = false;\n\n  /** Se il radio button \xe8 disabled. */\n  private _disabled: boolean;\n\n  /** il valore assegnato al radio button. */\n  private _value: any = null;\n\n  private _removeUniqueSelectionListener: () => void = () => { };\n\n  constructor(\n    @Optional() radioGroup: RadioGroupDirective,\n    private _changeDetector: ChangeDetectorRef,\n    private _radioDispatcher: UniqueSelectionDispatcher\n  ) {\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /**\n   * Segna il radio button come da controllare per la change detection.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit(): void {\n    if (this.radioGroup) {\n      // Se il radio button \xe8 all'interno di un gruppo, determina se deve essere selezionato\n      this.checked = this.radioGroup.value === this._value;\n      // Copia il `name` del radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngOnDestroy() {\n    this._removeUniqueSelectionListener();\n  }\n\n  private _emitChangeEvent(): void {\n    this.change.emit(new RadioChange(this, this._value));\n  }\n\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n}\n",selector:"it-radio-group",providers:[{name:"{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => RadioGroupDirective), multi: true\n}",type:"directive"}],inputsClass:[{name:"disabled",description:"<p>Se il gruppo \xe8 disabled </p>\n",line:121,type:"boolean"},{name:"name",description:"<p>Nome del gruppo di radio button. Tutti i radio button all&#39;interno del gruppo avranno questo nome. </p>\n",line:86,type:"string"},{name:"selected",description:"<p>Il radio button selezionato. </p>\n",line:112},{name:"value",description:"<p>Valore del radio button. </p>\n",line:94,type:"any"}],outputsClass:[{name:"change",defaultValue:"new EventEmitter<RadioChange>()",description:"<p>Evento emesso quando il valore del gruppo cambia.\nGli eventi di change sono emessi soltanto quando il valore cambia a causa dell&#39;interazione dell&#39;utente\ncon il radio button (stesso comportamento di <code>&lt;input type-&quot;radio&quot;&gt;</code>).</p>\n",line:74,type:"EventEmitter<RadioChange>"}],hostBindings:[{name:"attr.role",defaultValue:"'radiogroup'",line:45}],hostListeners:[],propertiesClass:[{name:"_controlValueAccessorChangeFn",defaultValue:"() => { }",type:"function",optional:!1,description:"<p>Il metodo da chiamare per aggiornare ngModel </p>\n",line:80},{name:"_disabled",defaultValue:"false",type:"",optional:!1,description:"<p>Se il radio group \xe8 disabilitato. </p>\n",line:65,modifierKind:[112]},{name:"_isInitialized",defaultValue:"false",type:"",optional:!1,description:"<p>se <code>value</code> \xe8 stato settato al suo valore iniziale. </p>\n",line:62,modifierKind:[112]},{name:"_name",defaultValue:"`it-radio-group-${identifier++}`",type:"",optional:!1,description:"<p>L&#39;attributo HTML name da applicare ai radio button in questo gruppo </p>\n",line:56,modifierKind:[112]},{name:"_radios",type:"QueryList<RadioButtonComponent>",optional:!1,description:"<p>radio buttons figli. </p>\n",line:77,decorators:[{name:"ContentChildren"}]},{name:"_selected",defaultValue:"null",type:"RadioButtonComponent | null",optional:!1,description:"<p>Il radio button attualmente selezionato. </p>\n",line:59,modifierKind:[112]},{name:"_value",defaultValue:"null",type:"any",optional:!1,description:"<p>Il valore selezionato per il gruppo. Dovrebbe essere uguale al valore del radio button selezionato se\n<em>esiste</em> un radio button con un valore corrispondente. Se <em>non esiste</em> un radio button corrispondente\nquesto valore persiste ed \xe8 applicato nel caso in cui un nuovo radio button viene aggiunto con il valore\ncorrispondente.</p>\n",line:53,modifierKind:[112]},{name:"onTouched",defaultValue:"() => { }",type:"function",optional:!1,description:"",line:82}],methodsClass:[{name:"_checkSelectedRadioButton",args:[],optional:!1,returnType:"void",typeParameters:[],line:104},{name:"_emitChangeEvent",args:[],optional:!1,returnType:"void",typeParameters:[],line:165,description:"<p>Invia l&#39;evento change con la selezione corrente e il valore del gruppo. </p>\n"},{name:"_markRadiosForCheck",args:[],optional:!1,returnType:"void",typeParameters:[],line:171},{name:"_touch",args:[],optional:!1,returnType:"void",typeParameters:[],line:139},{name:"_updateRadioButtonNames",args:[],optional:!1,returnType:"void",typeParameters:[],line:145,modifierKind:[112]},{name:"_updateSelectedRadioFromValue",args:[],optional:!1,returnType:"void",typeParameters:[],line:154,description:"<p>Aggiorna il radio button <code>selected</code> a seconda del suo _value. </p>\n",modifierKind:[112]},{name:"ngAfterContentInit",args:[],optional:!1,returnType:"void",typeParameters:[],line:135,description:"<p>Inizializza le propriet\xe0 quando il contenuto dei figli\xe8 disponibile.\nQuesto permette di propagare gli attributi rilevanti ai radio buttons associati.</p>\n"},{name:"registerOnChange",args:[{name:"fn",type:"function",function:[{name:"value",type:"any"}]}],optional:!1,returnType:"void",typeParameters:[],line:182,jsdoctags:[{name:"fn",type:"function",function:[{name:"value",type:"any"}],tagName:{text:"param"}}]},{name:"registerOnTouched",args:[{name:"fn",type:"any"}],optional:!1,returnType:"void",typeParameters:[],line:186,jsdoctags:[{name:"fn",type:"any",tagName:{text:"param"}}]},{name:"writeValue",args:[{name:"value",type:"any"}],optional:!1,returnType:"void",typeParameters:[],line:177,jsdoctags:[{name:"value",type:"any",tagName:{text:"param"}}]}],implements:["AfterContentInit","ControlValueAccessor"],constructorObj:{name:"constructor",description:"",args:[{name:"_changeDetector",type:"ChangeDetectorRef"}],line:125,jsdoctags:[{name:"_changeDetector",type:"ChangeDetectorRef",tagName:{text:"param"}}]},accessors:{name:{name:"name",setSignature:{name:"name",type:"void",args:[{name:"value",type:"string"}],returnType:"void",line:87,jsdoctags:[{name:"value",type:"string",tagName:{text:"param"}}]}},value:{name:"value",setSignature:{name:"value",type:"void",args:[{name:"newValue",type:"any"}],returnType:"void",line:95,jsdoctags:[{name:"newValue",type:"any",tagName:{text:"param"}}]}},selected:{name:"selected",setSignature:{name:"selected",type:"void",args:[{name:"selected",type:""}],returnType:"void",line:113,jsdoctags:[{name:"selected",type:"",tagName:{text:"param"}}]}},disabled:{name:"disabled",setSignature:{name:"disabled",type:"void",args:[{name:"value",type:""}],returnType:"void",line:122,jsdoctags:[{name:"value",type:"",tagName:{text:"param"}}]}}}},{name:"TooltipDirective",id:"directive-TooltipDirective-7e7d590852c39b7c4a478af7ff4b73a0",file:"projects/design-angular-kit/src/lib/tooltip/tooltip.directive.ts",type:"directive",description:"<p>Una direttiva per la creazione di un tooltip.</p>\n",sourceCode:"import {\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n  OnDestroy,\n  OnChanges,\n  Injector,\n  Renderer2,\n  ComponentRef,\n  ElementRef,\n  TemplateRef,\n  ViewContainerRef,\n  ComponentFactoryResolver,\n  NgZone,\n  SimpleChanges,\n  HostListener,\n} from '@angular/core';\n\nimport { listenToTriggers } from './triggers';\nimport { positionElements, Placement, PlacementArray } from './positioning';\nimport { PopupService } from './popup';\nimport { TooltipConfig } from './tooltip.config';\nimport { TooltipComponent } from './tooltip.component';\nimport { Subscription } from 'rxjs';\nimport { Util } from '../util/util';\nimport { INTERACTION_TRIGGERS } from '../models/InteractionTrigger';\n\nconst TRIGGER = INTERACTION_TRIGGERS.HOVER;\n\nlet identifier = 0;\n\n/**\n * Una direttiva per la creazione di un tooltip.\n */\n@Directive({\n  selector: '[it-tooltip]', // tslint:disable-line\n  exportAs: 'it-tooltip'\n})\nexport class TooltipDirective implements OnInit, OnDestroy, OnChanges {\n  /**\n   * Contenuto da mostrare nel tooltip. In assenza di contenuto, il tooltip non si aprir\xe0.\n   */\n  @Input('it-tooltip')\n  get itTooltip(): string | TemplateRef<any> { return this._itTooltip; }\n  set itTooltip(value: string | TemplateRef<any>) { this._itTooltip = value; }\n  private _itTooltip: string | TemplateRef<any>;\n\n  /**\n   * Il collocamento accettato dal tooltip:\n   *    \"top\", \"top-left\", \"top-right\", \"bottom\", \"bottom-left\", \"bottom-right\",\n   *    \"left\", \"left-top\", \"left-bottom\", \"right\", \"right-top\", \"right-bottom\"\n   * ed array dei valori soprariportati.\n   */\n  @Input()\n  get placement(): PlacementArray { return this._placement; }\n  set placement(value: PlacementArray) { this._placement = value; }\n  private _placement: PlacementArray;\n\n  /**\n   * Un selettore che specifica l'elemento in cui il tooltip dovrebbe essere aggiunto.\n   * Attualmente supporta solo \"body\".\n   */\n  @Input()\n  get container(): string { return this._container; }\n  set container(value: string) { this._container = value; }\n  private _container: string;\n\n  /**\n   * Evento da emettere quando il tooltip sta per essere mostrato\n   */\n  @Output('show')\n  get showEvent(): EventEmitter<TooltipDirective> { return this._showEvent; }\n  set showEvent(value: EventEmitter<TooltipDirective>) { this._showEvent = value; }\n  private _showEvent = new EventEmitter<TooltipDirective>();\n\n  /**\n   * Evento da emettere quando il tooltip \xe8 mostrato\n   */\n  @Output('shown')\n  get shownEvent(): EventEmitter<TooltipDirective> { return this._shownEvent; }\n  set shownEvent(value: EventEmitter<TooltipDirective>) { this._shownEvent = value; }\n  private _shownEvent = new EventEmitter<TooltipDirective>();\n\n  /**\n   * Evento da emettere quando il tooltip viene inserito nel DOM\n   */\n  @Output('inserted')\n  get insertedEvent(): EventEmitter<TooltipDirective> { return this._insertedEvent; }\n  set insertedEvent(value: EventEmitter<TooltipDirective>) { this._insertedEvent = value; }\n  private _insertedEvent = new EventEmitter<TooltipDirective>();\n\n  /**\n   * Evento da emettere quando il tooltip sta per essere nascosto\n   */\n  @Output('hide')\n  get hideEvent(): EventEmitter<TooltipDirective> { return this._hideEvent; }\n  set hideEvent(value: EventEmitter<TooltipDirective>) { this._hideEvent = value; }\n  private _hideEvent = new EventEmitter<TooltipDirective>();\n\n  /**\n   * Evento da emettere quando il tooltip \xe8 nascosto\n   */\n  @Output('hidden')\n  get hiddenEvent(): EventEmitter<TooltipDirective> { return this._hiddenEvent; }\n  set hiddenEvent(value: EventEmitter<TooltipDirective>) { this._hiddenEvent = value; }\n  private _hiddenEvent = new EventEmitter<TooltipDirective>();\n\n  /**\n   * Un flag utilizzato per indicare se un tooltip \xe8 disabilitato, cos\xec da non doverlo mostrare.\n   */\n  @Input('disabled')\n  get disableTooltip(): boolean { return this._disableTooltip; }\n  set disableTooltip(value: boolean) { this._disableTooltip = Util.coerceBooleanProperty(value); }\n  private _disableTooltip = false;\n\n  private _itTooltipWindowId = `it-tooltip-${identifier++}`;\n  private _popupService: PopupService<TooltipComponent>;\n  private _windowRef: ComponentRef<TooltipComponent>;\n  private _unregisterListenersFn;\n  private _zoneSubscription: Subscription;\n  private _isDisabled(): boolean {\n    if (this.disableTooltip) {\n      return true;\n    }\n    if (!this.itTooltip) {\n      return true;\n    }\n    return false;\n  }\n\n  constructor(\n      private _elementRef: ElementRef<HTMLElement>,\n      private _renderer: Renderer2,\n      injector: Injector,\n      componentFactoryResolver: ComponentFactoryResolver,\n      viewContainerRef: ViewContainerRef,\n      config: TooltipConfig,\n      ngZone: NgZone\n  ) {\n    this.placement = config.placement;\n    this.container = config.container;\n    this.disableTooltip = config.disableTooltip;\n    this._popupService = new PopupService<TooltipComponent>(\n      TooltipComponent, injector, viewContainerRef, _renderer, componentFactoryResolver);\n\n    this._zoneSubscription = ngZone.onStable.subscribe(() => {\n      if (this._windowRef) {\n        this._windowRef.instance.applyPlacement(\n          positionElements(\n            this._elementRef.nativeElement, this._windowRef.location.nativeElement,\n            this.placement, this.container === 'body'\n          )\n        );\n      }\n    });\n  }\n\n  /**\n   * Apre il tooltip di un elemento. \xc8 considerato un azionamento \"manuale\" del tooltip.\n   * Il context \xe8 un valore opzionale da iniettare nel template del tooltip quando esso viene creato.\n   */\n  show(context?: any) {\n    if (!this._isDisabled()) {\n      // Scatena l'evento per segnalare l'inizio del processo per visualizzare il tooltip\n      this.showEvent.emit(this);\n\n      if (!this._windowRef) {\n        this._windowRef = this._popupService.open(this.itTooltip, context);\n\n        const tooltipComponent = this._windowRef.instance;\n        tooltipComponent.id = this._itTooltipWindowId;\n\n        this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', this._itTooltipWindowId);\n\n        if (this.container === 'body') {\n          window.document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);\n        }\n\n        this._windowRef.changeDetectorRef.detectChanges();\n        this._windowRef.changeDetectorRef.markForCheck();\n\n        // Posiziona il tooltip attorno all'elemento\n        tooltipComponent.applyPlacement(\n          positionElements(\n            this._elementRef.nativeElement, this._windowRef.location.nativeElement,\n            this.placement, this.container === 'body'\n          )\n        );\n\n        // Scatena l'evento per segnalare l'inserimento nel DOM\n        this.insertedEvent.emit(this);\n      } else {\n        const tooltipComponent = this._windowRef.instance;\n        tooltipComponent.hidden = false;\n      }\n\n      // Scatena l'evento per segnalare che il tooltip \xe8 stato visualizzato\n      this.shownEvent.emit(this);\n    }\n  }\n\n  /**\n   * Chiude il tooltip di un elemento. \xc8 considerato un azionamento \"manuale\" del tooltip.\n   */\n  hide() {\n    // Scatena l'evento per segnalare l'inizio del processo per nascondere il tooltip\n    this.hideEvent.emit(this);\n    if (this._windowRef) {\n      const tooltipComponent = this._windowRef.instance;\n      tooltipComponent.hidden = true;\n\n      // Scatena l'evento per segnalare che il tooltip \xe8 stato nascosto\n      this.hiddenEvent.emit(this);\n    }\n  }\n\n  /**\n   * Apre/chiude il un tooltip di un elemento. \xc8 considerato un azionamento \"manuale\" del tooltip.\n   */\n  toggle() {\n    if (this._windowRef) {\n      if (this._windowRef.instance.hidden) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    } else {\n      this.show();\n    }\n  }\n\n  /**\n   * Nasconde e distrugge il tooltip di un elemento.\n   */\n  dispose() {\n    const isShown = this._windowRef ? !this._windowRef.instance.hidden : false;\n    if (isShown) {\n      this.hide();\n    }\n\n    if (this._windowRef) {\n      this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');\n      this._popupService.close();\n      this._windowRef = null;\n    }\n  }\n\n  /**\n   * Fornisce al tooltip di un elemento la possibilit\xe0 di essere mostrato.\n   */\n  enable() {\n    if (this._isDisabled()) {\n      this.disableTooltip = false;\n    }\n  }\n\n  /**\n   * Rimuove la capacit\xe0 di mostrare il tooltip di un elemento.\n   */\n  disable() {\n    if (!this._isDisabled()) {\n      this.disableTooltip = true;\n    }\n  }\n\n  /**\n   * Attiva/disattiva la possibilit\xe0 che il tooltip di un elemento sia mostrato o nascosto.\n   */\n  toggleEnabled() {\n    if (this._isDisabled()) {\n      this.enable();\n    } else {\n      this.disable();\n    }\n  }\n\n  ngOnInit() {\n    this._unregisterListenersFn = listenToTriggers(\n      this._renderer, this._elementRef.nativeElement, TRIGGER,\n      this.show.bind(this), this.hide.bind(this), this.toggle.bind(this)\n    );\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Chiude il tooltip se il contenuto risulta vuoto, o se disableTooltip \xe8 impostato a vero\n    if ((changes['itTooltip'] || changes['disableTooltip']) && this._isDisabled()) {\n      this.hide();\n    } else if (changes['placement']) {\n      if (this._windowRef) {\n        this._windowRef.instance.applyPlacement(\n          positionElements(\n            this._elementRef.nativeElement, this._windowRef.location.nativeElement,\n            this.placement, this.container === 'body'\n          )\n        );\n      }\n    } else if (changes['container']) {\n      const isShown = this._windowRef ? !this._windowRef.instance.hidden : false;\n      this.dispose();\n      if (isShown) {\n        this.show();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this.dispose();\n    this._unregisterListenersFn();\n    this._zoneSubscription.unsubscribe();\n  }\n\n  @HostListener('focus')\n  protected handleFocus() {\n    this.show();\n  }\n\n  @HostListener('blur')\n  protected handleBlur() {\n    this.hide();\n  }\n}\n",selector:"[it-tooltip]",providers:[],inputsClass:[{name:"container",description:"<p>Un selettore che specifica l&#39;elemento in cui il tooltip dovrebbe essere aggiunto.\nAttualmente supporta solo &quot;body&quot;.</p>\n",line:73,type:"string"},{name:"disabled",description:"<p>Un flag utilizzato per indicare se un tooltip \xe8 disabilitato, cos\xec da non doverlo mostrare.</p>\n",line:121,type:"boolean"},{name:"it-tooltip",description:"<p>Contenuto da mostrare nel tooltip. In assenza di contenuto, il tooltip non si aprir\xe0.</p>\n",line:53,type:"string | TemplateRef<any>"},{name:"placement",description:"<p>Il collocamento accettato dal tooltip:\n    &quot;top&quot;, &quot;top-left&quot;, &quot;top-right&quot;, &quot;bottom&quot;, &quot;bottom-left&quot;, &quot;bottom-right&quot;,\n    &quot;left&quot;, &quot;left-top&quot;, &quot;left-bottom&quot;, &quot;right&quot;, &quot;right-top&quot;, &quot;right-bottom&quot;\ned array dei valori soprariportati.</p>\n",line:64,type:"PlacementArray"}],outputsClass:[{name:"hidden",description:"<p>Evento da emettere quando il tooltip \xe8 nascosto</p>\n",line:113,type:"EventEmitter<TooltipDirective>"},{name:"hide",description:"<p>Evento da emettere quando il tooltip sta per essere nascosto</p>\n",line:105,type:"EventEmitter<TooltipDirective>"},{name:"inserted",description:"<p>Evento da emettere quando il tooltip viene inserito nel DOM</p>\n",line:97,type:"EventEmitter<TooltipDirective>"},{name:"show",description:"<p>Evento da emettere quando il tooltip sta per essere mostrato</p>\n",line:81,type:"EventEmitter<TooltipDirective>"},{name:"shown",description:"<p>Evento da emettere quando il tooltip \xe8 mostrato</p>\n",line:89,type:"EventEmitter<TooltipDirective>"}],hostBindings:[],hostListeners:[{name:"blur",args:[],argsDecorator:[],line:327},{name:"focus",args:[],argsDecorator:[],line:322}],propertiesClass:[{name:"_container",type:"string",optional:!1,description:"",line:75,modifierKind:[112]},{name:"_disableTooltip",defaultValue:"false",type:"",optional:!1,description:"",line:123,modifierKind:[112]},{name:"_hiddenEvent",defaultValue:"new EventEmitter<TooltipDirective>()",type:"",optional:!1,description:"",line:115,modifierKind:[112]},{name:"_hideEvent",defaultValue:"new EventEmitter<TooltipDirective>()",type:"",optional:!1,description:"",line:107,modifierKind:[112]},{name:"_insertedEvent",defaultValue:"new EventEmitter<TooltipDirective>()",type:"",optional:!1,description:"",line:99,modifierKind:[112]},{name:"_itTooltip",type:"string | TemplateRef<any>",optional:!1,description:"",line:55,modifierKind:[112]},{name:"_itTooltipWindowId",defaultValue:"`it-tooltip-${identifier++}`",type:"",optional:!1,description:"",line:125,modifierKind:[112]},{name:"_placement",type:"PlacementArray",optional:!1,description:"",line:66,modifierKind:[112]},{name:"_popupService",type:"PopupService<TooltipComponent>",optional:!1,description:"",line:126,modifierKind:[112]},{name:"_showEvent",defaultValue:"new EventEmitter<TooltipDirective>()",type:"",optional:!1,description:"",line:83,modifierKind:[112]},{name:"_shownEvent",defaultValue:"new EventEmitter<TooltipDirective>()",type:"",optional:!1,description:"",line:91,modifierKind:[112]},{name:"_unregisterListenersFn",type:"",optional:!1,description:"",line:128,modifierKind:[112]},{name:"_windowRef",type:"ComponentRef<TooltipComponent>",optional:!1,description:"",line:127,modifierKind:[112]},{name:"_zoneSubscription",type:"Subscription",optional:!1,description:"",line:129,modifierKind:[112]}],methodsClass:[{name:"_isDisabled",args:[],optional:!1,returnType:"boolean",typeParameters:[],line:130,modifierKind:[112]},{name:"disable",args:[],optional:!1,returnType:"void",typeParameters:[],line:269,description:"<p>Rimuove la capacit\xe0 di mostrare il tooltip di un elemento.</p>\n"},{name:"dispose",args:[],optional:!1,returnType:"void",typeParameters:[],line:244,description:"<p>Nasconde e distrugge il tooltip di un elemento.</p>\n"},{name:"enable",args:[],optional:!1,returnType:"void",typeParameters:[],line:260,description:"<p>Fornisce al tooltip di un elemento la possibilit\xe0 di essere mostrato.</p>\n"},{name:"hide",args:[],optional:!1,returnType:"void",typeParameters:[],line:214,description:"<p>Chiude il tooltip di un elemento. \xc8 considerato un azionamento &quot;manuale&quot; del tooltip.</p>\n"},{name:"ngOnChanges",args:[{name:"changes",type:"SimpleChanges"}],optional:!1,returnType:"void",typeParameters:[],line:293,jsdoctags:[{name:"changes",type:"SimpleChanges",tagName:{text:"param"}}]},{name:"ngOnDestroy",args:[],optional:!1,returnType:"void",typeParameters:[],line:315},{name:"ngOnInit",args:[],optional:!1,returnType:"void",typeParameters:[],line:286},{name:"show",args:[{name:"context",type:"any",optional:!0}],optional:!1,returnType:"void",typeParameters:[],line:171,description:"<p>Apre il tooltip di un elemento. \xc8 considerato un azionamento &quot;manuale&quot; del tooltip.\nIl context \xe8 un valore opzionale da iniettare nel template del tooltip quando esso viene creato.</p>\n",jsdoctags:[{name:"context",type:"any",optional:!0,tagName:{text:"param"}}]},{name:"toggle",args:[],optional:!1,returnType:"void",typeParameters:[],line:229,description:"<p>Apre/chiude il un tooltip di un elemento. \xc8 considerato un azionamento &quot;manuale&quot; del tooltip.</p>\n"},{name:"toggleEnabled",args:[],optional:!1,returnType:"void",typeParameters:[],line:278,description:"<p>Attiva/disattiva la possibilit\xe0 che il tooltip di un elemento sia mostrato o nascosto.</p>\n"}],implements:["OnInit","OnDestroy","OnChanges"],constructorObj:{name:"constructor",description:"",args:[{name:"_elementRef",type:"ElementRef<HTMLElement>"},{name:"_renderer",type:"Renderer2"},{name:"injector",type:"Injector"},{name:"componentFactoryResolver",type:"ComponentFactoryResolver"},{name:"viewContainerRef",type:"ViewContainerRef"},{name:"config",type:"TooltipConfig"},{name:"ngZone",type:"NgZone"}],line:138,jsdoctags:[{name:"_elementRef",type:"ElementRef<HTMLElement>",tagName:{text:"param"}},{name:"_renderer",type:"Renderer2",tagName:{text:"param"}},{name:"injector",type:"Injector",tagName:{text:"param"}},{name:"componentFactoryResolver",type:"ComponentFactoryResolver",tagName:{text:"param"}},{name:"viewContainerRef",type:"ViewContainerRef",tagName:{text:"param"}},{name:"config",type:"TooltipConfig",tagName:{text:"param"}},{name:"ngZone",type:"NgZone",tagName:{text:"param"}}]},accessors:{itTooltip:{name:"itTooltip",setSignature:{name:"itTooltip",type:"void",args:[{name:"value",type:""}],returnType:"void",line:54,jsdoctags:[{name:"value",type:"",tagName:{text:"param"}}]}},placement:{name:"placement",setSignature:{name:"placement",type:"void",args:[{name:"value",type:""}],returnType:"void",line:65,jsdoctags:[{name:"value",type:"",tagName:{text:"param"}}]}},container:{name:"container",setSignature:{name:"container",type:"void",args:[{name:"value",type:"string"}],returnType:"void",line:74,jsdoctags:[{name:"value",type:"string",tagName:{text:"param"}}]}},showEvent:{name:"showEvent",setSignature:{name:"showEvent",type:"void",args:[{name:"value",type:""}],returnType:"void",line:82,jsdoctags:[{name:"value",type:"",tagName:{text:"param"}}]}},shownEvent:{name:"shownEvent",setSignature:{name:"shownEvent",type:"void",args:[{name:"value",type:""}],returnType:"void",line:90,jsdoctags:[{name:"value",type:"",tagName:{text:"param"}}]}},insertedEvent:{name:"insertedEvent",setSignature:{name:"insertedEvent",type:"void",args:[{name:"value",type:""}],returnType:"void",line:98,jsdoctags:[{name:"value",type:"",tagName:{text:"param"}}]}},hideEvent:{name:"hideEvent",setSignature:{name:"hideEvent",type:"void",args:[{name:"value",type:""}],returnType:"void",line:106,jsdoctags:[{name:"value",type:"",tagName:{text:"param"}}]}},hiddenEvent:{name:"hiddenEvent",setSignature:{name:"hiddenEvent",type:"void",args:[{name:"value",type:""}],returnType:"void",line:114,jsdoctags:[{name:"value",type:"",tagName:{text:"param"}}]}},disableTooltip:{name:"disableTooltip",setSignature:{name:"disableTooltip",type:"void",args:[{name:"value",type:"boolean"}],returnType:"void",line:122,jsdoctags:[{name:"value",type:"boolean",tagName:{text:"param"}}]}}}}],a:[{name:"BreadcrumbComponent",id:"component-BreadcrumbComponent-71c8ef5db9bfe43bda2d2528e05471b4",file:"projects/design-angular-kit/src/lib/breadcrumb/breadcrumb.component.ts",changeDetection:"ChangeDetectionStrategy.OnPush",encapsulation:[],entryComponents:[],inputs:[],outputs:[],providers:[],selector:"it-breadcrumb",styleUrls:["breadcrumb.component.css"],styles:[],templateUrl:["./breadcrumb.component.html"],viewProviders:[],inputsClass:[{name:"dark",description:"<p>Indica che il breadcrumb utilizza il tema di colorazione scura.\nAccetta una espressione booleana o pu\xf2 essere usato come attributo senza valore</p>\n",line:29,type:"boolean"},{name:"separator",description:"<p>Il carattere che verr\xe0 usato come separatore tra gli elementi del breadcrumb</p>\n",line:37,type:"string"}],outputsClass:[],propertiesClass:[{name:"_dark",defaultValue:"false",type:"",optional:!1,description:"",line:31,modifierKind:[112]},{name:"_items",type:"QueryList<BreadcrumbItemComponent>",optional:!1,description:"",line:42,decorators:[{name:"ContentChildren"}],modifierKind:[112]},{name:"_separator",defaultValue:"DEFAULT_SEPARATOR",type:"",optional:!1,description:"",line:39,modifierKind:[112]},{name:"_subscription",defaultValue:"Subscription.EMPTY",type:"",optional:!1,description:"",line:48,modifierKind:[112]},{name:"id",defaultValue:"`it-breadcrumb-${identifier++}`",type:"",optional:!1,description:"",line:22}],methodsClass:[{name:"_reloadBreadcrumbs",args:[{name:"currentItems",type:"QueryList<BreadcrumbItemComponent>"}],optional:!1,returnType:"void",typeParameters:[],line:68,modifierKind:[112],jsdoctags:[{name:"currentItems",type:"QueryList<BreadcrumbItemComponent>",tagName:{text:"param"}}]},{name:"_subscribeToChanges",args:[],optional:!1,returnType:"void",typeParameters:[],line:78,modifierKind:[112]},{name:"ngAfterContentInit",args:[],optional:!1,returnType:"void",typeParameters:[],line:50},{name:"ngOnChanges",args:[{name:"changes",type:"SimpleChanges"}],optional:!1,returnType:"void",typeParameters:[],line:54,jsdoctags:[{name:"changes",type:"SimpleChanges",tagName:{text:"param"}}]},{name:"ngOnDestroy",args:[],optional:!1,returnType:"void",typeParameters:[],line:62}],hostBindings:[],hostListeners:[],description:"<p>Una componente che indica la posizione della pagina corrente all\u2019interno di una gerarchia di navigazione</p>\n",type:"component",sourceCode:"import {\n  Component, Input, ContentChildren, QueryList, forwardRef,\n  AfterContentInit, OnChanges, OnDestroy, SimpleChanges, ChangeDetectionStrategy\n} from '@angular/core';\nimport { BreadcrumbItemComponent } from './breadcrumb-item.component';\nimport { Util } from '../util/util';\nimport { Subscription } from 'rxjs';\n\nconst DEFAULT_SEPARATOR = '/';\nlet identifier = 0;\n\n/**\n * Una componente che indica la posizione della pagina corrente all\u2019interno di una gerarchia di navigazione\n */\n@Component({\n  selector: 'it-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  styleUrls: ['./breadcrumb.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbComponent implements AfterContentInit, OnChanges, OnDestroy {\n  id = `it-breadcrumb-${identifier++}`;\n\n  /**\n   * Indica che il breadcrumb utilizza il tema di colorazione scura.\n   * Accetta una espressione booleana o pu\xf2 essere usato come attributo senza valore\n   */\n  @Input()\n  get dark(): boolean { return this._dark; }\n  set dark(value: boolean) { this._dark = Util.coerceBooleanProperty(value); }\n  private _dark = false;\n\n  /**\n   * Il carattere che verr\xe0 usato come separatore tra gli elementi del breadcrumb\n   */\n  @Input()\n  get separator(): string { return this._separator; }\n  set separator(value: string) { this._separator = value ? value : DEFAULT_SEPARATOR; }\n  private _separator = DEFAULT_SEPARATOR;\n\n  @ContentChildren(forwardRef(() => BreadcrumbItemComponent), { descendants: true })\n  private _items: QueryList<BreadcrumbItemComponent>;\n\n  get breadcrumbClass() {\n    return 'breadcrumb' + (this._dark ? ' dark' : '');\n  }\n\n  private _subscription = Subscription.EMPTY;\n\n  ngAfterContentInit() {\n    this._reloadBreadcrumbs(this._items);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['separator']) {\n      if (!changes['separator'].firstChange) {\n        this._reloadBreadcrumbs(this._items);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n\n  private _reloadBreadcrumbs(currentItems: QueryList<BreadcrumbItemComponent>) {\n    currentItems.forEach(item => {\n      item.separator = this.separator;\n      item.isLast = (item === currentItems.last);\n    });\n\n    this._subscribeToChanges();\n  }\n\n\n  private _subscribeToChanges() {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n\n    this._subscription = this._items.changes.subscribe(items => {\n      this._reloadBreadcrumbs(items);\n    });\n  }\n\n}\n",implements:["AfterContentInit","OnChanges","OnDestroy"],accessors:{dark:{name:"dark",setSignature:{name:"dark",type:"void",args:[{name:"value",type:"boolean"}],returnType:"void",line:30,jsdoctags:[{name:"value",type:"boolean",tagName:{text:"param"}}]}},separator:{name:"separator",setSignature:{name:"separator",type:"void",args:[{name:"value",type:"string"}],returnType:"void",line:38,jsdoctags:[{name:"value",type:"string",tagName:{text:"param"}}]}},breadcrumbClass:{name:"breadcrumbClass",getSignature:{name:"breadcrumbClass",type:"",returnType:"",line:44}}},templateData:'<nav class="breadcrumb-container" aria-label="breadcrumb" [id]="id">\n  <ol [ngClass]="breadcrumbClass">\n    <ng-content></ng-content>\n  </ol>\n</nav>'},{name:"BreadcrumbItemComponent",id:"component-BreadcrumbItemComponent-8a2772aac7f9b15ab503ac6ac15c216a",file:"projects/design-angular-kit/src/lib/breadcrumb/breadcrumb-item.component.ts",changeDetection:"ChangeDetectionStrategy.OnPush",encapsulation:[],entryComponents:[],inputs:[],outputs:[],providers:[],selector:"it-breadcrumb-item",styleUrls:["breadcrumb-item.component.css"],styles:[],templateUrl:["./breadcrumb-item.component.html"],viewProviders:[],inputsClass:[{name:"icon",description:"<p>La classe dell&#39;icona da usare prima del testo dell&#39;elemento del breadcrumb</p>\n",line:28,type:"string"},{name:"link",description:"<p>Il link alla pagina verso cui andare al click di questo elemento del breadcrumb</p>\n",line:20,type:"string"}],outputsClass:[],propertiesClass:[{name:"_icon",type:"string",optional:!1,description:"",line:30,modifierKind:[112]},{name:"_isLast",defaultValue:"false",type:"",optional:!1,description:"",line:49,modifierKind:[112]},{name:"_link",type:"string",optional:!1,description:"",line:22,modifierKind:[112]},{name:"_separator",type:"string",optional:!1,description:"",line:34,modifierKind:[112]},{name:"id",defaultValue:"`it-breadcrumb-item-${identifier++}`",type:"",optional:!1,description:"",line:12}],methodsClass:[],hostBindings:[],hostListeners:[],description:"",type:"component",sourceCode:"import { Component, OnInit, Input, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\n\nlet identifier = 0;\n\n@Component({\n  selector: 'it-breadcrumb-item',\n  templateUrl: './breadcrumb-item.component.html',\n  styleUrls: ['./breadcrumb-item.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbItemComponent {\n  id = `it-breadcrumb-item-${identifier++}`;\n\n  constructor(private _cdRef: ChangeDetectorRef, private _elemRef: ElementRef) { }\n\n  /**\n   * Il link alla pagina verso cui andare al click di questo elemento del breadcrumb\n   */\n  @Input()\n  get link(): string { return this._link; }\n  set link(value: string) { this._link = value; }\n  private _link: string;\n\n  /**\n   * La classe dell'icona da usare prima del testo dell'elemento del breadcrumb\n   */\n  @Input()\n  get icon(): string { return this._icon; }\n  set icon(value: string) { this._icon = value; }\n  private _icon: string;\n\n  get separator(): string { return this._separator; }\n  set separator(value: string) { this._separator = value; }\n  private _separator: string;\n\n  get isLast(): boolean { return this._isLast; }\n  set isLast(value: boolean) {\n    this._isLast = value;\n    const breadcrumbItem = this._elemRef.nativeElement.querySelector('.breadcrumb-item');\n    if (this._isLast) {\n      breadcrumbItem.setAttribute('aria-current', 'page');\n    } else {\n      if (breadcrumbItem.hasAttribute('aria-current')) {\n        breadcrumbItem.removeAttribute('aria-current');\n      }\n    }\n    this._cdRef.detectChanges();\n  }\n  private _isLast = false;\n\n  get breadcrumbClass() {\n    return 'breadcrumb-item' + (this.isLast ? ' active' : '');\n  }\n\n}\n",constructorObj:{name:"constructor",description:"",args:[{name:"_cdRef",type:"ChangeDetectorRef"},{name:"_elemRef",type:"ElementRef"}],line:12,jsdoctags:[{name:"_cdRef",type:"ChangeDetectorRef",tagName:{text:"param"}},{name:"_elemRef",type:"ElementRef",tagName:{text:"param"}}]},accessors:{link:{name:"link",setSignature:{name:"link",type:"void",args:[{name:"value",type:"string"}],returnType:"void",line:21,jsdoctags:[{name:"value",type:"string",tagName:{text:"param"}}]}},icon:{name:"icon",setSignature:{name:"icon",type:"void",args:[{name:"value",type:"string"}],returnType:"void",line:29,jsdoctags:[{name:"value",type:"string",tagName:{text:"param"}}]}},separator:{name:"separator",setSignature:{name:"separator",type:"void",args:[{name:"value",type:"string"}],returnType:"void",line:33,jsdoctags:[{name:"value",type:"string",tagName:{text:"param"}}]},getSignature:{name:"separator",type:"string",returnType:"string",line:32}},isLast:{name:"isLast",setSignature:{name:"isLast",type:"void",args:[{name:"value",type:"boolean"}],returnType:"void",line:37,jsdoctags:[{name:"value",type:"boolean",tagName:{text:"param"}}]},getSignature:{name:"isLast",type:"boolean",returnType:"boolean",line:36}},breadcrumbClass:{name:"breadcrumbClass",getSignature:{name:"breadcrumbClass",type:"",returnType:"",line:51}}},templateData:'<li [class]="breadcrumbClass" [id]="id">\n  <i [class]="icon" *ngIf="icon"></i>\n  <a [href]="link">\n    <ng-content></ng-content>\n  </a> <span class="separator" *ngIf="!isLast">{{separator}}</span>\n</li>\n'},{name:"ButtonComponent",id:"component-ButtonComponent-3099c24c7b4788edf94c96720a59209f",file:"projects/design-angular-kit/src/lib/button/button.component.ts",encapsulation:[],entryComponents:[],inputs:[],outputs:[],providers:[],selector:"it-button",styleUrls:["button.component.css"],styles:[],templateUrl:["./button.component.html"],viewProviders:[],inputsClass:[{name:"block",description:"<p>Indica se il pulsante occupa tutta l&#39;ampiezza a sua disposizione.</p>\n",line:42,type:"boolean"},{name:"color",description:"<p>Stabilisce il colore del pulsante a seconda delle classi di bootstrap.\nPu\xf2 avere valori:</p>\n<ul>\n<li> primary\n<li> secondary\n<li> danger\n<li> warning\n<li> info\n<li> success\n<li> light\n<li> dark\n</ul>",line:61,type:"any"},{name:"disabled",description:"<p>Se presente, il pulsante avr\xe0 un effetto di trasparenza e non reagir\xe0 al click</p>\n",line:24,type:"boolean"},{name:"outline",description:"<p>Stabilisce se lo stile del pulsante avr\xe0 un contorno.\nAccetta una espressione booleana o pu\xf2 essere usato come attributo senza valore.\nDeve funzionare solo in congiunzione con un colore definito, altrimenti l&#39;attributo viene ignorato.</p>\n",line:34,type:"boolean"},{name:"size",description:"<p>Indica la grandezza del pulsante. Pu\xf2 assumere i valori:</p>\n<ul>\n<li> lg\n<li> sm\n<li> xs\n</ul>",line:82,type:"any"}],outputsClass:[],propertiesClass:[{name:"_block",defaultValue:"false",type:"",optional:!1,description:"",line:44,modifierKind:[112]},{name:"_color",type:"",optional:!1,description:"",line:71,modifierKind:[112]},{name:"_disabled",defaultValue:"false",type:"",optional:!1,description:"",line:26,modifierKind:[112]},{name:"_outline",defaultValue:"false",type:"",optional:!1,description:"",line:36,modifierKind:[112]},{name:"_size",type:"",optional:!1,description:"",line:92,modifierKind:[112]},{name:"id",defaultValue:"`button-${identifier++}`",type:"",optional:!1,description:"",line:18}],methodsClass:[],hostBindings:[],hostListeners:[],description:"<p>Un bottone con design bootstrap italia. Supporta tutte le funzionalit\xe0 di un bottone HTML5.</p>\n",type:"component",sourceCode:"import { Component, Input } from '@angular/core';\nimport { ThemeColor } from '../models/ThemeColor';\nimport { ButtonSize } from '../models/ButtonSize';\nimport { Util } from '../util/util';\n\nlet identifier = 0;\n\n/**\n * Un bottone con design bootstrap italia. Supporta tutte le funzionalit\xe0 di un bottone HTML5.\n */\n@Component({\n  selector: 'it-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.css']\n})\nexport class ButtonComponent {\n\n  id = `button-${identifier++}`;\n\n  /**\n   * Se presente, il pulsante avr\xe0 un effetto di trasparenza e non reagir\xe0 al click\n   */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) { this._disabled = Util.coerceBooleanProperty(value); }\n  private _disabled = false;\n\n  /**\n   * Stabilisce se lo stile del pulsante avr\xe0 un contorno.\n   * Accetta una espressione booleana o pu\xf2 essere usato come attributo senza valore.\n   * Deve funzionare solo in congiunzione con un colore definito, altrimenti l'attributo viene ignorato.\n   */\n  @Input()\n  get outline(): boolean { return this._outline; }\n  set outline(value: boolean) { this._outline = Util.coerceBooleanProperty(value); }\n  private _outline = false;\n\n  /**\n   * Indica se il pulsante occupa tutta l'ampiezza a sua disposizione.\n   */\n  @Input()\n  get block(): boolean { return this._block; }\n  set block(value: boolean) { this._block = Util.coerceBooleanProperty(value); }\n  private _block = false;\n\n  /**\n   * Stabilisce il colore del pulsante a seconda delle classi di bootstrap.\n   * Pu\xf2 avere valori:\n   * <ul>\n   * <li> primary\n   * <li> secondary\n   * <li> danger\n   * <li> warning\n   * <li> info\n   * <li> success\n   * <li> light\n   * <li> dark\n   * </ul>\n   */\n  @Input()\n  get color(): any {\n    return this._color;\n  }\n  set color(value: any) {\n    if (ThemeColor.is(value)) {\n      this._color = value;\n    } else {\n      this._color = undefined;\n    }\n  }\n  private _color;\n\n  /**\n   * Indica la grandezza del pulsante. Pu\xf2 assumere i valori:\n   * <ul>\n   * <li> lg\n   * <li> sm\n   * <li> xs\n   * </ul>\n   */\n  @Input()\n  get size(): any {\n    return this._size;\n  }\n  set size(value: any) {\n    if (ButtonSize.is(value)) {\n      this._size = value;\n    } else {\n      this._size = undefined;\n    }\n  }\n  private _size;\n\n  get buttonClass() {\n    let cssClass = 'btn';\n\n    if (this.color) {\n      if (this.outline) {\n        cssClass += ` btn-outline-${this.color}`;\n      } else {\n        cssClass += ` btn-${this.color}`;\n      }\n    }\n\n    if (this.size) {\n      cssClass += ` btn-${this.size}`;\n    }\n\n    if (this.block) {\n      cssClass += ' btn-block';\n    }\n\n    if (this.disabled) {\n      cssClass += ' disabled';\n    }\n\n    return cssClass;\n  }\n\n}\n",accessors:{disabled:{name:"disabled",setSignature:{name:"disabled",type:"void",args:[{name:"value",type:"boolean"}],returnType:"void",line:25,jsdoctags:[{name:"value",type:"boolean",tagName:{text:"param"}}]}},outline:{name:"outline",setSignature:{name:"outline",type:"void",args:[{name:"value",type:"boolean"}],returnType:"void",line:35,jsdoctags:[{name:"value",type:"boolean",tagName:{text:"param"}}]}},block:{name:"block",setSignature:{name:"block",type:"void",args:[{name:"value",type:"boolean"}],returnType:"void",line:43,jsdoctags:[{name:"value",type:"boolean",tagName:{text:"param"}}]}},color:{name:"color",setSignature:{name:"color",type:"void",args:[{name:"value",type:"any"}],returnType:"void",line:64,jsdoctags:[{name:"value",type:"any",tagName:{text:"param"}}]}},size:{name:"size",setSignature:{name:"size",type:"void",args:[{name:"value",type:"any"}],returnType:"void",line:85,jsdoctags:[{name:"value",type:"any",tagName:{text:"param"}}]}},buttonClass:{name:"buttonClass",getSignature:{name:"buttonClass",type:"",returnType:"",line:94}}},templateData:'<button type="button" [id]="id" [class]="buttonClass" [disabled]="disabled" [attr.aria-disabled]="disabled">\n  <ng-content></ng-content>\n</button>\n'},{name:"CheckboxComponent",id:"component-CheckboxComponent-061d883b3f4d581a0a4d05a1d1a8bf78",file:"projects/design-angular-kit/src/lib/checkbox/checkbox.component.ts",changeDetection:"ChangeDetectionStrategy.OnPush",encapsulation:[],entryComponents:[],inputs:[],outputs:[],providers:[{name:"{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => CheckboxComponent), multi: true }",type:"component"}],selector:"it-checkbox",styleUrls:["checkbox.component.css"],styles:[],templateUrl:["./checkbox.component.html"],viewProviders:[],inputsClass:[{name:"checked",description:"<p>Se la checkbox \xe8 selezionata.</p>\n",line:27,type:"boolean"},{name:"disabled",description:"<p>Se la checkbox \xe8 disabilitata.</p>\n",line:46,type:"boolean"},{name:"label",description:"<p>L&#39;etichetta della checkbox.</p>\n",line:40,type:"string"}],outputsClass:[{name:"change",defaultValue:"new EventEmitter<CheckboxChange>()",description:"<p>Evento emesso quando il valore <code>checked</code> della checkbox cambia.</p>\n",line:58,type:"EventEmitter<CheckboxChange>"}],propertiesClass:[{name:"_checked",defaultValue:"false",type:"",optional:!1,description:"",line:34,modifierKind:[112]},{name:"_controlValueAccessorChangeFn",defaultValue:"() => { }",type:"function",optional:!1,description:"",line:65,modifierKind:[112]},{name:"_disabled",defaultValue:"false",type:"",optional:!1,description:"",line:53,modifierKind:[112]},{name:"_onTouched",defaultValue:"() => {}",type:"function",optional:!1,description:"",line:63,modifierKind:[112]},{name:"inputId",defaultValue:"`checkbox-${identifier++}`",type:"",optional:!1,description:"",line:61}],methodsClass:[{name:"_emitChangeEvent",args:[],optional:!1,returnType:"void",typeParameters:[],line:95,modifierKind:[112]},{name:"_toggle",args:[],optional:!1,returnType:"void",typeParameters:[],line:91,modifierKind:[112]},{name:"handleChange",args:[{name:"event",type:"Event"}],optional:!1,returnType:"void",typeParameters:[],line:83,jsdoctags:[{name:"event",type:"Event",tagName:{text:"param"}}]},{name:"registerOnChange",args:[{name:"fn",type:"function",function:[{name:"value",type:"any"}]}],optional:!1,returnType:"void",typeParameters:[],line:75,jsdoctags:[{name:"fn",type:"function",function:[{name:"value",type:"any"}],tagName:{text:"param"}}]},{name:"registerOnTouched",args:[{name:"fn",type:"any"}],optional:!1,returnType:"void",typeParameters:[],line:79,jsdoctags:[{name:"fn",type:"any",tagName:{text:"param"}}]},{name:"writeValue",args:[{name:"value",type:"any"}],optional:!1,returnType:"void",typeParameters:[],line:71,jsdoctags:[{name:"value",type:"any",tagName:{text:"param"}}]}],hostBindings:[],hostListeners:[],description:"<p>Una checkbox con design bootstrap italia. Supporta tutte le funzionalit\xe0 di una checkbox HTML5,\ned espone una API simile. Una <code>&lt;it-checkbox&gt;</code> pu\xf2 essere checked, unchecked, o disabled.</p>\n",type:"component",sourceCode:"import { Component, Input, Output, EventEmitter, ChangeDetectorRef, forwardRef, ChangeDetectionStrategy } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nlet identifier = 0;\n\nexport class CheckboxChange {\n  source: CheckboxComponent;\n  checked: boolean;\n}\n\n/**\n * Una checkbox con design bootstrap italia. Supporta tutte le funzionalit\xe0 di una checkbox HTML5,\n * ed espone una API simile. Una `<it-checkbox>` pu\xf2 essere checked, unchecked, o disabled.\n */\n@Component({\n  selector: 'it-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.css'],\n  providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => CheckboxComponent), multi: true }],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CheckboxComponent implements ControlValueAccessor {\n  /**\n   * Se la checkbox \xe8 selezionata.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value !== this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked = false;\n\n  /**\n   * L'etichetta della checkbox.\n   */\n  @Input()\n  label: string;\n\n  /**\n   * Se la checkbox \xe8 disabilitata.\n   */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    if (value !== this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled = false;\n\n  /**\n   * Evento emesso quando il valore `checked` della checkbox cambia.\n   */\n  @Output() readonly change: EventEmitter<CheckboxChange> =\n    new EventEmitter<CheckboxChange>();\n\n    inputId = `checkbox-${identifier++}`;\n\n  private _onTouched: () => any = () => {};\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => { };\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef\n  ) { }\n\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  handleChange(event: Event) {\n    event.stopPropagation();\n    if (!this.disabled) {\n      this._toggle();\n      this._emitChangeEvent();\n    }\n  }\n\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  private _emitChangeEvent() {\n    const event = new CheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n}\n",constructorObj:{name:"constructor",description:"",args:[{name:"_changeDetectorRef",type:"ChangeDetectorRef"}],line:65,jsdoctags:[{name:"_changeDetectorRef",type:"ChangeDetectorRef",tagName:{text:"param"}}]},implements:["ControlValueAccessor"],accessors:{checked:{name:"checked",setSignature:{name:"checked",type:"void",args:[{name:"value",type:"boolean"}],returnType:"void",line:28,jsdoctags:[{name:"value",type:"boolean",tagName:{text:"param"}}]}},disabled:{name:"disabled",setSignature:{name:"disabled",type:"void",args:[{name:"value",type:"boolean"}],returnType:"void",line:47,jsdoctags:[{name:"value",type:"boolean",tagName:{text:"param"}}]}}},templateData:"<div class=form-check>\n  <input type=checkbox\n    [id]=inputId\n    [checked]=checked\n    [disabled]=disabled\n    (change)=handleChange($event)>\n  <label\n    [attr.for]=inputId>{{label}}</label>\n</div>\n"},{name:"DropdownComponent",id:"component-DropdownComponent-d00c4b0cda5a4882cf61e164e811bcaf",file:"projects/design-angular-kit/src/lib/dropdown/dropdown.component.ts",changeDetection:"ChangeDetectionStrategy.OnPush",encapsulation:[],entryComponents:[],inputs:[],outputs:[],providers:[],selector:"it-dropdown",styleUrls:["dropdown.component.css"],styles:[],templateUrl:["./dropdown.component.html"],viewProviders:[],inputsClass:[{name:"color",description:"<p>Il colore del pulsante che attiva il dropdown.\nPu\xf2 assumere i valori primary, secondary, danger, warning, info, warning, success, light e dark</p>\n",line:57,type:"any"},{name:"dark",description:"<p>Se presente indica che il dropdown utilizza il tema di colorazione scura.\nAccetta una espressione booleana o pu\xf2 essere usato come attributo senza valore</p>\n",line:39,type:"boolean"},{name:"fullWidth",description:"<p>Se presente indica che le voci del dropdown si sviluppano orizzontalmente.\nAccetta una espressione booleana o pu\xf2 essere usato come attributo senza valore</p>\n",line:48,type:"boolean"},{name:"label",description:"<p>Il testo presente sul pulsante che attiva il dropdown</p>\n",line:71,type:"string"}],outputsClass:[{name:"onClose",description:"<p>Evento che viene lanciato ogni volta che il dropdown viene chiuso</p>\n",line:87,type:"EventEmitter<DropdownComponent>"},{name:"onOpen",description:"<p>Evento che viene lanciato ogni volta che il dropdown viene aperto</p>\n",line:79,type:"EventEmitter<DropdownComponent>"},{name:"onToggle",description:"<p>Evento che viene lanciato ogni volta che il dropdown viene aperto oppure chiuso</p>\n",line:95,type:"EventEmitter<DropdownComponent>"}],propertiesClass:[{name:"_color",defaultValue:"DEFAULT_COLOR",type:"",optional:!1,description:"",line:65,modifierKind:[112]},{name:"_dark",defaultValue:"false",type:"",optional:!1,description:"",line:41,modifierKind:[112]},{name:"_dropdownButton",type:"ElementRef",optional:!1,description:"",line:27,decorators:[{name:"ViewChild"}],modifierKind:[112]},{name:"_dropdownMenu",type:"ElementRef",optional:!1,description:"",line:24,decorators:[{name:"ViewChild"}],modifierKind:[112]},{name:"_fullWidth",defaultValue:"false",type:"",optional:!1,description:"",line:50,modifierKind:[112]},{name:"_isOpen",defaultValue:"false",type:"",optional:!1,description:"",line:32,modifierKind:[112]},{name:"_label",defaultValue:"''",type:"string",optional:!1,description:"",line:73,modifierKind:[112]},{name:"_onClose",defaultValue:"new EventEmitter<DropdownComponent>()",type:"",optional:!1,description:"",line:89,modifierKind:[112]},{name:"_onOpen",defaultValue:"new EventEmitter<DropdownComponent>()",type:"",optional:!1,description:"",line:81,modifierKind:[112]},{name:"_onToggle",defaultValue:"new EventEmitter<DropdownComponent>()",type:"",optional:!1,description:"",line:97,modifierKind:[112]},{name:"id",defaultValue:"`dropdown-${identifier++}`",type:"",optional:!1,description:"",line:29}],methodsClass:[{name:"_close",args:[],optional:!1,returnType:"void",typeParameters:[],line:141,modifierKind:[112]},{name:"_open",args:[],optional:!1,returnType:"void",typeParameters:[],line:133,modifierKind:[112]},{name:"_toggle",args:[],optional:!1,returnType:"void",typeParameters:[],line:124,modifierKind:[112]}],hostBindings:[],hostListeners:[{name:"document:click",args:[{name:"target",type:""}],argsDecorator:["$event.target"],line:100},{name:"document:focusin",args:[{name:"target",type:""}],argsDecorator:["$event.target"],line:109}],description:"<p>Componente usata per attivare o disattivare overlay contestuali per visualizzare elenchi di link e altro ancora con questi men\xf9 a tendina</p>\n",type:"component",sourceCode:"import {\n  Component, Input, Output, EventEmitter, ViewChild, ElementRef, HostListener, ChangeDetectionStrategy\n} from '@angular/core';\nimport { Util } from '../util/util';\nimport { ThemeColor } from '../models/ThemeColor';\n\nlet identifier = 0;\n\nconst DEFAULT_COLOR = 'dropdown';\nconst PLACEMENT_PROPERTY = 'x-placement';\nconst PLACEMENT_VALUE = 'bottom-start';\n\n/**\n * Componente usata per attivare o disattivare overlay contestuali per visualizzare elenchi di link e altro ancora con questi men\xf9 a tendina\n */\n@Component({\n  selector: 'it-dropdown',\n  templateUrl: './dropdown.component.html',\n  styleUrls: ['./dropdown.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DropdownComponent {\n  @ViewChild('dropdownMenu')\n  private _dropdownMenu: ElementRef;\n\n  @ViewChild('dropdownButton')\n  private _dropdownButton: ElementRef;\n\n  id = `dropdown-${identifier++}`;\n\n  get isOpen(): boolean { return this._isOpen; }\n  private _isOpen = false;\n\n  /**\n   * Se presente indica che il dropdown utilizza il tema di colorazione scura.\n   * Accetta una espressione booleana o pu\xf2 essere usato come attributo senza valore\n   */\n  @Input()\n  get dark(): boolean { return this._dark; }\n  set dark(value: boolean) { this._dark = Util.coerceBooleanProperty(value); }\n  private _dark = false;\n\n  /**\n   * Se presente indica che le voci del dropdown si sviluppano orizzontalmente.\n   * Accetta una espressione booleana o pu\xf2 essere usato come attributo senza valore\n   */\n  @Input()\n  get fullWidth(): boolean { return this._fullWidth; }\n  set fullWidth(value: boolean) { this._fullWidth = Util.coerceBooleanProperty(value); }\n  private _fullWidth = false;\n\n  /**\n   * Il colore del pulsante che attiva il dropdown.\n   * Pu\xf2 assumere i valori primary, secondary, danger, warning, info, warning, success, light e dark\n   */\n  @Input()\n  get color(): any { return this._color; }\n  set color(value: any) {\n    if (ThemeColor.is(value)) {\n      this._color = value;\n    } else {\n      this._color = DEFAULT_COLOR;\n    }\n  }\n  private _color = DEFAULT_COLOR;\n\n  /**\n   * Il testo presente sul pulsante che attiva il dropdown\n   */\n  @Input()\n  get label(): string { return this._label; }\n  set label(value: string) { this._label = value; }\n  private _label = '';\n\n  /**\n   * Evento che viene lanciato ogni volta che il dropdown viene aperto\n   */\n  @Output()\n  get onOpen(): EventEmitter<DropdownComponent> { return this._onOpen; }\n  set onOpen(value: EventEmitter<DropdownComponent>) { this._onOpen = value; }\n  private _onOpen = new EventEmitter<DropdownComponent>();\n\n  /**\n   * Evento che viene lanciato ogni volta che il dropdown viene chiuso\n   */\n  @Output()\n  get onClose(): EventEmitter<DropdownComponent> { return this._onClose; }\n  set onClose(value: EventEmitter<DropdownComponent>) { this._onClose = value; }\n  private _onClose = new EventEmitter<DropdownComponent>();\n\n  /**\n   * Evento che viene lanciato ogni volta che il dropdown viene aperto oppure chiuso\n   */\n  @Output()\n  get onToggle(): EventEmitter<DropdownComponent> { return this._onToggle; }\n  set onToggle(value: EventEmitter<DropdownComponent>) { this._onToggle = value; }\n  private _onToggle = new EventEmitter<DropdownComponent>();\n\n  @HostListener('document:click', ['$event.target'])\n  onClick(target) {\n    if (target === this._dropdownButton.nativeElement) {\n      this._toggle();\n    } else if (this.isOpen) {\n      this._close();\n    }\n  }\n\n  @HostListener('document:focusin', ['$event.target'])\n  onFocus(target) {\n    const isPartOfDropdown = (this._eleRef.nativeElement as HTMLElement).contains(target);\n    if (!isPartOfDropdown && this.isOpen) {\n      this._close();\n    }\n  }\n\n  get dropdownButtonClass() {\n    return `btn btn-${this.color} dropdown-toggle`;\n  }\n\n  constructor(private _eleRef: ElementRef) {\n\n  }\n\n  private _toggle() {\n    if (this._isOpen) {\n      this._close();\n    } else {\n      this._open();\n    }\n    this.onToggle.emit(this);\n  }\n\n  private _open() {\n    if (!this._isOpen) {\n      this._isOpen = true;\n      this._dropdownMenu.nativeElement.setAttribute(PLACEMENT_PROPERTY, PLACEMENT_VALUE);\n      this.onOpen.emit(this);\n    }\n  }\n\n  private _close() {\n    if (this._isOpen) {\n      this._isOpen = false;\n      this._dropdownMenu.nativeElement.removeAttribute(PLACEMENT_PROPERTY);\n      this.onClose.emit(this);\n    }\n  }\n\n}\n",constructorObj:{name:"constructor",description:"",args:[{name:"_eleRef",type:"ElementRef"}],line:118,jsdoctags:[{name:"_eleRef",type:"ElementRef",tagName:{text:"param"}}]},accessors:{isOpen:{name:"isOpen",getSignature:{name:"isOpen",type:"boolean",returnType:"boolean",line:31}},dark:{name:"dark",setSignature:{name:"dark",type:"void",args:[{name:"value",type:"boolean"}],returnType:"void",line:40,jsdoctags:[{name:"value",type:"boolean",tagName:{text:"param"}}]}},fullWidth:{name:"fullWidth",setSignature:{name:"fullWidth",type:"void",args:[{name:"value",type:"boolean"}],returnType:"void",line:49,jsdoctags:[{name:"value",type:"boolean",tagName:{text:"param"}}]}},color:{name:"color",setSignature:{name:"color",type:"void",args:[{name:"value",type:"any"}],returnType:"void",line:58,jsdoctags:[{name:"value",type:"any",tagName:{text:"param"}}]}},label:{name:"label",setSignature:{name:"label",type:"void",args:[{name:"value",type:"string"}],returnType:"void",line:72,jsdoctags:[{name:"value",type:"string",tagName:{text:"param"}}]}},onOpen:{name:"onOpen",setSignature:{name:"onOpen",type:"void",args:[{name:"value",type:""}],returnType:"void",line:80,jsdoctags:[{name:"value",type:"",tagName:{text:"param"}}]}},onClose:{name:"onClose",setSignature:{name:"onClose",type:"void",args:[{name:"value",type:""}],returnType:"void",line:88,jsdoctags:[{name:"value",type:"",tagName:{text:"param"}}]}},onToggle:{name:"onToggle",setSignature:{name:"onToggle",type:"void",args:[{name:"value",type:""}],returnType:"void",line:96,jsdoctags:[{name:"value",type:"",tagName:{text:"param"}}]}},dropdownButtonClass:{name:"dropdownButtonClass",getSignature:{name:"dropdownButtonClass",type:"",returnType:"",line:116}}},templateData:'<div class="dropdown" [class.show]="isOpen" [id]="id">\n  <button #dropdownButton [class]="dropdownButtonClass" \n    type="button" id="dropdownMenuButton"\n    aria-haspopup="true" [attr.aria-expanded]="isOpen">\n    {{label}}\n  </button>\n  <div #dropdownMenu class="dropdown-menu" aria-labelledby="dropdownMenuButton"\n    [class.dark]="dark" [class.full-width]="fullWidth" [class.show]="isOpen">\n    <div class="link-list-wrapper">\n      <ul class="link-list">\n        <ng-content></ng-content>\n      </ul>\n    </div>\n  </div>\n</div>\n'},{name:"DropdownDividerComponent",id:"component-DropdownDividerComponent-b8de426ec2d0b4fbbdb4bd3bd2f1bd98",file:"projects/design-angular-kit/src/lib/dropdown/dropdown-divider.component.ts",encapsulation:[],entryComponents:[],inputs:[],outputs:[],providers:[],selector:"it-dropdown-divider",styleUrls:["dropdown-divider.component.css"],styles:[],templateUrl:["./dropdown-divider.component.html"],viewProviders:[],inputsClass:[],outputsClass:[],propertiesClass:[],methodsClass:[],hostBindings:[],hostListeners:[],description:"",type:"component",sourceCode:"import { Component } from '@angular/core';\n\n@Component({\n  selector: 'it-dropdown-divider',\n  templateUrl: './dropdown-divider.component.html',\n  styleUrls: ['./dropdown-divider.component.css']\n})\nexport class DropdownDividerComponent {\n\n}\n",templateData:'<li>\n  <span class="divider"></span>\n</li>'},{name:"DropdownHeaderComponent",id:"component-DropdownHeaderComponent-cb1531bcae8c1ef2b2bdaf7ada490bbd",file:"projects/design-angular-kit/src/lib/dropdown/dropdown-header.component.ts",encapsulation:[],entryComponents:[],inputs:[],outputs:[],providers:[],selector:"it-dropdown-header",styleUrls:["dropdown-header.component.css"],styles:[],templateUrl:["./dropdown-header.component.html"],viewProviders:[],inputsClass:[],outputsClass:[],propertiesClass:[{name:"id",defaultValue:"`dropdown-header-${identifier++}`",type:"",optional:!1,description:"",line:11}],methodsClass:[],hostBindings:[],hostListeners:[],description:"",type:"component",sourceCode:"import { Component } from '@angular/core';\n\nlet identifier = 0;\n\n@Component({\n  selector: 'it-dropdown-header',\n  templateUrl: './dropdown-header.component.html',\n  styleUrls: ['./dropdown-header.component.css']\n})\nexport class DropdownHeaderComponent {\n  id = `dropdown-header-${identifier++}`;\n}\n",templateData:'<li [id]="id">\n  <h3>\n    <ng-content></ng-content>\n  </h3>\n</li>'},{name:"DropdownItemComponent",id:"component-DropdownItemComponent-842cdb058fe44854cf632b835cd0788b",file:"projects/design-angular-kit/src/lib/dropdown/dropdown-item.component.ts",encapsulation:[],entryComponents:[],inputs:[],outputs:[],providers:[],selector:"it-dropdown-item",styleUrls:["dropdown-item.component.css"],styles:[],templateUrl:["./dropdown-item.component.html"],viewProviders:[],inputsClass:[{name:"active",description:"<p>Se presente indica che l&#39;elemento viene renderizzato come elemento attivo.\nAccetta una espressione booleana o pu\xf2 essere usato come attributo senza valore</p>\n",line:31,type:"boolean"},{name:"disabled",description:"<p>Se presente indica che l&#39;elemento \xe8 disabilitato.\nAccetta una espressione booleana o pu\xf2 essere usato come attributo senza valore</p>\n",line:40,type:"boolean"},{name:"icon",description:"<p>La classe dell&#39;icona da usare prima o dopo del testo dell&#39;elemento del dropdown</p>\n",line:59,type:"string"},{name:"iconPosition",description:"<p>La posizione dell&#39;icona rispetto al testo dell&#39;elemento del dropdown.\nPu\xf2 assumere valori right o left.</p>\n",line:68,type:"any"},{name:"large",description:"<p>Se presente indica che il testo dell&#39;elemento viene renderizzato pi\xf9 grande.\nAccetta una espressione booleana o pu\xf2 essere usato come attributo senza valore</p>\n",line:51,type:"boolean"},{name:"link",description:"<p>Il link alla pagina verso cui andare al click sull&#39;elemento del dropdown</p>\n",line:22,type:"string"}],outputsClass:[],propertiesClass:[{name:"_active",defaultValue:"false",type:"",optional:!1,description:"",line:33,modifierKind:[112]},{name:"_disabled",defaultValue:"false",type:"",optional:!1,description:"",line:44,modifierKind:[112]},{name:"_icon",defaultValue:"undefined",type:"",optional:!1,description:"",line:61,modifierKind:[112]},{name:"_iconPosition",defaultValue:"ICON_POSITIONS.RIGHT",type:"",optional:!1,description:"",line:76,modifierKind:[112]},{name:"_large",defaultValue:"false",type:"",optional:!1,description:"",line:53,modifierKind:[112]},{name:"_link",defaultValue:"''",type:"string",optional:!1,description:"",line:24,modifierKind:[112]},{name:"id",defaultValue:"`dropdown-item-${identifier++}`",type:"",optional:!1,description:"",line:16}],methodsClass:[],hostBindings:[],hostListeners:[],description:"<p>Componente usata per visualizzare una voce di men\xf9 all&#39;interno di una dropdown</p>\n",type:"component",sourceCode:"import { Component, Input} from '@angular/core';\nimport { Util } from '../util/util';\nimport { IconPosition, ICON_POSITIONS } from '../models/IconPosition';\n\nlet identifier = 0;\n\n/**\n * Componente usata per visualizzare una voce di men\xf9 all'interno di una dropdown\n */\n@Component({\n  selector: 'it-dropdown-item',\n  templateUrl: './dropdown-item.component.html',\n  styleUrls: ['./dropdown-item.component.css']\n})\nexport class DropdownItemComponent {\n  id = `dropdown-item-${identifier++}`;\n\n  /**\n   * Il link alla pagina verso cui andare al click sull'elemento del dropdown\n   */\n  @Input()\n  get link(): string { return !this.disabled ? this._link : ''; }\n  set link(value: string) { this._link = value; }\n  private _link = '';\n\n  /**\n   * Se presente indica che l'elemento viene renderizzato come elemento attivo.\n   * Accetta una espressione booleana o pu\xf2 essere usato come attributo senza valore\n   */\n  @Input()\n  get active(): boolean { return this._active; }\n  set active(value: boolean) { this._active = Util.coerceBooleanProperty(value); }\n  private _active = false;\n\n  /**\n   * Se presente indica che l'elemento \xe8 disabilitato.\n   * Accetta una espressione booleana o pu\xf2 essere usato come attributo senza valore\n   */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = Util.coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  /**\n   * Se presente indica che il testo dell'elemento viene renderizzato pi\xf9 grande.\n   * Accetta una espressione booleana o pu\xf2 essere usato come attributo senza valore\n   */\n  @Input()\n  get large(): boolean { return this._large; }\n  set large(value: boolean) { this._large = Util.coerceBooleanProperty(value); }\n  private _large = false;\n\n  /**\n   * La classe dell'icona da usare prima o dopo del testo dell'elemento del dropdown\n   */\n  @Input()\n  get icon(): string { return this._icon; }\n  set icon(value: string) { this._icon = value; }\n  private _icon = undefined;\n\n  /**\n   * La posizione dell'icona rispetto al testo dell'elemento del dropdown.\n   * Pu\xf2 assumere valori right o left.\n   */\n  @Input()\n  get iconPosition(): any { return this._iconPosition; }\n  set iconPosition(value: any) {\n    if (IconPosition.is(value)) {\n      this._iconPosition = value;\n    } else {\n      this._iconPosition = ICON_POSITIONS.RIGHT;\n    }\n  }\n  private _iconPosition = ICON_POSITIONS.RIGHT;\n\n  get dropdownItemClass() {\n    return `list-item ${this.iconPosition}-icon`;\n  }\n\n  get iconClass() {\n    return `${this.icon} ${this.iconPosition}`;\n  }\n\n}\n",accessors:{link:{name:"link",setSignature:{name:"link",type:"void",args:[{name:"value",type:"string"}],returnType:"void",line:23,jsdoctags:[{name:"value",type:"string",tagName:{text:"param"}}]}},active:{name:"active",setSignature:{name:"active",type:"void",args:[{name:"value",type:"boolean"}],returnType:"void",line:32,jsdoctags:[{name:"value",type:"boolean",tagName:{text:"param"}}]}},disabled:{name:"disabled",setSignature:{name:"disabled",type:"void",args:[{name:"value",type:"boolean"}],returnType:"void",line:41,jsdoctags:[{name:"value",type:"boolean",tagName:{text:"param"}}]}},large:{name:"large",setSignature:{name:"large",type:"void",args:[{name:"value",type:"boolean"}],returnType:"void",line:52,jsdoctags:[{name:"value",type:"boolean",tagName:{text:"param"}}]}},icon:{name:"icon",setSignature:{name:"icon",type:"void",args:[{name:"value",type:"string"}],returnType:"void",line:60,jsdoctags:[{name:"value",type:"string",tagName:{text:"param"}}]}},iconPosition:{name:"iconPosition",setSignature:{name:"iconPosition",type:"void",args:[{name:"value",type:"any"}],returnType:"void",line:69,jsdoctags:[{name:"value",type:"any",tagName:{text:"param"}}]}},dropdownItemClass:{name:"dropdownItemClass",getSignature:{name:"dropdownItemClass",type:"",returnType:"",line:78}},iconClass:{name:"iconClass",getSignature:{name:"iconClass",type:"",returnType:"",line:82}}},templateData:'<li [id]="id">\n  <a [attr.href]="link"\n    [attr.tabindex]="this.disabled ? -1 : 0"\n    [class]="dropdownItemClass"\n    [ngClass]="{\n      \'large\' : large, \n      \'active\' : active,\n      \'disabled\' : disabled,\n      \'disabled-item-link\' : disabled\n    }">\n    <i [class]="iconClass" aria-hidden="true" *ngIf="icon && iconPosition === \'left\'"></i>\n    <span>\n      <ng-content></ng-content>\n    </span>\n    <i [class]="iconClass" aria-hidden="true" *ngIf="icon && iconPosition === \'right\'"></i>\n  </a>\n</li>'},{name:"PopoverComponent",id:"component-PopoverComponent-d576eec209239c43a402486b384c55a8",file:"projects/design-angular-kit/src/lib/popover/popover.component.ts",changeDetection:"ChangeDetectionStrategy.OnPush",encapsulation:[],entryComponents:[],inputs:[],outputs:[],providers:[],selector:"it-popover-window",styleUrls:["popover.component.css"],styles:[],templateUrl:["./popover.component.html"],viewProviders:[],inputsClass:[{name:"hidden",defaultValue:"false",line:34},{name:"id",line:33,type:"string"},{name:"placement",defaultValue:"'right'",line:23,type:"Placement"},{name:"title",line:26}],outputsClass:[],propertiesClass:[{name:"_title",type:"string",optional:!1,description:"",line:31,modifierKind:[112]}],methodsClass:[{name:"applyPlacement",args:[{name:"_placement",type:"Placement"}],optional:!1,returnType:"void",typeParameters:[],line:46,jsdoctags:[{name:"_placement",type:"Placement",tagName:{text:"param"}}]},{name:"setNewContent",args:[{name:"content",type:"string | TemplateRef<any>"},{name:"context",type:"any",optional:!0}],optional:!1,returnType:"void",typeParameters:[],line:59,jsdoctags:[{name:"content",type:"string | TemplateRef<any>",tagName:{text:"param"}},{name:"context",type:"any",optional:!0,tagName:{text:"param"}}]}],hostBindings:[{name:"attr.role",defaultValue:"'tooltip'",line:36},{name:"class",line:37,type:"string"}],hostListeners:[],description:"",type:"component",sourceCode:"import {\n  Component, ChangeDetectionStrategy,\n  ElementRef, Renderer2, Input, HostBinding,\n  ChangeDetectorRef, TemplateRef, ViewContainerRef\n} from '@angular/core';\nimport { Placement } from './positioning';\nimport { ContentRef } from './popup';\n\n@Component({\n  selector: 'it-popover-window',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: './popover.component.html',\n  styleUrls: ['./popover.component.css']\n})\nexport class PopoverComponent {\n  @Input() placement: Placement = 'right';\n\n  @Input()\n  get title() { return this._title; }\n  set title(value: string) {\n    this._title = value;\n    this._changeDetectorRef.detectChanges();\n  }\n  private _title: string;\n\n  @Input() @HostBinding('id') id: string;\n  @Input() @HostBinding('hidden') hidden = false;\n\n  @HostBinding('attr.role') role = 'tooltip';\n  @HostBinding('class') get myCssClass(): string {\n    return 'popover bs-popover-' + this.placement.split('-')[0] + ' bs-popover-' + this.placement;\n  }\n\n  constructor(\n    private _element: ElementRef<HTMLElement>, private _renderer: Renderer2,\n    private _changeDetectorRef: ChangeDetectorRef, private _viewContainerRef: ViewContainerRef\n  ) {}\n\n  applyPlacement(_placement: Placement) {\n    // Rimuovi le classi della posizione precedente\n    this._renderer.removeClass(this._element.nativeElement, 'bs-popover-' + this.placement.toString().split('-')[0]);\n    this._renderer.removeClass(this._element.nativeElement, 'bs-popover-' + this.placement.toString());\n\n    // Imposta la nuova posizione\n    this.placement = _placement;\n\n    // Applica le classi della nuova posizione\n    this._renderer.addClass(this._element.nativeElement, 'bs-popover-' + this.placement.toString().split('-')[0]);\n    this._renderer.addClass(this._element.nativeElement, 'bs-popover-' + this.placement.toString());\n  }\n\n  setNewContent(content: string | TemplateRef<any>, context?: any) {\n    const contentElement = this._element.nativeElement.querySelector('.popover-body');\n\n    let newContent: ContentRef;\n    if (!content) {\n      newContent = new ContentRef([]);\n    } else if (content instanceof TemplateRef) {\n      const viewRef = this._viewContainerRef.createEmbeddedView(<TemplateRef<PopoverComponent>>content, context);\n      newContent = new ContentRef([viewRef.rootNodes], viewRef);\n    } else {\n      newContent = new ContentRef([[this._renderer.createText(`${content}`)]]);\n    }\n\n    const childNodes = contentElement.childNodes;\n    for (let i = 0; i < childNodes.length; i++) {\n      this._renderer.removeChild(contentElement, childNodes[i]);\n    }\n\n    newContent.nodes.forEach(newNode => {\n      newNode.forEach(newChild => this._renderer.appendChild(contentElement, newChild));\n    });\n  }\n}\n",constructorObj:{name:"constructor",description:"",args:[{name:"_element",type:"ElementRef<HTMLElement>"},{name:"_renderer",type:"Renderer2"},{name:"_changeDetectorRef",type:"ChangeDetectorRef"},{name:"_viewContainerRef",type:"ViewContainerRef"}],line:39,jsdoctags:[{name:"_element",type:"ElementRef<HTMLElement>",tagName:{text:"param"}},{name:"_renderer",type:"Renderer2",tagName:{text:"param"}},{name:"_changeDetectorRef",type:"ChangeDetectorRef",tagName:{text:"param"}},{name:"_viewContainerRef",type:"ViewContainerRef",tagName:{text:"param"}}]},accessors:{title:{name:"title",setSignature:{name:"title",type:"void",args:[{name:"value",type:"string"}],returnType:"void",line:27,jsdoctags:[{name:"value",type:"string",tagName:{text:"param"}}]}}},templateData:'<div class="arrow"></div>\n<h3 class="popover-header">{{title}}</h3>\n<div class="popover-body">\n  <ng-content></ng-content>\n</div>'},{name:"ProgressBarComponent",id:"component-ProgressBarComponent-4b50cab345688be6ce20081228e12c40",file:"projects/design-angular-kit/src/lib/progress-bar/progress-bar.component.ts",changeDetection:"ChangeDetectionStrategy.OnPush",encapsulation:[],entryComponents:[],inputs:[],outputs:[],providers:[],selector:"it-progress-bar",styleUrls:["progress-bar.component.css"],styles:[],templateUrl:["./progress-bar.component.html"],viewProviders:[],inputsClass:[{name:"color",description:"<p>Il colore della barra di avanzamento.</p>\n",line:77,type:"any"},{name:"height",description:"<p>L&#39;altezza della barra di avanzamento.</p>\n",line:37,type:"number"},{name:"label",description:"<p>L&#39;etichetta della barra di avanzamento.</p>\n",line:69,type:"string"},{name:"max",description:"<p>Il valore massimo della barra di avanzamento.</p>\n",line:53,type:"number"},{name:"min",description:"<p>Il valore minimo della barra di avanzamento.</p>\n",line:45,type:"number"},{name:"value",description:"<p>L&#39;attuale valore della barra di avanzamento.</p>\n",line:61,type:"number"}],outputsClass:[],propertiesClass:[{name:"_color",defaultValue:"THEME_COLORS.PRIMARY",type:"",optional:!1,description:"",line:87,modifierKind:[112]},{name:"_height",defaultValue:"ProgressBarComponent.PROGRESS_BAR_DEFAULT_HEIGHT",type:"",optional:!1,description:"",line:39,modifierKind:[112]},{name:"_label",defaultValue:"ProgressBarComponent.PROGRESS_BAR_DEFAULT_LABEL",type:"",optional:!1,description:"",line:71,modifierKind:[112]},{name:"_max",defaultValue:"ProgressBarComponent.PROGRESS_BAR_DEFAULT_MAX",type:"",optional:!1,description:"",line:55,modifierKind:[112]},{name:"_min",defaultValue:"ProgressBarComponent.PROGRESS_BAR_DEFAULT_MIN",type:"",optional:!1,description:"",line:47,modifierKind:[112]},{name:"_value",defaultValue:"ProgressBarComponent.PROGRESS_BAR_DEFAULT_VALUE",type:"",optional:!1,description:"",line:63,modifierKind:[112]},{name:"PROGRESS_BAR_DEFAULT_HEIGHT",defaultValue:"20",type:"number",optional:!1,description:"",line:28,modifierKind:[115,132]},{name:"PROGRESS_BAR_DEFAULT_LABEL",defaultValue:"''",type:"string",optional:!1,description:"",line:29,modifierKind:[115,132]},{name:"PROGRESS_BAR_DEFAULT_MAX",defaultValue:"100",type:"number",optional:!1,description:"",line:26,modifierKind:[115,132]},{name:"PROGRESS_BAR_DEFAULT_MIN",defaultValue:"0",type:"number",optional:!1,description:"",line:25,modifierKind:[115,132]},{name:"PROGRESS_BAR_DEFAULT_VALUE",defaultValue:"0",type:"number",optional:!1,description:"",line:27,modifierKind:[115,132]},{name:"progressbarId",defaultValue:"`it-progress-bar-${progressbarId++}`",type:"",optional:!1,description:"",line:31}],methodsClass:[{name:"pgClass",args:[],optional:!1,returnType:"{ 'progress-bar': boolean; }",typeParameters:[],line:97},{name:"pgStyle",args:[],optional:!1,returnType:"{ 'width': string; }",typeParameters:[],line:93},{name:"valuePercentage",args:[],optional:!1,returnType:"number",typeParameters:[],line:89}],hostBindings:[],hostListeners:[],description:"<p>Una barra di avanzamento con design bootstrap italia.</p>\n",type:"component",sourceCode:"import {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ThemeColor, THEME_COLORS } from '../models/ThemeColor';\n\nlet progressbarId = 0;\n\n/**\n * Una barra di avanzamento con design bootstrap italia.\n */\n@Component({\n  selector: 'it-progress-bar',\n  templateUrl: './progress-bar.component.html',\n  styleUrls: ['./progress-bar.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ProgressBarComponent {\n\n  public static readonly PROGRESS_BAR_DEFAULT_MIN = 0;\n  public static readonly PROGRESS_BAR_DEFAULT_MAX = 100;\n  public static readonly PROGRESS_BAR_DEFAULT_VALUE = 0;\n  public static readonly PROGRESS_BAR_DEFAULT_HEIGHT = 20;\n  public static readonly PROGRESS_BAR_DEFAULT_LABEL = '';\n\n  progressbarId = `it-progress-bar-${progressbarId++}`;\n\n  /**\n   * L'altezza della barra di avanzamento.\n   */\n  @Input()\n  get height(): number { return this._height; }\n  set height(v: number) { this._height = v; }\n  private _height = ProgressBarComponent.PROGRESS_BAR_DEFAULT_HEIGHT;\n\n  /**\n   * Il valore minimo della barra di avanzamento.\n   */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) { this._min = Math.round(v); }\n  private _min = ProgressBarComponent.PROGRESS_BAR_DEFAULT_MIN;\n\n  /**\n   * Il valore massimo della barra di avanzamento.\n   */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) { this._max = Math.round(v); }\n  private _max = ProgressBarComponent.PROGRESS_BAR_DEFAULT_MAX;\n\n  /**\n   * L'attuale valore della barra di avanzamento.\n   */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = Math.min(Math.max(v, this._min), this._max); }\n  private _value = ProgressBarComponent.PROGRESS_BAR_DEFAULT_VALUE;\n\n  /**\n   * L'etichetta della barra di avanzamento.\n   */\n  @Input()\n  get label(): string { return this._label; }\n  set label(v: string) { this._label = v; }\n  private _label = ProgressBarComponent.PROGRESS_BAR_DEFAULT_LABEL;\n\n  /**\n   * Il colore della barra di avanzamento.\n   */\n  @Input()\n  get color(): any {\n    return this._color;\n  }\n  set color(value: any) {\n    if (ThemeColor.is(value)) {\n      this._color = value;\n    } else {\n      this._color = THEME_COLORS.PRIMARY;\n    }\n  }\n  private _color = THEME_COLORS.PRIMARY;\n\n  valuePercentage(): number {\n    return ((this.value - this.min) * 100) / (this.max - this.min);\n  }\n\n  pgStyle() {\n    return { 'width' : this.valuePercentage() + '%' };\n  }\n\n  pgClass() {\n    const progressbarClass = { 'progress-bar' : true };\n    if (this.color) {\n      progressbarClass[`bg-${this.color}`] = true;\n    }\n    return progressbarClass;\n  }\n\n  constructor() { }\n\n}\n",constructorObj:{name:"constructor",description:"",args:[],line:103},accessors:{height:{name:"height",setSignature:{name:"height",type:"void",args:[{name:"v",type:"number"}],returnType:"void",line:38,jsdoctags:[{name:"v",type:"number",tagName:{text:"param"}}]}},min:{name:"min",setSignature:{name:"min",type:"void",args:[{name:"v",type:"number"}],returnType:"void",line:46,jsdoctags:[{name:"v",type:"number",tagName:{text:"param"}}]}},max:{name:"max",setSignature:{name:"max",type:"void",args:[{name:"v",type:"number"}],returnType:"void",line:54,jsdoctags:[{name:"v",type:"number",tagName:{text:"param"}}]}},value:{name:"value",setSignature:{name:"value",type:"void",args:[{name:"v",type:"number"}],returnType:"void",line:62,jsdoctags:[{name:"v",type:"number",tagName:{text:"param"}}]}},label:{name:"label",setSignature:{name:"label",type:"void",args:[{name:"v",type:"string"}],returnType:"void",line:70,jsdoctags:[{name:"v",type:"string",tagName:{text:"param"}}]}},color:{name:"color",setSignature:{name:"color",type:"void",args:[{name:"value",type:"any"}],returnType:"void",line:80,jsdoctags:[{name:"value",type:"any",tagName:{text:"param"}}]}}},templateData:'<div class="progress" [ngStyle]="{\'height\': height + \'px\'}">\n  <div role="progressbar" [id]="progressbarId" [ngClass]="pgClass()" [ngStyle]="pgStyle()"\n    [attr.aria-valuenow]="value" [attr.aria-valuemin]="min" [attr.aria-valuemax]="max" >\n    {{label}}\n  </div>\n</div>'},{name:"RadioButtonComponent",id:"component-RadioButtonComponent-f64fd0c7b01c8d4779c6a1f6316e64e0",file:"projects/design-angular-kit/src/lib/radio/radio.component.ts",changeDetection:"ChangeDetectionStrategy.OnPush",encapsulation:[],entryComponents:[],exportAs:"itRadioButton",inputs:[],outputs:[],providers:[],selector:"it-radio-button",styleUrls:["radio.component.scss"],styles:[],templateUrl:["./radio.component.html"],viewProviders:[],inputsClass:[{name:"checked",description:"<p>se il radio button \xe8 checked. </p>\n",line:215,type:"boolean"},{name:"disabled",description:"<p>Se il radio button \xe8 disabled. </p>\n",line:253,type:"boolean"},{name:"label",description:"<p>L&#39;etichetta delradio button. </p>\n",line:211,type:"string"},{name:"name",description:"<p>Attributo &#39;name&#39; usato per raggruppare i radio button per un&#39;unica selezione. </p>\n",line:207,type:"string"},{name:"value",description:"<p>Il valore di questo radio button. </p>\n",line:236,type:"any"}],outputsClass:[{name:"change",defaultValue:"new EventEmitter<RadioChange>()",description:"<p>Evento emesso quando il valore <code>checked</code> del radio button cambia.</p>\n",line:267,type:"EventEmitter<RadioChange>"}],propertiesClass:[{name:"_checked",defaultValue:"false",type:"",optional:!1,description:"<p>Se il radio button \xe8 checked. </p>\n",line:273,modifierKind:[112]},{name:"_disabled",type:"boolean",optional:!1,description:"<p>Se il radio button \xe8 disabled. </p>\n",line:276,modifierKind:[112]},{name:"_removeUniqueSelectionListener",defaultValue:"() => { }",type:"function",optional:!1,description:"",line:281,modifierKind:[112]},{name:"_value",defaultValue:"null",type:"any",optional:!1,description:"<p>il valore assegnato al radio button. </p>\n",line:279,modifierKind:[112]},{name:"id",defaultValue:"`radio-${identifier++}`",type:"",optional:!1,description:"",line:204},{name:"radioGroup",type:"RadioGroupDirective",optional:!1,description:"<p>Il radio group padre. Pu\xf2 essere presente o meno. </p>\n",line:270}],methodsClass:[{name:"_emitChangeEvent",args:[],optional:!1,returnType:"void",typeParameters:[],line:318,modifierKind:[112]},{name:"_markForCheck",args:[],optional:!1,returnType:"void",typeParameters:[],line:301,description:"<p>Segna il radio button come da controllare per la change detection.</p>\n"},{name:"_onInputChange",args:[{name:"event",type:"Event"}],optional:!1,returnType:"void",typeParameters:[],line:322,jsdoctags:[{name:"event",type:"Event",tagName:{text:"param"}}]},{name:"ngOnDestroy",args:[],optional:!1,returnType:"void",typeParameters:[],line:314},{name:"ngOnInit",args:[],optional:!1,returnType:"void",typeParameters:[],line:305}],hostBindings:[],hostListeners:[],description:"<p>Un radio button con design bootstrap italia. Supporta tutte le funzionalit\xe0 di una radio HTML5,\ned espone una API simile. Una <code>&lt;it-radio-button&gt;</code> pu\xf2 essere checked, unchecked, o disabled.</p>\n",type:"component",sourceCode:"import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  forwardRef,\n  ChangeDetectionStrategy,\n  AfterContentInit,\n  Directive,\n  ContentChildren,\n  QueryList,\n  OnInit,\n  OnDestroy,\n  Optional,\n  HostBinding\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { UniqueSelectionDispatcher } from './unique-selection-dispatcher';\n\nlet identifier = 0;\n\nfunction _coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n\nexport class RadioChange {\n  constructor(\n    public source: RadioButtonComponent,\n    public value: any\n  ) { }\n}\n\n@Directive({\n  selector: 'it-radio-group', // tslint:disable-line\n  exportAs: 'itRadioGroup',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioGroupDirective),\n    multi: true\n  }]\n})\nexport class RadioGroupDirective implements AfterContentInit, ControlValueAccessor {\n\n  @HostBinding('attr.role') role = 'radiogroup';\n\n  /**\n   * Il valore selezionato per il gruppo. Dovrebbe essere uguale al valore del radio button selezionato se\n   * *esiste* un radio button con un valore corrispondente. Se *non esiste* un radio button corrispondente\n   * questo valore persiste ed \xe8 applicato nel caso in cui un nuovo radio button viene aggiunto con il valore\n   * corrispondente.\n   */\n  private _value: any = null;\n\n  /** L'attributo HTML name da applicare ai radio button in questo gruppo */\n  private _name = `it-radio-group-${identifier++}`;\n\n  /** Il radio button attualmente selezionato. */\n  private _selected: RadioButtonComponent | null = null;\n\n  /** se `value` \xe8 stato settato al suo valore iniziale. */\n  private _isInitialized = false;\n\n  /** Se il radio group \xe8 disabilitato. */\n  private _disabled = false;\n\n\n\n  /**\n   * Evento emesso quando il valore del gruppo cambia.\n   * Gli eventi di change sono emessi soltanto quando il valore cambia a causa dell'interazione dell'utente\n   * con il radio button (stesso comportamento di `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<RadioChange> = new EventEmitter<RadioChange>();\n\n  /** radio buttons figli. */\n  @ContentChildren(forwardRef(() => RadioButtonComponent), { descendants: true }) _radios: QueryList<RadioButtonComponent>; // tslint:disable-line\n\n  /** Il metodo da chiamare per aggiornare ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => { };\n\n  onTouched: () => any = () => { };\n\n  /** Nome del gruppo di radio button. Tutti i radio button all'interno del gruppo avranno questo nome. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Valore del radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Il radio button selezionato. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: RadioButtonComponent | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Se il gruppo \xe8 disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = _coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef\n  ) { }\n\n  /**\n   * Inizializza le propriet\xe0 quando il contenuto dei figli\xe8 disponibile.\n   * Questo permette di propagare gli attributi rilevanti ai radio buttons associati.\n   */\n  ngAfterContentInit(): void {\n    this._isInitialized = true;\n  }\n\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Aggiorna il radio button `selected` a seconda del suo _value. */\n  private _updateSelectedRadioFromValue(): void {\n    this._selected = null;\n    this._radios.forEach(radio => {\n      radio.checked = this.value === radio.value;\n      if (radio.checked) {\n        this._selected = radio;\n      }\n    });\n  }\n\n  /** Invia l'evento change con la selezione corrente e il valore del gruppo. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new RadioChange(this._selected, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  writeValue(value: any): void {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  registerOnChange(fn: (value: any) => void): void {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n}\n\n/**\n * Un radio button con design bootstrap italia. Supporta tutte le funzionalit\xe0 di una radio HTML5,\n * ed espone una API simile. Una `<it-radio-button>` pu\xf2 essere checked, unchecked, o disabled.\n */\n@Component({\n  selector: 'it-radio-button',\n  templateUrl: './radio.component.html',\n  styleUrls: ['./radio.component.scss'],\n  exportAs: 'itRadioButton',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RadioButtonComponent implements OnInit, OnDestroy {\n\n  id = `radio-${identifier++}`;\n\n  /** Attributo 'name' usato per raggruppare i radio button per un'unica selezione. */\n  @Input() name: string;\n\n  /** L'etichetta delradio button. */\n  @Input()\n  label: string;\n\n  /** se il radio button \xe8 checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = _coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Il valore di questo radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Se il radio button \xe8 disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = !!value;\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /**\n   * Evento emesso quando il valore `checked` del radio button cambia.\n   */\n  @Output() readonly change: EventEmitter<RadioChange> = new EventEmitter<RadioChange>();\n\n  /** Il radio group padre. Pu\xf2 essere presente o meno. */\n  radioGroup: RadioGroupDirective;\n\n  /** Se il radio button \xe8 checked. */\n  private _checked = false;\n\n  /** Se il radio button \xe8 disabled. */\n  private _disabled: boolean;\n\n  /** il valore assegnato al radio button. */\n  private _value: any = null;\n\n  private _removeUniqueSelectionListener: () => void = () => { };\n\n  constructor(\n    @Optional() radioGroup: RadioGroupDirective,\n    private _changeDetector: ChangeDetectorRef,\n    private _radioDispatcher: UniqueSelectionDispatcher\n  ) {\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /**\n   * Segna il radio button come da controllare per la change detection.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit(): void {\n    if (this.radioGroup) {\n      // Se il radio button \xe8 all'interno di un gruppo, determina se deve essere selezionato\n      this.checked = this.radioGroup.value === this._value;\n      // Copia il `name` del radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngOnDestroy() {\n    this._removeUniqueSelectionListener();\n  }\n\n  private _emitChangeEvent(): void {\n    this.change.emit(new RadioChange(this, this._value));\n  }\n\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n}\n",constructorObj:{name:"constructor",description:"",args:[{name:"radioGroup",type:"RadioGroupDirective"},{name:"_changeDetector",type:"ChangeDetectorRef"},{name:"_radioDispatcher",type:"UniqueSelectionDispatcher"}],line:281,jsdoctags:[{name:"radioGroup",type:"RadioGroupDirective",tagName:{text:"param"}},{name:"_changeDetector",type:"ChangeDetectorRef",tagName:{text:"param"}},{name:"_radioDispatcher",type:"UniqueSelectionDispatcher",tagName:{text:"param"}}]},implements:["OnInit","OnDestroy"],accessors:{checked:{name:"checked",setSignature:{name:"checked",type:"void",args:[{name:"value",type:"boolean"}],returnType:"void",line:216,jsdoctags:[{name:"value",type:"boolean",tagName:{text:"param"}}]}},value:{name:"value",setSignature:{name:"value",type:"void",args:[{name:"value",type:"any"}],returnType:"void",line:237,jsdoctags:[{name:"value",type:"any",tagName:{text:"param"}}]}},disabled:{name:"disabled",setSignature:{name:"disabled",type:"void",args:[{name:"value",type:"boolean"}],returnType:"void",line:256,jsdoctags:[{name:"value",type:"boolean",tagName:{text:"param"}}]}}},templateData:'<div class="form-check">\n  <input type="radio"\n    [id]="id"\n    [checked]="checked"\n    [disabled]="disabled"\n    [attr.name]="name"\n    (change)="_onInputChange($event)">\n  <label\n    [attr.for]="id">{{label}}</label>\n</div>\n'},{name:"TabComponent",id:"component-TabComponent-8806f7530f06112669b5d54879564957",file:"projects/design-angular-kit/src/lib/tabs/tab.component.ts",changeDetection:"ChangeDetectionStrategy.OnPush",encapsulation:["ViewEncapsulation.None"],entryComponents:[],exportAs:"itTab",inputs:[],outputs:[],providers:[],selector:"it-tab",styleUrls:["tab.component.scss"],styles:[],templateUrl:["./tab.component.html"],viewProviders:[],inputsClass:[{name:"aria-label",description:"<p>Aria label del tab. </p>\n",line:33,type:"string"},{name:"aria-labelledby",description:"<p>Riferimento all&#39;elemento dal quale il tab \xe8 etichettato.\nViene resettato se <code>aria-label</code> \xe8 impostato.</p>\n",line:39,type:"string"},{name:"disabled",description:"<p>Se la tab \xe8 disabilitata. </p>\n",line:43,type:"boolean"},{name:"icon",defaultValue:"null",description:"<p>La stringa rappresentante l&#39;icona da utilizzare nel titolo della tab. Es. <code>it-file</code></p>\n",line:52,type:"string | null"},{name:"label",defaultValue:"''",description:"<p>Testo della tab. </p>\n",line:30,type:"string"}],outputsClass:[],propertiesClass:[{name:"_disableChange",defaultValue:"new Subject<void>()",type:"",optional:!1,description:"<p>Emette un evento ogni volta che l&#39;attributo disabled cambia </p>\n",line:58,modifierKind:[132]},{name:"_disabled",defaultValue:"false",type:"",optional:!1,description:"",line:47,modifierKind:[112]},{name:"_implicitContent",type:"TemplateRef<any>",optional:!1,description:"",line:71,decorators:[{name:"ViewChild"}]},{name:"_labelChange",defaultValue:"new Subject<void>()",type:"",optional:!1,description:"<p>Emette un evento ogni volta che la label cambia. </p>\n",line:55,modifierKind:[132]},{name:"isActive",defaultValue:"false",type:"",optional:!1,description:"<p>Se il tab \xe8 attivo.</p>\n",line:69},{name:"position",defaultValue:"null",type:"number | null",optional:!1,description:"<p>La posizione relativa della tab dove 0 rappresenta il centro, i negativi sono a sinistra\ne i positivi sono a destra.</p>\n",line:64}],methodsClass:[{name:"ngOnChanges",args:[{name:"changes",type:"SimpleChanges"}],optional:!1,returnType:"void",typeParameters:[],line:78,jsdoctags:[{name:"changes",type:"SimpleChanges",tagName:{text:"param"}}]},{name:"ngOnDestroy",args:[],optional:!1,returnType:"void",typeParameters:[],line:73}],hostBindings:[],hostListeners:[],description:"<p>Un componente tab con design bootstrap italia. Indica la singola tab di un insieme di tab.\nUtilizzabile con il tag <code>&lt;it-tab&gt;</code> all&#39;interno di un tag <code>&lt;it-tab-group&gt;</code>.</p>\n",type:"component",sourceCode:"import {\n  Component,\n  OnDestroy,\n  OnChanges,\n  Input,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Util } from '../util/util';\n\n/**\n * Un componente tab con design bootstrap italia. Indica la singola tab di un insieme di tab.\n * Utilizzabile con il tag `<it-tab>` all'interno di un tag `<it-tab-group>`.\n */\n@Component({\n  selector: 'it-tab',\n  exportAs: 'itTab',\n  templateUrl: './tab.component.html',\n  styleUrls: ['./tab.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class TabComponent implements OnChanges, OnDestroy {\n\n  /** Testo della tab. */\n  @Input() label: string = ''; // tslint:disable-line\n\n  /** Aria label del tab. */\n  @Input('aria-label') ariaLabel: string; // tslint:disable-line\n\n  /**\n   * Riferimento all'elemento dal quale il tab \xe8 etichettato.\n   * Viene resettato se `aria-label` \xe8 impostato.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string; // tslint:disable-line\n\n  /** Se la tab \xe8 disabilitata. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = Util.coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  /**\n   * La stringa rappresentante l'icona da utilizzare nel titolo della tab. Es. `it-file`\n   */\n  @Input() icon: string | null = null;\n\n  /** Emette un evento ogni volta che la label cambia. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emette un evento ogni volta che l'attributo disabled cambia */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * La posizione relativa della tab dove 0 rappresenta il centro, i negativi sono a sinistra\n   * e i positivi sono a destra.\n   */\n  position: number | null = null;\n\n  /**\n   * Se il tab \xe8 attivo.\n   */\n  isActive = false;\n\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('label')\n        || changes.hasOwnProperty('ariaLabel')\n        || changes.hasOwnProperty('ariaLabelledby')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n}\n",implements:["OnChanges","OnDestroy"],accessors:{disabled:{name:"disabled",setSignature:{name:"disabled",type:"void",args:[{name:"value",type:""}],returnType:"void",line:44,jsdoctags:[{name:"value",type:"",tagName:{text:"param"}}]}}},templateData:"<ng-template><ng-content></ng-content></ng-template>\n"},{name:"TabGroupComponent",id:"component-TabGroupComponent-d31b47ec794f20784ea8a5d89c7fb2d1",file:"projects/design-angular-kit/src/lib/tabs/tab-group.component.ts",changeDetection:"ChangeDetectionStrategy.OnPush",encapsulation:["ViewEncapsulation.None"],entryComponents:[],exportAs:"itTabGroup",inputs:[],outputs:[],providers:[],selector:"it-tab-group",styleUrls:["tab-group.component.scss"],styles:[],templateUrl:["./tab-group.component.html"],viewProviders:[],inputsClass:[{name:"dark",description:"<p>Se il tab-group ha un tema scuro</p>\n",line:77,type:"boolean"},{name:"pill",description:"<p>Se le tab sono formattate come pill. </p>\n",line:58,type:"boolean"},{name:"selectedIndex",description:"<p>L&#39;indice della tab attiva. </p>\n",line:67,type:"number | null"}],outputsClass:[{name:"selectedIndexChange",defaultValue:"new EventEmitter<number>()",description:"<p>abilita il supporto al data-binding bidirezionale <code>[(selectedIndex)]</code> </p>\n",line:84,type:"EventEmitter<number>"},{name:"selectedTabChange",defaultValue:"new EventEmitter<TabChangeEvent>(true)",description:"<p>emesso quando la selezione del tab cambia. </p>\n",line:87,type:"EventEmitter<TabChangeEvent>"}],propertiesClass:[{name:"_dark",defaultValue:"false",type:"",optional:!1,description:"",line:81,modifierKind:[112]},{name:"_groupId",type:"number",optional:!1,description:"",line:90,modifierKind:[112]},{name:"_indexToSelect",defaultValue:"0",type:"number | null",optional:!1,description:"<p>L&#39;indice del tab che dovrebbe essere selezionato dopo che il contenuto e&#39; stato controllato </p>\n",line:48,modifierKind:[112]},{name:"_isPill",defaultValue:"false",type:"",optional:!1,description:"",line:62,modifierKind:[112]},{name:"_selectedIndex",defaultValue:"null",type:"number | null",optional:!1,description:"",line:71,modifierKind:[112]},{name:"_tabLabelSubscription",defaultValue:"Subscription.EMPTY",type:"",optional:!1,description:"<p>Subscription ai cambiamenti alle label dei tab. </p>\n",line:54,modifierKind:[112]},{name:"_tabs",type:"QueryList<TabComponent>",optional:!1,description:"",line:45,decorators:[{name:"ContentChildren"}]},{name:"_tabsSubscription",defaultValue:"Subscription.EMPTY",type:"",optional:!1,description:"<p>Subscription all&#39;aggiunta e rimozione di tab. </p>\n",line:51,modifierKind:[112]}],methodsClass:[{name:"_clampTabIndex",args:[{name:"index",type:"number | null"}],optional:!1,returnType:"number",typeParameters:[],line:196,description:"<p>fissa l&#39;indice tra 0 e la dimensione dei tab. </p>\n",modifierKind:[112],jsdoctags:[{name:"index",type:"number | null",tagName:{text:"param"}}]},{name:"_createChangeEvent",args:[{name:"index",type:"number"}],optional:!1,returnType:"TabChangeEvent",typeParameters:[],line:169,modifierKind:[112],jsdoctags:[{name:"index",type:"number",tagName:{text:"param"}}]},{name:"_getTabContentId",args:[{name:"i",type:"number"}],optional:!1,returnType:"string",typeParameters:[],line:206,description:"<p>ritorna un id univoco per ogni elemento di contenuto del tab </p>\n",jsdoctags:[{name:"i",type:"number",tagName:{text:"param"}}]},{name:"_getTabIndex",args:[{name:"tab",type:"TabComponent"},{name:"idx",type:"number"}],optional:!1,returnType:"number | null",typeParameters:[],line:211,description:"<p>restituisce il tabIndex del tab. </p>\n",jsdoctags:[{name:"tab",type:"TabComponent",tagName:{text:"param"}},{name:"idx",type:"number",tagName:{text:"param"}}]},{name:"_getTabLabelId",args:[{name:"i",type:"number"}],optional:!1,returnType:"string",typeParameters:[],line:201,description:"<p>ritorna un id univoco per ogni label di tab </p>\n",jsdoctags:[{name:"i",type:"number",tagName:{text:"param"}}]},{name:"_handleClick",args:[{name:"$event",type:"Event"},{name:"index",type:"number"}],optional:!1,returnType:"void",typeParameters:[],line:218,jsdoctags:[{name:"$event",type:"Event",tagName:{text:"param"}},{name:"index",type:"number",tagName:{text:"param"}}]},{name:"_subscribeToTabLabels",args:[],optional:!1,returnType:"void",typeParameters:[],line:183,description:"<p>Sottoscrivi a cambiamenti nelle label dei tab. Necessario perch\xe8 l&#39;input per la label \xe8 sul TabComponent\nmentre il data binding \xe8 all&#39;interno di TabGroupComponent. Per fare in modo che il binding sia aggiornato\nbisogna sottoscriversi ai cambiamenti e azionare la change detection in maniera manuale.</p>\n",modifierKind:[112]},{name:"changeTab",args:[{name:"newIndex",type:"number"}],optional:!1,returnType:"void",typeParameters:[],line:104,jsdoctags:[{name:"newIndex",type:"number",tagName:{text:"param"}}]},{name:"ngAfterContentChecked",args:[],optional:!1,returnType:"void",typeParameters:[],line:100,description:"<p>Dopo che il contenuto \xe8 controllato, il componente conosce i tab che sono stati definiti\ne qual \xe8 l&#39;indice del tab selezionato.</p>\n"},{name:"ngAfterContentInit",args:[],optional:!1,returnType:"void",typeParameters:[],line:135},{name:"ngOnDestroy",args:[],optional:!1,returnType:"void",typeParameters:[],line:164}],hostBindings:[],hostListeners:[],description:"<p>Un componente tab-group con design bootstrap italia. Utilizzabile con il tag <code>&lt;it-tab-group&gt;</code>.</p>\n<p>Supporta al suo interno tab di base <code>&lt;it-tab&gt;</code> con una label e un contenuto.</p>\n",type:"component",sourceCode:"import {\n  Component,\n  AfterContentInit,\n  ContentChildren,\n  QueryList,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  AfterContentChecked,\n  OnDestroy\n} from '@angular/core';\nimport { Subscription, merge } from 'rxjs';\nimport { Util } from '../util/util';\nimport { TabComponent } from './tab.component';\n\n/** Usato per generare ID univoci per ogni componente tab */\nlet nextId = 0;\n\n/** Un change event emesso ai cambi di selezione. */\nexport class TabChangeEvent {\n  /** Indice del tab selezionato. */\n  index: number;\n  /** Riferimento al tab selezionato. */\n  tab: TabComponent;\n}\n\n /**\n * Un componente tab-group con design bootstrap italia. Utilizzabile con il tag `<it-tab-group>`.\n *\n * Supporta al suo interno tab di base `<it-tab>` con una label e un contenuto.\n */\n@Component({\n  selector: 'it-tab-group',\n  exportAs: 'itTabGroup',\n  templateUrl: './tab-group.component.html',\n  styleUrls: ['./tab-group.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabGroupComponent implements AfterContentInit, AfterContentChecked, OnDestroy {\n\n  @ContentChildren(TabComponent) _tabs: QueryList<TabComponent>;\n\n  /** L'indice del tab che dovrebbe essere selezionato dopo che il contenuto e' stato controllato */\n  private _indexToSelect: number | null = 0;\n\n  /** Subscription all'aggiunta e rimozione di tab. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription ai cambiamenti alle label dei tab. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Se le tab sono formattate come pill. */\n  @Input()\n  get pill(): boolean { return this._isPill; }\n  set pill(value) {\n    this._isPill = Util.coerceBooleanProperty(value);\n  }\n  private _isPill = false;\n\n\n  /** L'indice della tab attiva. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = Util.coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /**\n   * Se il tab-group ha un tema scuro\n   */\n  @Input()\n  get dark(): boolean { return this._dark; }\n  set dark(value) {\n    this._dark = Util.coerceBooleanProperty(value);\n  }\n  private _dark = false;\n\n  /** abilita il supporto al data-binding bidirezionale `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** emesso quando la selezione del tab cambia. */\n  @Output() readonly selectedTabChange: EventEmitter<TabChangeEvent> =\n      new EventEmitter<TabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {\n    this._groupId = nextId++;\n  }\n\n  /**\n   * Dopo che il contenuto \xe8 controllato, il componente conosce i tab che sono stati definiti\n   * e qual \xe8 l'indice del tab selezionato.\n   */\n  ngAfterContentChecked(): void {\n    this.changeTab(this._indexToSelect);\n  }\n\n  changeTab(newIndex: number): void {\n\n    // Non fissare `indexToSelect` immediatamente nel setter perch\xe8 pu\xf2 accadere che\n    // il numero di tab cambi prima che avvenga la change detection.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(newIndex);\n\n    // Se il nuovo tab \xe8 disabilitato, non fare niente\n    if (this._tabs && this._tabs.length > 0 && this._tabs.toArray()[indexToSelect].disabled) {\n      return;\n    }\n\n    if (this._selectedIndex !== indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emetto questo valore dopo che \xe8 partita la change detection\n      // dal momento che il contenuto controllato potrebbe contenere questa variabile\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setta la posizione per ogni tab.\n    this._tabs.forEach((tab: TabComponent, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._subscribeToTabLabels();\n\n    // Sottoscrivi al cambiamento nel numero di tab, cos\xec da\n    // poter ri-renderizzare il contenuto quando nuove tab vengono aggiunte o rimosse.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Mantieni il tab selezionato precedentemente se un nuovo tab \xe8 aggiunto o rimosso e non ci sono\n      // cambiamenti espliciti che selezionino un tab differente.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assegna `_indexToSelect` e `_selectedIndex` in modo da non emettere un change event\n            // per evitare al consumer loop infiniti in alcuni casi limite come ad esempio\n            // se si aggiunge un tab all'interno dell'evento `selectedIndexChange`.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy(): void {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  private _createChangeEvent(index: number): TabChangeEvent {\n    const event = new TabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Sottoscrivi a cambiamenti nelle label dei tab. Necessario perch\xe8 l'input per la label \xe8 sul TabComponent\n   * mentre il data binding \xe8 all'interno di TabGroupComponent. Per fare in modo che il binding sia aggiornato\n   * bisogna sottoscriversi ai cambiamenti e azionare la change detection in maniera manuale.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** fissa l'indice tra 0 e la dimensione dei tab. */\n  private _clampTabIndex(index: number | null): number {\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** ritorna un id univoco per ogni label di tab */\n  _getTabLabelId(i: number): string {\n    return `it-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** ritorna un id univoco per ogni elemento di contenuto del tab */\n  _getTabContentId(i: number): string {\n    return `it-tab-content-${this._groupId}-${i}`;\n  }\n\n  /** restituisce il tabIndex del tab. */\n  _getTabIndex(tab: TabComponent, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n\n  _handleClick($event: Event, index: number): void {\n    $event.preventDefault();\n    this.changeTab(index);\n  }\n\n}\n",constructorObj:{name:"constructor",description:"",args:[{name:"_changeDetectorRef",type:"ChangeDetectorRef"}],line:90,jsdoctags:[{name:"_changeDetectorRef",type:"ChangeDetectorRef",tagName:{text:"param"}}]},implements:["AfterContentInit","AfterContentChecked","OnDestroy"],accessors:{pill:{name:"pill",setSignature:{name:"pill",type:"void",args:[{name:"value",type:""}],returnType:"void",line:59,jsdoctags:[{name:"value",type:"",tagName:{text:"param"}}]}},selectedIndex:{name:"selectedIndex",setSignature:{name:"selectedIndex",type:"void",args:[{name:"value",type:""}],returnType:"void",line:68,jsdoctags:[{name:"value",type:"",tagName:{text:"param"}}]}},dark:{name:"dark",setSignature:{name:"dark",type:"void",args:[{name:"value",type:""}],returnType:"void",line:78,jsdoctags:[{name:"value",type:"",tagName:{text:"param"}}]}}},templateData:'<ul class="nav" [ngClass]="{\'nav-dark\': dark, \'nav-tabs\': !pill, \'nav-pills mb-3\': pill}" role="tablist">\n\n  <li class="nav-item" *ngFor="let tab of _tabs; let i = index">\n    <a\n      href="#"\n      role="tab"\n      [attr.aria-controls]="_getTabContentId(i)"\n      [attr.aria-selected]="selectedIndex == i"\n      [attr.aria-label]="tab.ariaLabel || null"\n      [attr.aria-labelledby]="(!tab.ariaLabel && tab.ariaLabelledby) ? tab.ariaLabelledby : null"\n      [ngClass]="{ \'nav-link\': true, \'active\': selectedIndex == i, \'disabled\': tab.disabled }"\n      [id]="_getTabLabelId(i)"\n      (click)="_handleClick($event, i)">\n      <i *ngIf="tab.icon" class="it-ico-lg d-block text-center" [ngClass]="tab.icon"></i>\n      {{tab.label}}\n    </a>\n  </li>\n</ul>\n<div class="tab-content">\n  <ng-container *ngFor="let tab of _tabs; let i = index">\n    <div\n      [ngClass]="{ \'tab-pane p-3\': true, \'show active\': selectedIndex == i }"\n      [id]="_getTabContentId(i)"\n      role="tabpanel"\n      [attr.aria-labelledby]="_getTabLabelId(i)">\n      <ng-container *ngTemplateOutlet="tab._implicitContent"></ng-container>\n    </div>\n  </ng-container>\n</div>\n'},{name:"ToggleComponent",id:"component-ToggleComponent-96bbfccd611f40d2afe13f6321b42ce3",file:"projects/design-angular-kit/src/lib/toggle/toggle.component.ts",changeDetection:"ChangeDetectionStrategy.OnPush",encapsulation:[],entryComponents:[],inputs:[],outputs:[],providers:[{name:"{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ToggleComponent), multi: true }",type:"component"}],selector:"it-toggle",styleUrls:["toggle.component.css"],styles:[],templateUrl:["./toggle.component.html"],viewProviders:[],inputsClass:[{name:"checked",description:"<p>Se la toggle \xe8 selezionata.</p>\n",line:27,type:"boolean"},{name:"disabled",description:"<p>Se la toggle \xe8 disabilitata.</p>\n",line:46,type:"boolean"},{name:"label",description:"<p>L&#39;etichetta della toggle.</p>\n",line:40,type:"string"}],outputsClass:[{name:"change",defaultValue:"new EventEmitter<ToggleChange>()",description:"<p>Evento emesso quando il valore <code>checked</code> della toggle cambia.</p>\n",line:58,type:"EventEmitter<ToggleChange>"}],propertiesClass:[{name:"_checked",defaultValue:"false",type:"",optional:!1,description:"",line:34,modifierKind:[112]},{name:"_controlValueAccessorChangeFn",defaultValue:"() => { }",type:"function",optional:!1,description:"",line:65,modifierKind:[112]},{name:"_disabled",defaultValue:"false",type:"",optional:!1,description:"",line:53,modifierKind:[112]},{name:"_onTouched",defaultValue:"() => {}",type:"function",optional:!1,description:"",line:63,modifierKind:[112]},{name:"inputId",defaultValue:"`toggle-${identifier++}`",type:"",optional:!1,description:"",line:61}],methodsClass:[{name:"_emitChangeEvent",args:[],optional:!1,returnType:"void",typeParameters:[],line:95,modifierKind:[112]},{name:"_toggle",args:[],optional:!1,returnType:"void",typeParameters:[],line:91,modifierKind:[112]},{name:"handleChange",args:[{name:"event",type:"Event"}],optional:!1,returnType:"void",typeParameters:[],line:83,jsdoctags:[{name:"event",type:"Event",tagName:{text:"param"}}]},{name:"registerOnChange",args:[{name:"fn",type:"function",function:[{name:"value",type:"any"}]}],optional:!1,returnType:"void",typeParameters:[],line:75,jsdoctags:[{name:"fn",type:"function",function:[{name:"value",type:"any"}],tagName:{text:"param"}}]},{name:"registerOnTouched",args:[{name:"fn",type:"any"}],optional:!1,returnType:"void",typeParameters:[],line:79,jsdoctags:[{name:"fn",type:"any",tagName:{text:"param"}}]},{name:"writeValue",args:[{name:"value",type:"any"}],optional:!1,returnType:"void",typeParameters:[],line:71,jsdoctags:[{name:"value",type:"any",tagName:{text:"param"}}]}],hostBindings:[],hostListeners:[],description:"<p>Una toggle con design bootstrap italia. Supporta tutte le funzionalit\xe0 di una checkbox HTML5,\ned espone una API simile. Una <code>&lt;it-toggle&gt;</code> pu\xf2 essere checked, unchecked, o disabled.</p>\n",type:"component",sourceCode:"import { Component, Input, Output, EventEmitter, ChangeDetectorRef, forwardRef, ChangeDetectionStrategy } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nlet identifier = 0;\n\nexport class ToggleChange {\n  source: ToggleComponent;\n  checked: boolean;\n}\n\n/**\n * Una toggle con design bootstrap italia. Supporta tutte le funzionalit\xe0 di una checkbox HTML5,\n * ed espone una API simile. Una `<it-toggle>` pu\xf2 essere checked, unchecked, o disabled.\n */\n@Component({\n  selector: 'it-toggle',\n  templateUrl: './toggle.component.html',\n  styleUrls: ['./toggle.component.css'],\n  providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ToggleComponent), multi: true }],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ToggleComponent implements ControlValueAccessor {\n  /**\n   * Se la toggle \xe8 selezionata.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value !== this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked = false;\n\n  /**\n   * L'etichetta della toggle.\n   */\n  @Input()\n  label: string;\n\n  /**\n   * Se la toggle \xe8 disabilitata.\n   */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    if (value !== this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled = false;\n\n  /**\n   * Evento emesso quando il valore `checked` della toggle cambia.\n   */\n  @Output() readonly change: EventEmitter<ToggleChange> =\n    new EventEmitter<ToggleChange>();\n\n    inputId = `toggle-${identifier++}`;\n\n  private _onTouched: () => any = () => {};\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => { };\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef\n  ) { }\n\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  handleChange(event: Event) {\n    event.stopPropagation();\n    if (!this.disabled) {\n      this._toggle();\n      this._emitChangeEvent();\n    }\n  }\n\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  private _emitChangeEvent() {\n    const event = new ToggleChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n}\n",constructorObj:{name:"constructor",description:"",args:[{name:"_changeDetectorRef",type:"ChangeDetectorRef"}],line:65,jsdoctags:[{name:"_changeDetectorRef",type:"ChangeDetectorRef",tagName:{text:"param"}}]},implements:["ControlValueAccessor"],accessors:{checked:{name:"checked",setSignature:{name:"checked",type:"void",args:[{name:"value",type:"boolean"}],returnType:"void",line:28,jsdoctags:[{name:"value",type:"boolean",tagName:{text:"param"}}]}},disabled:{name:"disabled",setSignature:{name:"disabled",type:"void",args:[{name:"value",type:"boolean"}],returnType:"void",line:47,jsdoctags:[{name:"value",type:"boolean",tagName:{text:"param"}}]}}},templateData:'<div class="form-check">\n  <div class="toggles">\n    <label [attr.for]=inputId>\n      {{label}}\n      <input type=checkbox\n        [id]=inputId\n        [checked]=checked\n        [disabled]=disabled\n        (change)=handleChange($event)>\n      <span class="lever"></span>\n    </label>\n  </div>\n</div>'},{name:"TooltipComponent",id:"component-TooltipComponent-32313650dff33b95e2fd41babc99476b",file:"projects/design-angular-kit/src/lib/tooltip/tooltip.component.ts",changeDetection:"ChangeDetectionStrategy.OnPush",encapsulation:[],entryComponents:[],inputs:[],outputs:[],providers:[],selector:"it-tooltip-window",styleUrls:["tooltip.component.css"],styles:[],templateUrl:["./tooltip.component.html"],viewProviders:[],inputsClass:[{name:"hidden",defaultValue:"false",line:21},{name:"id",line:20,type:"string"},{name:"placement",defaultValue:"'right'",line:18,type:"Placement"}],outputsClass:[],propertiesClass:[],methodsClass:[{name:"applyPlacement",args:[{name:"_placement",type:"Placement"}],optional:!1,returnType:"void",typeParameters:[],line:30,jsdoctags:[{name:"_placement",type:"Placement",tagName:{text:"param"}}]}],hostBindings:[{name:"attr.role",defaultValue:"'tooltip'",line:23},{name:"class",line:24,type:"string"}],hostListeners:[],description:"",type:"component",sourceCode:"import { Component, ChangeDetectionStrategy, ElementRef, Renderer2, Input, HostBinding } from '@angular/core';\nimport { Placement } from './positioning';\n\n@Component({\n  selector: 'it-tooltip-window',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: './tooltip.component.html',\n  styleUrls: ['./tooltip.component.css']\n})\nexport class TooltipComponent {\n  @Input() placement: Placement = 'right';\n\n  @Input() @HostBinding('id') id: string;\n  @Input() @HostBinding('hidden') hidden = false;\n\n  @HostBinding('attr.role') role = 'tooltip';\n  @HostBinding('class') get myCssClass(): string {\n    return 'tooltip show bs-tooltip-' + this.placement.split('-')[0] + ' bs-tooltip-' + this.placement;\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>, private _renderer: Renderer2) {}\n\n  applyPlacement(_placement: Placement) {\n    // Rimuovi le classi della posizione precedente\n    this._renderer.removeClass(this._element.nativeElement, 'bs-tooltip-' + this.placement.toString().split('-')[0]);\n    this._renderer.removeClass(this._element.nativeElement, 'bs-tooltip-' + this.placement.toString());\n\n    // Imposta la nuova posizione\n    this.placement = _placement;\n\n    // Applica le classi della nuova posizione\n    this._renderer.addClass(this._element.nativeElement, 'bs-tooltip-' + this.placement.toString().split('-')[0]);\n    this._renderer.addClass(this._element.nativeElement, 'bs-tooltip-' + this.placement.toString());\n  }\n}\n",constructorObj:{name:"constructor",description:"",args:[{name:"_element",type:"ElementRef<HTMLElement>"},{name:"_renderer",type:"Renderer2"}],line:26,jsdoctags:[{name:"_element",type:"ElementRef<HTMLElement>",tagName:{text:"param"}},{name:"_renderer",type:"Renderer2",tagName:{text:"param"}}]},templateData:'<div class="arrow"></div>\n<div class="tooltip-inner">\n  <ng-content></ng-content>\n</div>'}]}},xh2N:function(e,n,t){"use strict";var i=t("CcnG"),o=t("OQP5"),a=t("Ip0R");t("HiJM"),t.d(n,"a",function(){return r}),t.d(n,"b",function(){return m});var r=i.La({encapsulation:0,styles:[[""]],data:{}});function l(e){return i.eb(0,[(e()(),i.Na(0,0,null,null,2,"li",[["class","nav-item"]],null,null,null,null,null)),(e()(),i.Na(1,0,null,null,1,"a",[["aria-selected","true"],["class","nav-link active"],["data-toggle","tab"],["role","tab"]],[[8,"href",4],[1,"aria-controls",0]],null,null,null,null)),(e()(),i.db(-1,null,["HTML"]))],null,function(e,n){var t=n.component;e(n,1,0,i.Pa(1,"#",t.idTabHtml,""),t.idTabHtml)})}function s(e){return i.eb(0,[(e()(),i.Na(0,0,null,null,2,"li",[["class","nav-item"]],null,null,null,null,null)),(e()(),i.Na(1,0,null,null,1,"a",[["aria-selected","false"],["class","nav-link"],["data-toggle","tab"],["role","tab"]],[[8,"href",4],[1,"aria-controls",0]],null,null,null,null)),(e()(),i.db(-1,null,["TS"]))],null,function(e,n){var t=n.component;e(n,1,0,i.Pa(1,"#",t.idTypescript,""),t.idTypescript)})}function p(e){return i.eb(0,[(e()(),i.Na(0,0,null,null,2,"li",[["class","nav-item"]],null,null,null,null,null)),(e()(),i.Na(1,0,null,null,1,"a",[["aria-selected","false"],["class","nav-link"],["data-toggle","tab"],["role","tab"]],[[8,"href",4],[1,"aria-controls",0]],null,null,null,null)),(e()(),i.db(-1,null,["CSS"]))],null,function(e,n){var t=n.component;e(n,1,0,i.Pa(1,"#",t.idTabCss,""),t.idTabCss)})}function d(e){return i.eb(0,[(e()(),i.Na(0,0,null,null,4,"div",[["aria-labelledby","html-tab"],["class","tab-pane p-3 fade show active"],["role","tabpanel"]],[[8,"id",0]],null,null,null,null)),(e()(),i.Na(1,0,null,null,3,"pre",[],null,null,null,null,null)),(e()(),i.Na(2,0,null,null,2,"code",[["highlight",""]],[[8,"textContent",0]],null,null,null,null)),i.Ma(3,212992,null,0,o.a,[i.k,i.B,o.b],{highlight:[0,"highlight"],language:[1,"language"]},null),i.Ya(4,1)],function(e,n){e(n,3,0,"",e(n,4,0,"html"))},function(e,n){var t=n.component;e(n,0,0,t.idTabHtml),e(n,2,0,t.html)})}function c(e){return i.eb(0,[(e()(),i.Na(0,0,null,null,4,"div",[["aria-labelledby","typescript-tab"],["class","tab-pane p-3 fade"],["role","tabpanel"]],[[8,"id",0]],null,null,null,null)),(e()(),i.Na(1,0,null,null,3,"pre",[],null,null,null,null,null)),(e()(),i.Na(2,0,null,null,2,"code",[["highlight",""]],[[8,"textContent",0]],null,null,null,null)),i.Ma(3,212992,null,0,o.a,[i.k,i.B,o.b],{highlight:[0,"highlight"],language:[1,"language"]},null),i.Ya(4,1)],function(e,n){e(n,3,0,"",e(n,4,0,"typescript"))},function(e,n){var t=n.component;e(n,0,0,t.idTypescript),e(n,2,0,t.typescript)})}function u(e){return i.eb(0,[(e()(),i.Na(0,0,null,null,4,"div",[["aria-labelledby","css-tab"],["class","tab-pane p-3 fade"],["role","tabpanel"]],[[8,"id",0]],null,null,null,null)),(e()(),i.Na(1,0,null,null,3,"pre",[],null,null,null,null,null)),(e()(),i.Na(2,0,null,null,2,"code",[["highlight",""]],[[8,"textContent",0]],null,null,null,null)),i.Ma(3,212992,null,0,o.a,[i.k,i.B,o.b],{highlight:[0,"highlight"],language:[1,"language"]},null),i.Ya(4,1)],function(e,n){e(n,3,0,"",e(n,4,0,"scss"))},function(e,n){var t=n.component;e(n,0,0,t.idTabCss),e(n,2,0,t.css)})}function m(e){return i.eb(0,[(e()(),i.Na(0,0,null,null,6,"ul",[["class","nav nav-tabs"],["role","tablist"]],[[8,"id",0]],null,null,null,null)),(e()(),i.Ea(16777216,null,null,1,null,l)),i.Ma(2,16384,null,0,a.j,[i.M,i.J],{ngIf:[0,"ngIf"]},null),(e()(),i.Ea(16777216,null,null,1,null,s)),i.Ma(4,16384,null,0,a.j,[i.M,i.J],{ngIf:[0,"ngIf"]},null),(e()(),i.Ea(16777216,null,null,1,null,p)),i.Ma(6,16384,null,0,a.j,[i.M,i.J],{ngIf:[0,"ngIf"]},null),(e()(),i.Na(7,0,null,null,6,"div",[["class","tab-content"]],[[8,"id",0]],null,null,null,null)),(e()(),i.Ea(16777216,null,null,1,null,d)),i.Ma(9,16384,null,0,a.j,[i.M,i.J],{ngIf:[0,"ngIf"]},null),(e()(),i.Ea(16777216,null,null,1,null,c)),i.Ma(11,16384,null,0,a.j,[i.M,i.J],{ngIf:[0,"ngIf"]},null),(e()(),i.Ea(16777216,null,null,1,null,u)),i.Ma(13,16384,null,0,a.j,[i.M,i.J],{ngIf:[0,"ngIf"]},null)],function(e,n){var t=n.component;e(n,2,0,t.html),e(n,4,0,t.typescript),e(n,6,0,t.css),e(n,9,0,t.html),e(n,11,0,t.typescript),e(n,13,0,t.css)},function(e,n){var t=n.component;e(n,0,0,t.idTab),e(n,7,0,t.idTabContent)})}}}]);
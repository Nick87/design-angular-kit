{"version":3,"file":"src_app_form-input_form-input_module_ts.js","mappings":"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","sources":["./src/app/form-input/form-input-calendar/form-input-calendar.component.ts","./src/app/form-input/form-input-calendar/form-input-calendar.component.html","./src/app/form-input/form-input-example/form-input-example.component.ts","./src/app/form-input/form-input-example/form-input-example.component.html","./src/app/form-input/form-input-examples/form-input-examples.component.ts","./src/app/form-input/form-input-examples/form-input-examples.component.html","./src/app/form-input/form-input-icon/form-input-icon.component.ts","./src/app/form-input/form-input-icon/form-input-icon.component.html","./src/app/form-input/form-input-index/form-input-index.component.ts","./src/app/form-input/form-input-index/form-input-index.component.html","./src/app/form-input/form-input-number/form-input-number.component.ts","./src/app/form-input/form-input-number/form-input-number.component.html","./src/app/form-input/form-input-routing.module.ts","./src/app/form-input/form-input.module.ts","./src/app/form-input/model-driven-validation-example/model-driven-validation-example.component.ts","./src/app/form-input/model-driven-validation-example/model-driven-validation-example.component.html","./src/app/form-input/template-driven-validation-example/template-driven-validation-example.component.ts","./src/app/form-input/template-driven-validation-example/template-driven-validation-example.component.html"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'it-form-input-calendar-example',\n  templateUrl: './form-input-calendar.component.html',\n  styleUrls: ['./form-input-calendar.component.scss']\n})\nexport class FormInputCalendarExampleComponent {}\n","\n<h3>Input Calendario</h3>\n<div class=\"bd-example\">\n\n  <h5>Datepicker</h5>\n  <p class = \"mb-5\">Clicca sullâ€™icona a destra per visualizzare il datepicker.</p>\n  \n  <it-input id=\"interactive-input-calendar-0\" \n            type=\"date\" \n            name=\"interactive-input-calendar-example-0\" \n            label=\"Datepicker\" \n  ></it-input>\n\n</div>","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { AutoCompleteItem } from 'projects/design-angular-kit/src/public_api';\n\n@Component({\n  selector: 'it-form-input-example',\n  templateUrl: './form-input-example.component.html',\n  styleUrls: ['./form-input-example.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FormInputExampleComponent {\n  i = 0;\n  readOnly = false;\n  disabled = false;\n  type = 'text';\n  icon = 'it-pencil';\n  value = 'myNgModel';\n\n  get placeholder() {\n    return this.hasPlaceholder ? 'Testo di esempio' : '';\n  }\n\n  get label() {\n    return this.hasLabel ? 'Label dell\\'input' : '';\n  }\n\n  get note() {\n    return this.hasNote ? 'non condivideremo mai i tuoi dati' : '';\n  }\n\n  get hasPlaceholder(): boolean {\n    return this._hasPlaceholder;\n  }\n  set hasPlaceholder(value: boolean) {\n    this._hasPlaceholder = value;\n  }\n  private _hasPlaceholder = true;\n\n  get hasLabel(): boolean {\n    return this._hasLabel;\n  }\n  set hasLabel(value: boolean) {\n    this._hasLabel = value;\n  }\n  private _hasLabel = true;\n\n  get hasNote(): boolean {\n    return this._hasNote;\n  }\n  set hasNote(value: boolean) {\n    this._hasNote = value;\n  }\n  private _hasNote = false;\n\n  get autoCompleteData(): AutoCompleteItem[] {\n    return this._autoCompleteData;\n  }\n  set autoCompleteData(value: AutoCompleteItem[]) {\n    this._autoCompleteData = value;\n  }\n  private _autoCompleteData: AutoCompleteItem[] = [\n    {\n      value: 'Luisa Neri',\n      avatarSrcPath: 'https://randomuser.me/api/portraits/women/44.jpg',\n      avatarAltText: 'Luisa Neri',\n      label: 'Profilo'\n    }, \n    {\n      value: 'Cristian Borelli',\n      avatarSrcPath: 'https://randomuser.me/api/portraits/men/1.jpg',\n      avatarAltText: 'Cristian Borelli',\n      label: 'Profilo'\n    },\n    {\n      value: 'Andrea Stagi',\n      avatarSrcPath: 'https://randomuser.me/api/portraits/men/2.jpg',\n      avatarAltText: 'Andrea Stagi',\n      label: 'Profilo'\n    },\n    {\n      value: 'Comune di Firenze',\n      icon: 'it-pa',\n      link: 'https://www.comune.fi.it/',\n      label: 'Comune'\n    },\n    {\n      value: 'Italia',\n      avatarSrcPath: 'https://raw.githubusercontent.com/lipis/flag-icons/main/flags/4x3/it.svg',\n      avatarAltText: 'Italia'\n    }\n  ];\n\n}\n","\n<h3>Interazione con Form Input</h3>\n<p>Elementi e stili per la creazione di input accessibili e responsivi.</p>\n\n<div class=\"bd-example\">\n  <div class=\"row\">\n    <div class=\"col-4\">\n      <it-input id=\"interactive-input-0\" name=\"interactive-input-example-1\" \n        [label]=\"label\" \n        [placeholder]=\"placeholder\" \n        [disabled]=\"disabled\" \n        [readonly]=\"readOnly\" \n        [type]=\"type\" \n        [(ngModel)]=\"value\"\n        [note]=\"note\" \n        [autoCompleteData]=\"autoCompleteData\" \n        [enablePasswordStrengthMeter]=\"true\">\n      </it-input>\n    </div>\n  </div>\n  \n\n  <div class=\"row\">\n    <div class=\"form-check col-6\">\n      <h5>Opzioni</h5>\n      <div class=\"row\">\n        <div class=\"col-4\">\n          <it-checkbox [(ngModel)]=\"disabled\" label=\"Disabled\" id=\"disabled-checkbox\"></it-checkbox>\n          <it-checkbox [(ngModel)]=\"readOnly\" label=\"Readonly\" id=\"readonly-checkbox\"></it-checkbox>\n          <it-checkbox [(ngModel)]=\"hasLabel\" label=\"Label\" id=\"has-label-checkbox\"></it-checkbox>\n        </div>\n        <div class=\"col-auto\">\n          <it-checkbox [(ngModel)]=\"hasPlaceholder\" label=\"Placeholder\" id=\"has-placeholder-checkbox\"></it-checkbox>\n          <it-checkbox [(ngModel)]=\"hasNote\" label=\"Note\" id=\"has-note-checkbox\"></it-checkbox>\n        </div>\n\n      </div>\n\n    \n      </div>\n    <div class=\"form-check col-6\">\n      <h5>Tipo Input</h5>\n      <it-radio-group [(ngModel)]=\"type\">\n      <div class=\"row\">\n        <div class=\"col-4\">\n          <it-radio-button id=\"radio-text\" name=\"text\" value=\"text\" label=\"text\"></it-radio-button>\n          <it-radio-button id=\"radio-email\" name=\"email\" value=\"email\" label=\"email\"></it-radio-button>\n          <it-radio-button id=\"radio-password\" name=\"password\" value=\"password\" label=\"password\"></it-radio-button>\n        </div>\n        <div class=\"col-auto\">\n          <it-radio-button id=\"radio-number\" name=\"number\" value=\"number\" label=\"number\"></it-radio-button>\n          <it-radio-button id=\"radio-time\" name=\"time\" value=\"time\" label=\"time\"></it-radio-button>\n          <it-radio-button id=\"radio-search\" name=\"search\" value=\"search\" label=\"search\"></it-radio-button>\n        </div>\n      </div>\n      </it-radio-group>\n    </div>\n  </div>\n\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'it-form-input-examples',\n  templateUrl: './form-input-examples.component.html',\n  styleUrls: ['./form-input-examples.component.scss']\n})\nexport class FormInputExamplesComponent {\n\n}\n","\n\n\n\n\n\n\n\n<it-form-input-example></it-form-input-example>\n\n<it-source-display html=\"\n  \n  \n&lt;h3&gt;Interazione con Form Input&lt;/h3&gt;\n&lt;p&gt;Elementi e stili per la creazione di input accessibili e responsivi.&lt;/p&gt;\n\n&lt;div class=&quot;bd-example&quot;&gt;\n  &lt;div class=&quot;row&quot;&gt;\n    &lt;div class=&quot;col-4&quot;&gt;\n      &lt;it-input id=&quot;interactive-input-0&quot; name=&quot;interactive-input-example-1&quot; \n        [label]=&quot;label&quot; \n        [placeholder]=&quot;placeholder&quot; \n        [disabled]=&quot;disabled&quot; \n        [readonly]=&quot;readOnly&quot; \n        [type]=&quot;type&quot; \n        [(ngModel)]=&quot;value&quot;\n        [note]=&quot;note&quot; \n        [autoCompleteData]=&quot;autoCompleteData&quot; \n        [enablePasswordStrengthMeter]=&quot;true&quot;&gt;\n      &lt;/it-input&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  \n\n  &lt;div class=&quot;row&quot;&gt;\n    &lt;div class=&quot;form-check col-6&quot;&gt;\n      &lt;h5&gt;Opzioni&lt;/h5&gt;\n      &lt;div class=&quot;row&quot;&gt;\n        &lt;div class=&quot;col-4&quot;&gt;\n          &lt;it-checkbox [(ngModel)]=&quot;disabled&quot; label=&quot;Disabled&quot; id=&quot;disabled-checkbox&quot;&gt;&lt;/it-checkbox&gt;\n          &lt;it-checkbox [(ngModel)]=&quot;readOnly&quot; label=&quot;Readonly&quot; id=&quot;readonly-checkbox&quot;&gt;&lt;/it-checkbox&gt;\n          &lt;it-checkbox [(ngModel)]=&quot;hasLabel&quot; label=&quot;Label&quot; id=&quot;has-label-checkbox&quot;&gt;&lt;/it-checkbox&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;col-auto&quot;&gt;\n          &lt;it-checkbox [(ngModel)]=&quot;hasPlaceholder&quot; label=&quot;Placeholder&quot; id=&quot;has-placeholder-checkbox&quot;&gt;&lt;/it-checkbox&gt;\n          &lt;it-checkbox [(ngModel)]=&quot;hasNote&quot; label=&quot;Note&quot; id=&quot;has-note-checkbox&quot;&gt;&lt;/it-checkbox&gt;\n        &lt;/div&gt;\n\n      &lt;/div&gt;\n\n    \n      &lt;/div&gt;\n    &lt;div class=&quot;form-check col-6&quot;&gt;\n      &lt;h5&gt;Tipo Input&lt;/h5&gt;\n      &lt;it-radio-group [(ngModel)]=&quot;type&quot;&gt;\n      &lt;div class=&quot;row&quot;&gt;\n        &lt;div class=&quot;col-4&quot;&gt;\n          &lt;it-radio-button id=&quot;radio-text&quot; name=&quot;text&quot; value=&quot;text&quot; label=&quot;text&quot;&gt;&lt;/it-radio-button&gt;\n          &lt;it-radio-button id=&quot;radio-email&quot; name=&quot;email&quot; value=&quot;email&quot; label=&quot;email&quot;&gt;&lt;/it-radio-button&gt;\n          &lt;it-radio-button id=&quot;radio-password&quot; name=&quot;password&quot; value=&quot;password&quot; label=&quot;password&quot;&gt;&lt;/it-radio-button&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;col-auto&quot;&gt;\n          &lt;it-radio-button id=&quot;radio-number&quot; name=&quot;number&quot; value=&quot;number&quot; label=&quot;number&quot;&gt;&lt;/it-radio-button&gt;\n          &lt;it-radio-button id=&quot;radio-time&quot; name=&quot;time&quot; value=&quot;time&quot; label=&quot;time&quot;&gt;&lt;/it-radio-button&gt;\n          &lt;it-radio-button id=&quot;radio-search&quot; name=&quot;search&quot; value=&quot;search&quot; label=&quot;search&quot;&gt;&lt;/it-radio-button&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;/it-radio-group&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n\n&lt;/div&gt;\n\n\" typescript=\"\n  \n  import { Component, ChangeDetectionStrategy } from &#39;@angular/core&#39;;\nimport { AutoCompleteItem } from &#39;projects/design-angular-kit/src/public_api&#39;;\n\n@Component({\n  selector: &#39;it-form-input-example&#39;,\n  templateUrl: &#39;./form-input-example.component.html&#39;,\n  styleUrls: [&#39;./form-input-example.component.scss&#39;],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FormInputExampleComponent {\n  i = 0;\n  readOnly = false;\n  disabled = false;\n  type = &#39;text&#39;;\n  icon = &#39;it-pencil&#39;;\n  value = &#39;myNgModel&#39;;\n\n  get placeholder() {\n    return this.hasPlaceholder ? &#39;Testo di esempio&#39; : &#39;&#39;;\n  }\n\n  get label() {\n    return this.hasLabel ? &#39;Label dell\\&#39;input&#39; : &#39;&#39;;\n  }\n\n  get note() {\n    return this.hasNote ? &#39;non condivideremo mai i tuoi dati&#39; : &#39;&#39;;\n  }\n\n  get hasPlaceholder(): boolean {\n    return this._hasPlaceholder;\n  }\n  set hasPlaceholder(value: boolean) {\n    this._hasPlaceholder = value;\n  }\n  private _hasPlaceholder = true;\n\n  get hasLabel(): boolean {\n    return this._hasLabel;\n  }\n  set hasLabel(value: boolean) {\n    this._hasLabel = value;\n  }\n  private _hasLabel = true;\n\n  get hasNote(): boolean {\n    return this._hasNote;\n  }\n  set hasNote(value: boolean) {\n    this._hasNote = value;\n  }\n  private _hasNote = false;\n\n  get autoCompleteData(): AutoCompleteItem[] {\n    return this._autoCompleteData;\n  }\n  set autoCompleteData(value: AutoCompleteItem[]) {\n    this._autoCompleteData = value;\n  }\n  private _autoCompleteData: AutoCompleteItem[] = [\n    {\n      value: &#39;Luisa Neri&#39;,\n      avatarSrcPath: &#39;https://randomuser.me/api/portraits/women/44.jpg&#39;,\n      avatarAltText: &#39;Luisa Neri&#39;,\n      label: &#39;Profilo&#39;\n    }, \n    {\n      value: &#39;Cristian Borelli&#39;,\n      avatarSrcPath: &#39;https://randomuser.me/api/portraits/men/1.jpg&#39;,\n      avatarAltText: &#39;Cristian Borelli&#39;,\n      label: &#39;Profilo&#39;\n    },\n    {\n      value: &#39;Andrea Stagi&#39;,\n      avatarSrcPath: &#39;https://randomuser.me/api/portraits/men/2.jpg&#39;,\n      avatarAltText: &#39;Andrea Stagi&#39;,\n      label: &#39;Profilo&#39;\n    },\n    {\n      value: &#39;Comune di Firenze&#39;,\n      icon: &#39;it-pa&#39;,\n      link: &#39;https://www.comune.fi.it/&#39;,\n      label: &#39;Comune&#39;\n    },\n    {\n      value: &#39;Italia&#39;,\n      avatarSrcPath: &#39;https://raw.githubusercontent.com/lipis/flag-icons/main/flags/4x3/it.svg&#39;,\n      avatarAltText: &#39;Italia&#39;\n    }\n  ];\n\n}\n\n\n\">\n</it-source-display>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<it-form-input-number-example></it-form-input-number-example>\n\n<it-source-display html=\"\n  \n  &lt;h3&gt;Input Numerico&lt;/h3&gt;\n&lt;div class=&quot;bd-example&quot;&gt;\n  &lt;h5&gt;Limiti e Step&lt;/h5&gt;\n  &lt;p class = &quot;mb-5&quot;&gt;Aggiungendo le proprietÃ  &quot;min&quot;, &quot;max&quot; e &quot;step&quot; allâ€™input Ã¨ possibile \n                    limitare il valore minimo e massimo del campo e decidere di quanto varierÃ  a ogni click sui pulsanti.&lt;/p&gt;\n  \n  &lt;!-- Input numerico con min, max e step --&gt;\n  &lt;it-input id=&quot;interactive-input-number-0&quot; \n            type=&quot;number&quot; \n            name=&quot;interactive-input-number-example-0&quot; \n            label=&quot;Min, Max &amp; Step&quot;\n            min=&quot;10&quot; max=&quot;100&quot; step=&quot;5&quot;\n  &gt;&lt;/it-input&gt;\n\n  \n\n  &lt;h5&gt;Valuta&lt;/h5&gt;\n  &lt;p class = &quot;mb-5&quot;&gt;Per anteporre il simbolo della valuta in Euro, aggiungere la proprietÃ  &quot;currency&quot;&lt;/p&gt;\n  \n  &lt;!-- Input numerico con valuta --&gt;\n  &lt;it-input id=&quot;interactive-input-number-1&quot; \n            type=&quot;number&quot; \n            name=&quot;interactive-input-number-example-1&quot; \n            label=&quot;Currency&quot; \n            currency\n  &gt;&lt;/it-input&gt;\n\n\n  &lt;h5&gt;Percentuale&lt;/h5&gt;\n  &lt;p class = &quot;mb-5&quot;&gt;Per anteporre il simbolo della percentuale in Euro, aggiungere la proprietÃ  &quot;percentage&quot;&lt;/p&gt;\n  \n  &lt;!-- Input numerico con percentuale --&gt;\n  &lt;it-input id=&quot;interactive-input-number-2&quot; \n            type=&quot;number&quot; \n            name=&quot;interactive-input-number-example-2&quot; \n            label=&quot;Percentage&quot; \n            percentage\n  &gt;&lt;/it-input&gt;\n\n\n  &lt;h5&gt;Ridimensionamento&lt;/h5&gt;\n  &lt;p class = &quot;mb-5&quot;&gt;Ãˆ possibile far sÃ¬ che il campo numerico si ridimensioni automaticamente a seconda del valore contenuto in esso.\n                    Basta aggiungere la proprietÃ  &quot;adaptive&quot;&lt;/p&gt;\n  \n  &lt;!-- Input numerico con ridimensionamento automatico --&gt;\n  &lt;it-input id=&quot;interactive-input-number-3&quot; \n            type=&quot;number&quot; \n            name=&quot;interactive-input-number-example-3&quot; \n            label=&quot;Adattivo&quot; \n            adaptive\n            [(ngModel)]=&quot;adaptiveInputValue&quot; \n  &gt;&lt;/it-input&gt;\n\n&lt;/div&gt;\n\n\n\" typescript=\"\n  \n  import { Component } from &#39;@angular/core&#39;;\n\n@Component({\n  selector: &#39;it-form-input-number-example&#39;,\n  templateUrl: &#39;./form-input-number.component.html&#39;,\n  styleUrls: [&#39;./form-input-number.component.scss&#39;]\n})\nexport class FormInputNumberExampleComponent {\n  adaptiveInputValue: number = 99999;\n}\n\n\n\">\n</it-source-display>\n\n\n\n\n\n\n\n\n\n\n<it-form-input-calendar-example></it-form-input-calendar-example>\n\n<it-source-display html=\"\n  \n  \n&lt;h3&gt;Input Calendario&lt;/h3&gt;\n&lt;div class=&quot;bd-example&quot;&gt;\n\n  &lt;h5&gt;Datepicker&lt;/h5&gt;\n  &lt;p class = &quot;mb-5&quot;&gt;Clicca sullâ€™icona a destra per visualizzare il datepicker.&lt;/p&gt;\n  \n  &lt;it-input id=&quot;interactive-input-calendar-0&quot; \n            type=&quot;date&quot; \n            name=&quot;interactive-input-calendar-example-0&quot; \n            label=&quot;Datepicker&quot; \n  &gt;&lt;/it-input&gt;\n\n&lt;/div&gt;\n\n\" typescript=\"\n  \n  import { Component } from &#39;@angular/core&#39;;\n\n@Component({\n  selector: &#39;it-form-input-calendar-example&#39;,\n  templateUrl: &#39;./form-input-calendar.component.html&#39;,\n  styleUrls: [&#39;./form-input-calendar.component.scss&#39;]\n})\nexport class FormInputCalendarExampleComponent {}\n\n\n\">\n</it-source-display>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<it-form-input-icon-example></it-form-input-icon-example>\n\n<it-source-display html=\"\n  \n  \n&lt;h3&gt;Input con icona o pulsanti&lt;/h3&gt;\n&lt;div class=&quot;bd-example&quot;&gt;\n  &lt;div class=&quot;row&quot;&gt;\n    \n    &lt;div class=&quot;col-5&quot;&gt;\n\n      &lt;!-- Input con icona a sinistra tramite attributo --&gt;\n    &lt;it-input id=&quot;interactive-input-icon-0&quot; \n              name=&quot;interactive-input-icon-example-0&quot; \n              [label]=&quot;label&quot; \n              [icon] = &quot;icon&quot;&gt;\n    &lt;/it-input&gt;\n\n      &lt;!-- Input con icona a sinistra tramite direttiva itTextSuffix --&gt;\n    &lt;it-input id=&quot;interactive-input-icon-1&quot; name=&quot;interactive-input-icon-example-1&quot; [label]=&quot;label&quot;&gt;\n      &lt;it-icon *ngIf = &quot;icon&quot; size=&quot;icon-sm&quot; [icon]=&quot;icon&quot; itTextSuffix&gt;&lt;/it-icon&gt;\n    &lt;/it-input&gt;\n\n      &lt;!-- Input con icona a sinistra tramite direttiva itTextSuffix e bottone a destra tramite direttiva itSuffix--&gt;\n    &lt;it-input id=&quot;interactive-input-icon-2&quot; name=&quot;interactive-input-icon-example-2&quot; [label]=&quot;label&quot;&gt;\n      &lt;it-icon *ngIf = &quot;icon&quot; size=&quot;icon-sm&quot; [icon]=&quot;icon&quot; itTextPrefix&gt;&lt;/it-icon&gt;\n      &lt;button class = &quot;btn btn-primary&quot; itSuffix&gt;Invia&lt;/button&gt;\n    &lt;/it-input&gt;\n    &lt;/div&gt;\n\n\n    &lt;div class=&quot;form-check col-auto offset-1&quot;&gt;\n      &lt;h5&gt;Icona&lt;/h5&gt;\n      &lt;it-radio-group [(ngModel)]=&quot;icon&quot;&gt;\n        &lt;it-radio-button id=&quot;radio-none&quot; name=&quot;none&quot; [value]=&quot;undefined&quot; label=&quot;Nessuna&quot;&gt;&lt;/it-radio-button&gt;\n        &lt;it-radio-button id=&quot;radio-pencil&quot; name=&quot;it-pencil&quot; value=&quot;it-pencil&quot; label=&quot;it-pencil&quot;&gt;&lt;/it-radio-button&gt;\n        &lt;it-radio-button id=&quot;radio-link&quot; name=&quot;it-link&quot; value=&quot;it-link&quot; label=&quot;it-link&quot;&gt;&lt;/it-radio-button&gt;\n        &lt;it-radio-button id=&quot;radio-star&quot; name=&quot;it-star-outline&quot; value=&quot;it-star-outline&quot; label=&quot;it-star-outline&quot;&gt;&lt;/it-radio-button&gt;\n      &lt;/it-radio-group&gt;\n  &lt;/div&gt;\n  &lt;/div&gt;\n\n\n&lt;/div&gt;\n    \n\n\" typescript=\"\n  \n  import { Component } from &#39;@angular/core&#39;;\n\n@Component({\n  selector: &#39;it-form-input-icon-example&#39;,\n  templateUrl: &#39;./form-input-icon.component.html&#39;,\n  styleUrls: [&#39;./form-input-icon.component.scss&#39;]\n})\nexport class FormInputIconExampleComponent {\n  i = 0;\n  type = &#39;text&#39;;\n  icon = &#39;it-pencil&#39;;\n  value = &#39;&#39;;\n  label = &quot;Etichetta di esempio&quot;;\n}\n\n\n\">\n</it-source-display>\n\n\n\n\n<it-template-driven-validation-example></it-template-driven-validation-example>\n\n\n<it-source-display html=\"\n  \n  \n&lt;h3&gt;Interazione con Form Input dotato di validazione Template Driven&lt;/h3&gt;\n\n&lt;div class=&quot;bd-example&quot;&gt;\n  &lt;form #myForm=&quot;ngForm&quot;&gt;\n    &lt;it-input [(ngModel)]=&quot;value&quot; \n              name=&quot;myInput&quot; \n              required \n              minlength=&quot;3&quot; \n              maxlength=&quot;10&quot; \n              pattern=&quot;[ab]+&quot;&gt;\n    &lt;/it-input&gt;\n\n    &lt;p id=&quot;tdv-required&quot; class=&quot;error&quot;\n        *ngIf=&quot;myForm.controls.myInput?.errors?.required&quot;&gt;Il campo Ã¨ obbligatorio&lt;/p&gt;\n\n    &lt;p id=&quot;tdv-minlength&quot; class=&quot;error&quot;\n        *ngIf=&quot;myForm.controls.myInput?.errors?.minlength&quot;&gt;deve essere almeno di lunghezza 3&lt;/p&gt;\n\n    &lt;p id=&quot;tdv-maxlength&quot; class=&quot;error&quot;\n        *ngIf=&quot;myForm.controls.myInput?.errors?.maxlength&quot;&gt;deve essere massimo di lunghezza 10&lt;/p&gt;\n\n    &lt;p id=&quot;tdv-pattern&quot; class=&quot;error&quot;\n        *ngIf=&quot;myForm.controls.myInput?.errors?.pattern&quot;&gt;non corrisponde al pattern [ab]+&lt;/p&gt;\n\n    &lt;button itButton [disabled]=&quot;!myForm.valid&quot; (click)=&quot;save(myForm)&quot;&gt;Salva&lt;/button&gt;\n    \n    &lt;div *ngIf=&quot;savedValue&quot;&gt;Salvato `/{/{savedValue/}/}`&lt;/div&gt;\n  &lt;/form&gt;\n&lt;/div&gt;\n\n\" typescript=\"\n  \n  import { Component } from &#39;@angular/core&#39;;\nimport { NgForm } from &#39;@angular/forms&#39;;\n\n@Component({\n  selector: &#39;it-template-driven-validation-example&#39;,\n  templateUrl: &#39;./template-driven-validation-example.component.html&#39;,\n  styleUrls: [&#39;./template-driven-validation-example.component.scss&#39;]\n})\nexport class TemplateDrivenValidationExampleComponent {\n  value = &#39;&#39;;\n  savedValue = undefined;\n\n  save(ngForm: NgForm) {\n    this.savedValue = ngForm.value.myInput;\n  }\n}\n\n\n\">\n</it-source-display>\n\n<it-model-driven-validation-example></it-model-driven-validation-example>\n\n<it-source-display html=\"\n  \n  \n&lt;h3&gt;Interazione con Form Input dotato di validazione Model Driven&lt;/h3&gt;\n\n&lt;div class=&quot;bd-example&quot;&gt;\n  &lt;form [formGroup]=&quot;myForm&quot;&gt;\n    &lt;it-input formControlName=&quot;myInput&quot;&gt;&lt;/it-input&gt;\n    \n    &lt;p id=&quot;mdv-required&quot; class=&quot;error&quot;\n        *ngIf=&quot;myForm.controls.myInput?.errors?.required&quot;&gt;Il campo Ã¨ obbligatorio&lt;/p&gt;\n\n    &lt;p id=&quot;mdv-minlength&quot; class=&quot;error&quot;\n        *ngIf=&quot;myForm.controls.myInput?.errors?.minlength&quot;&gt;deve essere almeno di lunghezza 3&lt;/p&gt;\n\n    &lt;p id=&quot;mdv-maxlength&quot; class=&quot;error&quot;\n        *ngIf=&quot;myForm.controls.myInput?.errors?.maxlength&quot;&gt;deve essere massimo di lunghezza 10&lt;/p&gt;\n\n    &lt;p id=&quot;mdv-pattern&quot; class=&quot;error&quot;\n        *ngIf=&quot;myForm.controls.myInput?.errors?.pattern&quot;&gt;non corrisponde al pattern [ab]+&lt;/p&gt;\n\n    &lt;button itButton [disabled]=&quot;!myForm.valid&quot; (click)=&quot;save(myForm)&quot;&gt;Salva&lt;/button&gt;\n\n    &lt;div *ngIf=&quot;savedValue&quot;&gt;Salvato `/{/{savedValue/}/}`&lt;/div&gt;\n  &lt;/form&gt;\n&lt;/div&gt;\n\n\" typescript=\"\n  \n  import { Component } from &#39;@angular/core&#39;;\nimport { UntypedFormGroup, Validators, UntypedFormBuilder } from &#39;@angular/forms&#39;;\n\n@Component({\n  selector: &#39;it-model-driven-validation-example&#39;,\n  templateUrl: &#39;./model-driven-validation-example.component.html&#39;,\n  styleUrls: [&#39;./model-driven-validation-example.component.scss&#39;]\n})\nexport class ModelDrivenValidationExampleComponent {\n\n  myForm: UntypedFormGroup;\n\n  constructor(private _fb: UntypedFormBuilder) {\n    const validators = [\n      Validators.required,\n      Validators.minLength(3),\n      Validators.maxLength(10),\n      Validators.pattern(&#39;[ab]+&#39;)\n    ];\n    this.myForm = this._fb.group({\n      myInput: [&#39;&#39;, validators]\n    });\n  }\n\n  value = &#39;&#39;;\n  savedValue = undefined;\n\n  save(form: UntypedFormGroup) {\n    this.savedValue = form.value.myInput;\n  }\n\n}\n\n\n\">\n</it-source-display>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'it-form-input-icon-example',\n  templateUrl: './form-input-icon.component.html',\n  styleUrls: ['./form-input-icon.component.scss']\n})\nexport class FormInputIconExampleComponent {\n  i = 0;\n  type = 'text';\n  icon = 'it-pencil';\n  value = '';\n  label = \"Etichetta di esempio\";\n}\n","\n<h3>Input con icona o pulsanti</h3>\n<div class=\"bd-example\">\n  <div class=\"row\">\n    \n    <div class=\"col-5\">\n\n      <!-- Input con icona a sinistra tramite attributo -->\n    <it-input id=\"interactive-input-icon-0\" \n              name=\"interactive-input-icon-example-0\" \n              [label]=\"label\" \n              [icon] = \"icon\">\n    </it-input>\n\n      <!-- Input con icona a sinistra tramite direttiva itTextSuffix -->\n    <it-input id=\"interactive-input-icon-1\" name=\"interactive-input-icon-example-1\" [label]=\"label\">\n      <it-icon *ngIf = \"icon\" size=\"icon-sm\" [icon]=\"icon\" itTextSuffix></it-icon>\n    </it-input>\n\n      <!-- Input con icona a sinistra tramite direttiva itTextSuffix e bottone a destra tramite direttiva itSuffix-->\n    <it-input id=\"interactive-input-icon-2\" name=\"interactive-input-icon-example-2\" [label]=\"label\">\n      <it-icon *ngIf = \"icon\" size=\"icon-sm\" [icon]=\"icon\" itTextPrefix></it-icon>\n      <button class = \"btn btn-primary\" itSuffix>Invia</button>\n    </it-input>\n    </div>\n\n\n    <div class=\"form-check col-auto offset-1\">\n      <h5>Icona</h5>\n      <it-radio-group [(ngModel)]=\"icon\">\n        <it-radio-button id=\"radio-none\" name=\"none\" [value]=\"undefined\" label=\"Nessuna\"></it-radio-button>\n        <it-radio-button id=\"radio-pencil\" name=\"it-pencil\" value=\"it-pencil\" label=\"it-pencil\"></it-radio-button>\n        <it-radio-button id=\"radio-link\" name=\"it-link\" value=\"it-link\" label=\"it-link\"></it-radio-button>\n        <it-radio-button id=\"radio-star\" name=\"it-star-outline\" value=\"it-star-outline\" label=\"it-star-outline\"></it-radio-button>\n      </it-radio-group>\n  </div>\n  </div>\n\n\n</div>\n    ","import { Component } from '@angular/core';\nimport Documentation from '../../../assets/documentation.json';\n\n@Component({\n  selector: 'it-form-input-index',\n  templateUrl: './form-input-index.component.html',\n  styleUrls: ['./form-input-index.component.scss']\n})\nexport class FormInputIndexComponent {\n\n  component: any;\n\n  constructor() {\n    this.component = (<any>Documentation).components.find(component => component.name === 'FormInputComponent');\n  }\n\n}\n","<h1 class=\"bd-title\">Form Input</h1>\n<p class=\"bd-lead\">Il componente Form Input utilizzabile in un form</p>\n\n<it-tab-group>\n  <it-tab label=\"Descrizione\">\n    <div [innerHTML]=\"component.description\"></div>\n  </it-tab>\n  <it-tab label=\"API\">\n    <it-api-parameters [component]=\"component\"></it-api-parameters>\n  </it-tab>\n  <it-tab label=\"Esempi\">\n    <it-form-input-examples></it-form-input-examples>\n  </it-tab>\n</it-tab-group>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'it-form-input-number-example',\n  templateUrl: './form-input-number.component.html',\n  styleUrls: ['./form-input-number.component.scss']\n})\nexport class FormInputNumberExampleComponent {\n  adaptiveInputValue: number = 99999;\n}\n","<h3>Input Numerico</h3>\n<div class=\"bd-example\">\n  <h5>Limiti e Step</h5>\n  <p class = \"mb-5\">Aggiungendo le proprietÃ  \"min\", \"max\" e \"step\" allâ€™input Ã¨ possibile \n                    limitare il valore minimo e massimo del campo e decidere di quanto varierÃ  a ogni click sui pulsanti.</p>\n  \n  <!-- Input numerico con min, max e step -->\n  <it-input id=\"interactive-input-number-0\" \n            type=\"number\" \n            name=\"interactive-input-number-example-0\" \n            label=\"Min, Max & Step\"\n            min=\"10\" max=\"100\" step=\"5\"\n  ></it-input>\n\n  \n\n  <h5>Valuta</h5>\n  <p class = \"mb-5\">Per anteporre il simbolo della valuta in Euro, aggiungere la proprietÃ  \"currency\"</p>\n  \n  <!-- Input numerico con valuta -->\n  <it-input id=\"interactive-input-number-1\" \n            type=\"number\" \n            name=\"interactive-input-number-example-1\" \n            label=\"Currency\" \n            currency\n  ></it-input>\n\n\n  <h5>Percentuale</h5>\n  <p class = \"mb-5\">Per anteporre il simbolo della percentuale in Euro, aggiungere la proprietÃ  \"percentage\"</p>\n  \n  <!-- Input numerico con percentuale -->\n  <it-input id=\"interactive-input-number-2\" \n            type=\"number\" \n            name=\"interactive-input-number-example-2\" \n            label=\"Percentage\" \n            percentage\n  ></it-input>\n\n\n  <h5>Ridimensionamento</h5>\n  <p class = \"mb-5\">Ãˆ possibile far sÃ¬ che il campo numerico si ridimensioni automaticamente a seconda del valore contenuto in esso.\n                    Basta aggiungere la proprietÃ  \"adaptive\"</p>\n  \n  <!-- Input numerico con ridimensionamento automatico -->\n  <it-input id=\"interactive-input-number-3\" \n            type=\"number\" \n            name=\"interactive-input-number-example-3\" \n            label=\"Adattivo\" \n            adaptive\n            [(ngModel)]=\"adaptiveInputValue\" \n  ></it-input>\n\n</div>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { FormInputIndexComponent } from './form-input-index/form-input-index.component';\n\nconst routes: Routes = [\n  { path: '', component: FormInputIndexComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class FormInputRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FormInputRoutingModule } from './form-input-routing.module';\nimport { FormInputExampleComponent } from './form-input-example/form-input-example.component';\nimport { FormInputExamplesComponent } from './form-input-examples/form-input-examples.component';\nimport { FormInputIndexComponent } from './form-input-index/form-input-index.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { DesignAngularKitModule } from 'projects/design-angular-kit/src/public_api';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  TemplateDrivenValidationExampleComponent\n} from './template-driven-validation-example/template-driven-validation-example.component';\nimport { ModelDrivenValidationExampleComponent } from './model-driven-validation-example/model-driven-validation-example.component';\nimport { FormInputIconExampleComponent } from './form-input-icon/form-input-icon.component';\nimport { FormInputNumberExampleComponent } from './form-input-number/form-input-number.component';\nimport { FormInputCalendarExampleComponent } from './form-input-calendar/form-input-calendar.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    DesignAngularKitModule,\n    SharedModule,\n    FormInputRoutingModule,\n    ReactiveFormsModule\n  ],\n  declarations: [\n    FormInputExampleComponent,\n    FormInputIconExampleComponent,\n    FormInputExamplesComponent,\n    FormInputIndexComponent,\n    TemplateDrivenValidationExampleComponent,\n    ModelDrivenValidationExampleComponent,\n    FormInputNumberExampleComponent,\n    FormInputCalendarExampleComponent\n  ]\n})\nexport class FormInputModule { }\n","import { Component } from '@angular/core';\nimport { UntypedFormGroup, Validators, UntypedFormBuilder } from '@angular/forms';\n\n@Component({\n  selector: 'it-model-driven-validation-example',\n  templateUrl: './model-driven-validation-example.component.html',\n  styleUrls: ['./model-driven-validation-example.component.scss']\n})\nexport class ModelDrivenValidationExampleComponent {\n\n  myForm: UntypedFormGroup;\n\n  constructor(private _fb: UntypedFormBuilder) {\n    const validators = [\n      Validators.required,\n      Validators.minLength(3),\n      Validators.maxLength(10),\n      Validators.pattern('[ab]+')\n    ];\n    this.myForm = this._fb.group({\n      myInput: ['', validators]\n    });\n  }\n\n  value = '';\n  savedValue = undefined;\n\n  save(form: UntypedFormGroup) {\n    this.savedValue = form.value.myInput;\n  }\n\n}\n","\n<h3>Interazione con Form Input dotato di validazione Model Driven</h3>\n\n<div class=\"bd-example\">\n  <form [formGroup]=\"myForm\">\n    <it-input formControlName=\"myInput\"></it-input>\n    \n    <p id=\"mdv-required\" class=\"error\"\n        *ngIf=\"myForm.controls.myInput?.errors?.required\">Il campo Ã¨ obbligatorio</p>\n\n    <p id=\"mdv-minlength\" class=\"error\"\n        *ngIf=\"myForm.controls.myInput?.errors?.minlength\">deve essere almeno di lunghezza 3</p>\n\n    <p id=\"mdv-maxlength\" class=\"error\"\n        *ngIf=\"myForm.controls.myInput?.errors?.maxlength\">deve essere massimo di lunghezza 10</p>\n\n    <p id=\"mdv-pattern\" class=\"error\"\n        *ngIf=\"myForm.controls.myInput?.errors?.pattern\">non corrisponde al pattern [ab]+</p>\n\n    <button itButton [disabled]=\"!myForm.valid\" (click)=\"save(myForm)\">Salva</button>\n\n    <div *ngIf=\"savedValue\">Salvato `{{savedValue}}`</div>\n  </form>\n</div>","import { Component } from '@angular/core';\nimport { NgForm } from '@angular/forms';\n\n@Component({\n  selector: 'it-template-driven-validation-example',\n  templateUrl: './template-driven-validation-example.component.html',\n  styleUrls: ['./template-driven-validation-example.component.scss']\n})\nexport class TemplateDrivenValidationExampleComponent {\n  value = '';\n  savedValue = undefined;\n\n  save(ngForm: NgForm) {\n    this.savedValue = ngForm.value.myInput;\n  }\n}\n","\n<h3>Interazione con Form Input dotato di validazione Template Driven</h3>\n\n<div class=\"bd-example\">\n  <form #myForm=\"ngForm\">\n    <it-input [(ngModel)]=\"value\" \n              name=\"myInput\" \n              required \n              minlength=\"3\" \n              maxlength=\"10\" \n              pattern=\"[ab]+\">\n    </it-input>\n\n    <p id=\"tdv-required\" class=\"error\"\n        *ngIf=\"myForm.controls.myInput?.errors?.required\">Il campo Ã¨ obbligatorio</p>\n\n    <p id=\"tdv-minlength\" class=\"error\"\n        *ngIf=\"myForm.controls.myInput?.errors?.minlength\">deve essere almeno di lunghezza 3</p>\n\n    <p id=\"tdv-maxlength\" class=\"error\"\n        *ngIf=\"myForm.controls.myInput?.errors?.maxlength\">deve essere massimo di lunghezza 10</p>\n\n    <p id=\"tdv-pattern\" class=\"error\"\n        *ngIf=\"myForm.controls.myInput?.errors?.pattern\">non corrisponde al pattern [ab]+</p>\n\n    <button itButton [disabled]=\"!myForm.valid\" (click)=\"save(myForm)\">Salva</button>\n    \n    <div *ngIf=\"savedValue\">Salvato `{{savedValue}}`</div>\n  </form>\n</div>"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}